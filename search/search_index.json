{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Unciv!","text":"<p>Unciv is an open source, mod-friendly Android and Desktop remake of Civ V, made with LibGDX. Build your civilization, research technologies, expand your cities and defeat your foes!</p>"},{"location":"#how-do-i-play","title":"How do I play?","text":"<p>Unmodded gameplay is equal to Civ V, so any Civ V guide will suffice</p> <p>The game contains a tutorial to get you started</p>"},{"location":"#how-can-i-contribute","title":"How can I contribute?","text":"<p>The most valuable first step to getting involved is engaging with our community: join the Discord! It's a great place to meet your fellow contributors.</p> <p>In addition, you can keep track of requests, bugs, and our todo list for the application at the repository's Issue Tracker</p> <p>If you're a developer, you'll probably want to start at the Getting Started page!</p> <p>If you're a translator, head over to Translating!</p> <p>If you're a modder, start here.</p> <p>If not, you can still help by spreading the word - vote for Unciv where you can, mention it on Reddit or Twitter etc, and help us with new ideas of how to get the word out!</p>"},{"location":"Credits/","title":"Credits","text":""},{"location":"Credits/#icon-credits","title":"Icon Credits","text":"<p>Flag Icons made by Freepik from www.flaticon.com and licensed by Creative Commons 3.0, except for:</p> <ul> <li>[Bangladeshi flag] InkScaped by touhidurrr licensed under CC-BY-SA 4.0. Original SVG, here.</li> <li>[Catalan flag] by J0anJosep licensed under Public Domain</li> <li>[Rusyn flag] gimped from the wikipedia flag Flag of Pannonian Rusyns (CC-BY-SA 4.0)</li> <li>[Latin flag] made from wikipedia entry for SPQR, Creative Commons Attribution 3.0 Unported</li> <li>[Zulu flag] made from wikipedia entry for the Z flag: public domain</li> <li>[Galician flag] made from wikipedia asset for the civil flag of Galicia: public domain</li> </ul> <p>New Unciv logo made by u-ndefined on Discord</p> <p>Base tile icons for the \"Fantasy Hex\" tileset belong to CuddlyClover @ https://cuddlyclover.itch.io/fantasy-hex-tiles with a few additions by various contributors</p> <p>Promotional trailer for Steam and other storefronts made by letstalkaboutdune</p> <p>Unless otherwise specified, all the following are from the Noun Project licenced under either Creative Commons or Public Domain</p>"},{"location":"Credits/#stat-icons","title":"Stat icons","text":"<ul> <li>Gear by Alex Bickov for Production</li> <li>Apple by Pedro Gon\u00e7alves for Food</li> <li>gold by Eliricon for Gold</li> <li>Beaker by Delwar Hossain for Science</li> <li>Music by Naomi Atkinson for Culture</li> <li>Smiley by Alexander Skowalsky for Happiness</li> <li>Dove by Sandra for Faith</li> <li>User by St\u00e9phanie Rusch for Population</li> <li>Unhappy By Daryl Vandermont for Malcontent</li> </ul>"},{"location":"Credits/#units","title":"Units","text":""},{"location":"Credits/#ancient-era","title":"Ancient Era","text":"<ul> <li>Hammer By Hea Poh Lin for Worker</li> <li>Flag By Melvin Poppelaars for Settler</li> <li>Eagle By anggun for Scout</li> <li>Axe By ehab.abdullah for Warrior</li> <li>Haka By Josh for Maori Warrior</li> <li>Spiked Club by Hamish</li> <li>Bow And Arrow By Viktor Ostrovsky for Archer</li> <li>Bow By Arthur Shlain for Bowman</li> <li>Javelin By WEBTECHOPS LLP for Atlatlist</li> <li>arrows by Ayub Irawan for Skirmisher</li> <li>Fishing Vessel By Luis Prado for Work Boats</li> <li>Greek Trireme By Zachary McCune for Trireme</li> <li>Greek Trireme By Zachary McCune for Quinquereme. The original work has been modified.</li> <li>dragon by BGBOXXX Design for Dromon</li> <li>Viking Boat by Eucalyp for Galley</li> <li>Chariot By Andrew Doane for Chariot Archer</li> <li>Elephant By Luis Prado for War Elephant</li> <li>Centaur by Michael Wohlwend for Horse Archer</li> <li>Spear By Stephen Copinger for Spearman</li> <li>Greek shield for Hoplite</li> <li>ram by Becris for Battering Ram</li> <li>Spear by lastspark for Marauder</li> <li>Spiked club for Brute</li> <li>Hoplite by Eucalyp for Immortal</li> <li>Slingshot by James Keuning for Slinger</li> <li>warrior By DinosoftLab for Pictish Warrior (combined with Shamrock, see Promotions)</li> </ul>"},{"location":"Credits/#classical-era","title":"Classical Era","text":"<ul> <li>Catapult By Jakub Ukrop</li> <li>Unloaded Crossbow By Hamish as Ballista</li> <li>Bow and arrow By Lars Meiertoberens for Composite Bowman</li> <li>Sword By Guilherme Furtado for Swordsman</li> <li>Mohawk By Dairy Free Design for Mohawk Warrior</li> <li>Roman Helmet By parkjisun for Legion</li> <li>Horse By AFY Studio for Horseman</li> <li>Horse Head By Juan Pablo Bravo for Companion Cavalry</li> <li>Elephant By Angriawan Ditya Zulkarnain for African Forest Elephant. The original work has been modified.</li> <li>Horse By Ranah Pixel Studio for Cataphract</li> </ul>"},{"location":"Credits/#medieval-era","title":"Medieval Era","text":"<ul> <li>Ship By Vanisha for Galleass</li> <li>Crossbow By Creaticca Creative Agency for Crossbowman</li> <li>Longbow By Hamish for Longbowman</li> <li>Trebuchet By Ben Davis</li> <li>Sword By uzeir syarief for Longswordsman</li> <li>Samurai By Chanut is Industries</li> <li>Spear By Alvaro Cabrera for Pikeman</li> <li>Halberd parkjisun for Landsknecht</li> <li>Knight By Tyler Glaude</li> </ul>"},{"location":"Credits/#renaissance-era","title":"Renaissance Era","text":"<ul> <li>Portuguese Caravel by Zack McCune for Caravel</li> <li>Cannon By Orin Zuu</li> <li>Musket By Cezary Lopacinski for Musketman</li> <li>Tarbouche By Mohamed Amine for Janissary</li> <li>Black powder musket By Jarem Fyre for Minuteman</li> <li>Rapier By Hamish for Musketeer</li> <li>Ship By Orin Zuu for Frigate</li> <li>Pirate by Berkah Icon for Privateer</li> <li>Pirate by Smalllike for Sea Beggar*</li> <li>Ship By Mungang Kim for Ship of the Line</li> <li>Lance By parkjisun for Lancer</li> <li>Sword By Daniela Baptista for Sipahi</li> <li>Helmet by Robert Bjurshagen for Hakkapeliitta</li> </ul>"},{"location":"Credits/#industrial-era","title":"Industrial Era","text":"<ul> <li>Rifle By Chameleon Design for Rifleman</li> <li>Bayonet By food lover for Carolean</li> <li>military cap by Robert Bjurshagen for Mehal Sefari</li> <li>Horse By Bakunetso Kaito for Cavalry</li> <li>horse racing By Sergio Morozov for Cossack</li> <li>Marching Band by Darrin Loeliger, US for Hussar. The original work has been modified.</li> <li>Artillery By Creative Mania</li> <li>Ship By Aisyah for Ironclad</li> </ul>"},{"location":"Credits/#modern-era","title":"Modern Era","text":"<ul> <li>Submarine By Hea Poh Lin, MY</li> <li>Helmet By Daniel Turner for Great War Infantry</li> <li>Cap By Creative Mania for Foreign Legion</li> <li>xm8 By Xela Ub for Infantry</li> <li>Icon for Carrier made by JackRainy, based on Aircraft Carrier By IcoLabs, BR</li> <li>Battleship By Vitaliy Gorbachev, KZ for Battleship</li> <li>machine-gun By Joana Pereira for Machine Gun</li> <li>artillery by Izwar Muis for Anti-Aircraft Gun</li> <li>Tank By corpus delicti for Landship</li> <li>Warship By zidney for Destroyer</li> </ul>"},{"location":"Credits/#atomic-era","title":"Atomic Era","text":"<ul> <li>Water Gun by ProSymbols for Marine</li> <li>Parachute by Nociconist for Paratrooper</li> <li>Tank By jeff for Tank</li> <li>Tank Manuel Dixken, DE for Panzer</li> <li>Anti-Tank Gun By Tom Fricker</li> <li>atomic bomb by AmruID for Atomic Bomb</li> <li>Military vehicle By Luke Anthony Firth For Rocket Artillery</li> <li>Missile By Eucalyp for Mobile SAM</li> </ul>"},{"location":"Credits/#information-era","title":"Information Era","text":"<ul> <li>Submarine by Freepik adapted for Nuclear Submarine</li> <li>APC By Luke Anthony Firth for Mechanized Infantry</li> <li>Battleship by Edi Prastyo for Missile Cruiser</li> <li>Modern Armor By Public Domain Nouns for Modern Armor</li> <li>Nuclear Missile By Lluisa Iborra, ES</li> <li>Robot by Lluisa Iborra, ES for Giant Death Robot</li> <li>Missile By ProSymbols for SS Booster</li> <li>Rocket By BomSymbols for SS Cockpit</li> <li>Engine By Andre for SS Engine</li> <li>Chamber By IYIKON for SS Stasis Chamber</li> </ul>"},{"location":"Credits/#all-eras","title":"All Eras","text":"<ul> <li>Pallet By James Keuning for Great Artist</li> <li>Gear By Melvin Salas for Great Engineer</li> <li>Beaker By Delwar Hossain for Great Scientist</li> <li>Dove by sandra for Great Prophet</li> <li>General By anbileru adaleru for Great General</li> <li>Religion by Bruno G\u00e4tjens Gonz\u00e1lez adapted for Missionary</li> <li>invisibility cloak  by Locad for Inquisitor</li> <li>Anchor by M. Adebadal for Great Admiral</li> </ul>"},{"location":"Credits/#units-absoluteunits-unitset-images","title":"Units - AbsoluteUnits unitset images","text":"<p>Unless otherwise specified, units for the AbsoluteUnits unitset are made by letstalkaboutdune and are licensed under Creative Commons Attribution 4.0 International</p> <p>Barbarian variants by Pelo, made for Playable Barbarians:</p> <ul> <li>Frigate-Barbarians</li> <li>Horse Archer-Barbarians.png</li> <li>Lancer-Barbarians</li> <li>Longswordsman-Barbarians</li> <li>Pikeman-Barbarians</li> <li>Rider-Barbarians</li> <li>Swordsman-Barbarians</li> <li>Trireme-Barbarians</li> <li>Musketman-Barbarians</li> </ul> <p>By Basil:</p> <ul> <li>Worker-Barbarians</li> <li>Settler-Ancient era</li> <li>Great Admiral</li> </ul>"},{"location":"Credits/#hexarealm","title":"HexaRealm","text":"<p>Unless otherwise specified, Tile improvements and units, as well as the terrains and improvements for HexaRealm tileset, are made by The Bucketeer / @GeneralWadaling and are licenced under Creative Commons 3.0</p> <p>HexaRealm tileset images by legacymtgsalvationuser69544 here:</p> <ul> <li>Coast-Land edge tiles</li> <li>Coast-Ocean edge tiles</li> <li>Lake-Land edge tiles</li> <li>Krakatoa (based on The Bucketeer's tile)</li> </ul>"},{"location":"Credits/#resources","title":"Resources","text":"<ul> <li>Saffron By parkjisun for Dye</li> <li>Can By Nick Bluth for Aluminum</li> <li>Coal By Michael Wohlwend</li> <li>Anvil By Jason Dilworth for Iron</li> <li>Deer By Richard Nixon</li> <li>Banana By Adrian Coquet</li> <li>Oil By Tiago Maricate (also as Civilopedia category icon)</li> <li>Statue By Joris Hoogendoorn for Marble</li> <li>Ribbon By Anton for Silk</li> <li>Stone By AFY Studio</li> <li>Goblet By Pedro Santos for Silver</li> <li>Sugar By ahmad</li> <li>Spice By ahmad</li> <li>Radiation symbol By icon 54 for Uranium</li> <li>Wine By Adrien Coquet</li> <li>Wheat By Juraj Sedlak</li> <li>Sheep By Unrecognized</li> <li>Elephant By Kelsey Armstrong for Ivory</li> <li>Cattle By Daniela Baptista</li> <li>Leather By Alen Krummenacher for Furs</li> <li>Gem By Lluisa Iborra</li> <li>Joss Stick By Hea Poh Lin for Incense</li> <li>Pottery By Laymik, UA for Porcelain</li> <li>Jewelry By Shocho, IN</li> <li>Lemons By sachin modgekar, IN for Citrus</li> <li>Pipes By Nibras@design for Copper</li> <li>Crab By YuguDesign</li> <li>Truffle By parkjisun</li> <li>Salt By HAMEL KHALED, DZ</li> </ul>"},{"location":"Credits/#improvements","title":"Improvements","text":"<ul> <li>Woodcutting axe By Chanut is Industries for Lumber Mill</li> <li>Monument By Setyo Ari Wibowo for Landmark</li> <li>Farm By Bonnie Beach</li> <li>Bank By Scott Dunlap for Customs House</li> <li>Academy By CJS</li> <li>Factory By RULI for Manufactory</li> <li>Mine By Edward Boatman</li> <li>Corral By Luis Prado for Pasture</li> <li>Plants By hendra sudibyo for Plantation</li> <li>Pickaxe By Creative Stall for Quarry</li> <li>Food stall By I Putu Kharismayadi for Trading post</li> <li>Road By REVA</li> <li>Ruins By Creative Stall for Ancient runs</li> <li>Ruins By Paulo Volkova for City ruins</li> <li>Fishing Net By Made for Fishing Boats</li> <li>Moai By Template</li> <li>Fort By Adrien Coquet</li> <li>Citadel By Adrien Coquet</li> <li>Village by Andrey Vasiliev</li> <li>pumping station by Peter van Driel for Polder</li> <li>Oil Platform by Georgiana Ionescu for Offshore Platform</li> <li>Broom by Rakhmat Setiawan for Remove Fallout</li> <li>Axe by Those Icons for Remove Forest and Remove Jungle</li> <li>Machete by Robert A. Di Ieso for Remove Marsh</li> <li>Icon for Remove Railroad by vegeta1k95</li> <li>Icon for Remove Road by vegeta1k95</li> </ul>"},{"location":"Credits/#buildings","title":"Buildings","text":"<ul> <li>Building by Aurel for fallback image</li> </ul>"},{"location":"Credits/#ancient-era_1","title":"Ancient Era","text":"<ul> <li>Storehouse By Pedro Santos for Granary</li> <li>Shinto Gate by Alexander Skowalsky for Shrine</li> <li>Pyramid by Oscar Y\u00e1\u00f1ez for Mayan Pyramid</li> <li>Great Wall Of China By Arthur Shlain for Walls</li> <li>Markadan Tower by Vectors Market for Walls of Babylon</li> <li>Block By Monjin Friends for Stone Works</li> <li>korean palace By 1516 for Palace</li> <li>Obelisk By Eliricon for Monument</li> <li>obelisk By IconMark for Stele</li> <li>Cross swords By Creaticca Creative Agency for Barracks</li> <li>Fortress By Creative Stall for Krepost</li> <li>WaterMill by Jakub Ukrop for Water Mill</li> <li>Paper By anam</li> <li>Circus By Ralph Schmitzer</li> <li>Stonehenge By icon 54</li> <li>Ho Chi Minh mausoleum By Ph\u1ea1m Thanh L\u1ed9c for Mausoleum of Halicarnassus</li> <li>Icon for Statue of Zeus made by JackRainy, based on King By Eucalyp</li> <li>temple By Fabio Meroni for Temple of Artemis</li> </ul>"},{"location":"Credits/#classical-era_1","title":"Classical Era","text":"<ul> <li>Lighthouse By Dolly Holmes</li> <li>Lighthouse By Hea Poh Lin for The Great Lighthouse</li> <li>Temple By 1516</li> <li>Anubis By Carpe Diem for Burial Tomb</li> <li>Parthenon By Christopher T. Howlett for The Oracle</li> <li>Stadium By sandra for Colosseum</li> <li>Terracotta Army By Ph\u1ea1m Thanh L\u1ed9c</li> <li>Stadium By Creaticca Creative Agency for Circus Maximus</li> <li>Market By sofi</li> <li>Bazaar By Tokka Elkholy</li> <li>Shekel Coin By Till Teenck for Mint</li> <li>Aqueduct By Arthur Shlain</li> <li>Great Wall By icon 54</li> <li>Rice Field by Graphic Engineer for Terrace farm</li> <li>Canoe By Viktor Fedyuk (Tim P) for Floating Gardens</li> <li>Arc de Triomphe By Andrejs Kirma, LV for National Epic</li> <li>Bank by By P Thanga Vignesh for National Treasury</li> <li>Judge By Kriszti\u00e1n M\u00e1ty\u00e1s for Courthouse</li> <li>Petra By Ranah Pixel Studio for Petra</li> </ul>"},{"location":"Credits/#medieval-era_1","title":"Medieval Era","text":"<ul> <li>College By Alexander Skowalsky for University</li> <li>Wat Arun Ratchawararam Ratchawaramahawihan By J\u00f3zsef Bal\u00e1zs-Heged\u00fcs for Wat</li> <li>College By Vectors Market for National College</li> <li>Chichen Itza By Hea Poh Lin</li> <li>Castle By Mint Shirt</li> <li>Red Fort, Gateway of India By Arunabh Jain, IN for Mughal Fort</li> <li>Angkor Wat By Ph\u1ea1m Thanh L\u1ed9c for Angkor Wat</li> <li>Alhambra By Ph\u1ea1m Thanh L\u1ed9c</li> <li>Books By Abir Alward for Oxford University</li> <li>Icon for Heroic Epic made by SomeTroglodyte based on Iwo Jima Memorial photo taken by Famartin</li> <li>Forge By Monjin Friends</li> <li>Anchor By Saeful Muslim for Harbor</li> <li>Hand saw By b farias for Workshop</li> <li>House By sofy for Longhouse</li> <li>Hagia Sophia By Felipe Alvarado</li> <li>Factory By Maxim Kulikov for Ironworks</li> <li>Notre Dame By Marco Livolsi</li> <li>Shield and Swords By Alina Oleynik for Armory</li> <li>Machu Picchu By Chanut is Industries</li> <li>Garden By Bharat</li> <li>Mosque by yanti for Great Mosque of Djenne</li> </ul>"},{"location":"Credits/#renaissance-era_1","title":"Renaissance Era","text":"<ul> <li>Museum by zidney</li> <li>Hermitage By Yuri Mamaev</li> <li>The Louvre By roundicons.com</li> <li>Forbidden City By 1516</li> <li>Theatre By b farias</li> <li>Tower of Pisa By Pedro Santos</li> <li>Himeji Castle By Chanut is Industries</li> <li>Windmill By corpus delicti</li> <li>Coffee by SURYANI, ID for Coffee House</li> <li>Taj Mahal By Felipe Alvarado</li> <li>Observatory By Nathan Driskell</li> <li>Opera House By Xinh Studio</li> <li>Chinese traditional tower By 1516 for Porcelain Tower</li> <li>Bank By projecthayat</li> <li>Harbor By Rflor for Seaport</li> <li>Mansion by Freepik for Satrap's Court</li> <li>Bullets By Aldric Rodriguez for Arsenal</li> <li>St. Petersburg By Carpe Diem for Kremlin</li> <li>cottage by Ole Sturm for Ceilidh Hall</li> <li>police station by Andi Nur Abdillah for Constabulary</li> </ul>"},{"location":"Credits/#industrial-era_1","title":"Industrial Era","text":"<ul> <li>Books By Minh Do for Public School</li> <li>Hospital By Adrien Coquet</li> <li>Stock exchange By Pundimon</li> <li>Military By myiconfinder for Military Academy</li> <li>Factory By icon 54</li> <li>police station by Mia Elysia</li> </ul>"},{"location":"Credits/#modern-era_1","title":"Modern Era","text":"<ul> <li>Stadium By Karuna Lalvani</li> <li>Signal Tower By Nociconist for Broadcast Tower</li> <li>Hangar By Rflor for Military Base</li> <li>Eiffel Tower By Felipe Alvarado</li> <li>Statue of Liberty By 1516</li> <li>Microscope By Arafat Uddin for Research Lab</li> <li>Christ the redeemer By Stefan Spieler for Cristo Redentor</li> <li>Neuschwanstein By Vectors Market</li> <li>Big Ben By Ben Davis, RO</li> <li>National Intelligence Agency is a gimp of spy by Adrien Coquet and police station by Firza Alamsyah.</li> </ul>"},{"location":"Credits/#atomic-era_1","title":"Atomic Era","text":"<ul> <li>Chemistry By Creative Stall for Medical Lab</li> <li>Pentagon By Maxim Kulikov</li> <li>Solar panel By Modik for Solar Plant</li> <li>Recycle By Umer Younas, PK for Recycling Center</li> <li>Opera House Sydney By Pham Duy Phuong Hung for Sydney Opera House</li> <li>hydro electric plant By Juicy Fish for Hydro Plant</li> <li>Manhattan Project By corpus delicti, GR</li> <li>Nuclear Plant By Andrejs Kirma</li> <li>Spaceship By Dinosoft Labs for Apollo Program</li> <li>Great Firefall is a gimp of world by Suharsono and firewall by M. Faisal.</li> </ul>"},{"location":"Credits/#information-era_1","title":"Information Era","text":"<ul> <li>CN Tower Toronto By mikicon for CN tower</li> <li>War Shelter by Frepik for Bomb Shelter</li> <li>Hubble Telescope By Scott Lewis for Hubble Space Telescope</li> <li>Build By Michael G Brown for Spaceship Factory</li> <li>United Nations by Imam for United Nations</li> </ul>"},{"location":"Credits/#all-eras_1","title":"All Era's","text":"<ul> <li>Illuminati by emilegraphics for the Utopia Project</li> <li>Christian Church by Andrejs Kirma for Monastery</li> <li>cathedral by Pixel Bazaar for Cathedral</li> <li>Mosque by yanti for Mosque</li> <li>Pagoda by Xinh Studio for Pagoda</li> </ul>"},{"location":"Credits/#social-policies","title":"Social Policies","text":""},{"location":"Credits/#tradition","title":"Tradition","text":"<ul> <li>coat of arms By Martina Krasnayova for Oligarchy</li> <li>Apple By EnQiu for Landed Elite</li> <li>Crown By Alexander Skowalsky for Monarchy</li> <li>Pyramid By Creative Stall for Aristocracy</li> <li>Gavel By Rflor for Legalism</li> </ul>"},{"location":"Credits/#liberty","title":"Liberty","text":"<ul> <li>People By Elizabeth Lopez for Citizenship</li> <li>Assembly By No\u00ebl Rasendrason for Republic</li> <li>People By Gregor Cresnar for Meritocracy</li> <li>People By Wilson Joseph for Representation</li> <li>Torch By Hea Poh Lin for Collective Rule</li> </ul>"},{"location":"Credits/#honor","title":"Honor","text":"<ul> <li>Sword By dsathiyaraj for Military Tradition</li> <li>Castle By Gabriele Malaspina for Military Caste</li> <li>Roman Armor By Parkjisun for Professional Army</li> <li>Shield By Kimmi Studio for Discipline</li> <li>Spartan Helmet By Joni Ramadhan for Warrior Code</li> </ul>"},{"location":"Credits/#piety","title":"Piety","text":"<ul> <li>Protestantism By Evgeni Moryakov for Reformation</li> <li>Temple By N.K.Narasimhan for Theocracy</li> <li>Religion By Ben Avery for Free Religion</li> <li>Flame By Ian Shoobridge for Mandate Of Heaven</li> </ul>"},{"location":"Credits/#patronage","title":"Patronage","text":"<ul> <li>Adapted from Gold by Aneeque Ahmed for Philantropy</li> <li>Ornament by Tommy Suhartomo for Aesthetics</li> <li>Book Gift by Wolf B\u00f6se for Scholasticism</li> <li>agreement by RomanP for Cultural Diplomacy</li> <li>professor by Andrew Doane for Educated Elite</li> </ul>"},{"location":"Credits/#commerce","title":"Commerce","text":"<ul> <li>Trade By Gregor Cresnar for Trade Unions</li> <li>Pie Chart By Adrien Coquet for Protectionism</li> <li>Coins By icon 54 for Mercantilism</li> <li>Sextant By lastspark for Naval Tradition</li> <li>captain by taamir468     and Wheel by Andrejs Kirma for Merchant Navy</li> </ul>"},{"location":"Credits/#rationalism","title":"Rationalism","text":"<ul> <li>Science By Three Six Five for Scientific Revolution</li> <li>Graph By Ben Davis for Secularism</li> <li>Logic By Jenya K for Sovereignty</li> <li>Dialogue By ProSymbols for Free Thought</li> <li>Logic By Arthur Shlain for Humanism</li> </ul>"},{"location":"Credits/#freedom","title":"Freedom","text":"<ul> <li>Social Network By Kirby Wu for Civil Society</li> <li>Gender Equality By corpus delicti for Universal Suffrage</li> <li>Feather By Eduardo Souza for Constitution and Open Policies button</li> <li>Voting By Nikita Kozin for Democracy</li> <li>Mic By Aybige for Free Speech</li> </ul>"},{"location":"Credits/#autocracy","title":"Autocracy","text":"<ul> <li>War By Abdul Karim for Total War</li> <li>Military Grade By Ben Davis for Militarism</li> <li>Military Medal By iconsphere for Fascism</li> <li>Newspaper By Trishul for Populism</li> <li>Riot Police By Dan Hetteix for Police State</li> </ul>"},{"location":"Credits/#order","title":"Order","text":"<ul> <li>Adapted from Plan by Cattaleeya Thongsriphong for Planned Economy</li> <li>Flag by Muhammad Tajudin for Nationalism</li> <li>Communism By Valerio Poltrini for Socialism</li> <li>Hammer and Sickle by Dmitry Baranovskiy for Communism</li> <li>United by Izwar Muis for United Front</li> </ul>"},{"location":"Credits/#technologies","title":"Technologies","text":"<ul> <li>Lightbulb by Davo Sime for fallback image</li> </ul>"},{"location":"Credits/#ancient","title":"Ancient","text":"<ul> <li>Agriculture By OCHA Visual Information Unit</li> <li>Jug By Vladimir Belochkin for Pottery</li> <li>Archery By icon 54</li> <li>Mining By art shop</li> <li>Sailing By Daniela Baptista</li> <li>Sundial By Bonegolem for Calendar</li> <li>Cuneiform By Michael Wohlwend for Writing</li> <li>Trap By Sergey Demushkin for Trapping</li> <li>innovative By Matt Brooks for The Wheel</li> <li>Bricks By Vaibhav Radhakrishnan for Construction</li> <li>Mallet By Ben Avery for Bronze Working</li> </ul>"},{"location":"Credits/#classical","title":"Classical","text":"<ul> <li>Telescope for Optics</li> <li>Horse Riding By Hea Poh Lin for Horseback Riding</li> <li>Abacus By Yo! Baba for Mathematics</li> <li>Arch By Andrejs Kirma for Construction</li> <li>Brain By Tony Gines for Philosophy</li> <li>Coins By Adrien Coquet for Currency</li> <li>Engineering Blueprint By Sachin Modgekar for Engineering</li> <li>Metalworking By Symbolon for Iron Working</li> </ul>"},{"location":"Credits/#medieval","title":"Medieval","text":"<ul> <li>Judaism By Ben Davis for Theology</li> <li>Institution By Luis Prado for Civil Service</li> <li>Compass By Bernar Novalyi</li> <li>Education By Tomas Knopp</li> <li>Casting By Jasmine Rae Friedrich</li> <li>Bar association By Miroslav Kurdov for Guilds</li> <li>Knight By Robert Bjurshagen for Chivalry</li> <li>Camel By Orin Zuu for Camel Archer</li> <li>Machinery By Greenhill</li> <li>Lever By Jakob Ukrop for Physics</li> <li>Sword By Jonathan P Lambert for Steel</li> </ul>"},{"location":"Credits/#renaissance","title":"Renaissance","text":"<ul> <li>Telescope By ProSymbols for Astronomy</li> <li>Sound waves By Makarenko Andrey for Acoustics</li> <li>Banking By Delwar Hossein</li> <li>Printing Press By Mike Wirth</li> <li>Flintlock By Madison Apple for Gunpowder</li> <li>Fossil By Raf Verbraeken for Archaeology</li> <li>Sextant By lastspark for Navigation</li> <li>Architecture By Andrew Doane</li> <li>Money Growth By DesignNex for Economics</li> <li>Metal Block By Creaticca Creative Agency for Metallurgy</li> <li>Chemistry By Creative Stall</li> </ul>"},{"location":"Credits/#industrial","title":"Industrial","text":"<ul> <li>Science By Dinosoft Labs for Scientific Theory</li> <li>Factory By Lil Squid for Industrialization</li> <li>Rifle By Alexander Skowalsky for Rifling</li> <li>Grenade By Dama Adhikara for Military Science</li> <li>Fertilizer By Jae Deasigner</li> <li>Bacteria By Maxim Kulikov for Biology</li> <li>Electricity By Ben Davis</li> <li>Turbines By Leonardo Schneider for Steam Power</li> <li>Dynamite By Simon Martin</li> </ul>"},{"location":"Credits/#modern","title":"Modern","text":"<ul> <li>Gears By Aiden Icons for Replaceable Parts</li> <li>Radio By Arthur Shlain</li> <li>Piston By Proletkult Graphik for Combustion</li> <li>Plastic By Yu luck</li> <li>Microphone By Viktor Vorobyev for Mass Media</li> <li>Flight By Genius Icons</li> <li>Train By Federico Panzano for Railroad</li> <li>Fridge By b farias for Refrigeration</li> <li>telegraph by Luke Anthony Firth for Telegraph*</li> </ul>"},{"location":"Credits/#atomic","title":"Atomic","text":"<ul> <li>Pill By Alex Arseneau for Pharmaceuticals</li> <li>Satellite Dish By Vectors Market for Radar</li> <li>Ecology By ProSymbols</li> <li>Nuclear Reactor By Jeremie Sommet for Nuclear Fission</li> <li>Rocket By kareemov for Rocketry</li> <li>Computer By Shastry for Computers</li> </ul>"},{"location":"Credits/#information","title":"Information","text":"<ul> <li>telecommunications by Wichai Wi for Telcommunications</li> <li>Tactics By Grafix Point for Mobile Tactics</li> <li>Rocket Kusdarti for Advanced Ballistics</li> <li>Satellite By Ben Davis for Satellites</li> <li>Robotic Arm By Karl Gilbert for Robotics</li> <li>Laser by Andrew Doane for Lasers</li> <li>global by Rank Sol for Globilization</li> <li>Atom By Kelsey Armstrong for Particle Physics</li> <li>Nanoparticles By Gyan Lakhwani for Nanotechnology</li> <li>Thermonuclear fusion by Olena Panasovska, UA for Nuclear Fusion</li> <li>Electronics By Cuby Design</li> <li>Radar By CINDYFLA, ID for Stealth</li> </ul>"},{"location":"Credits/#future","title":"Future","text":"<ul> <li>Information Technology By Vectors Markeet for Future Tech</li> </ul>"},{"location":"Credits/#terrain","title":"Terrain","text":"<ul> <li>Hills By Juraj Sedl\u00e1k</li> <li>Mountains By icon 54</li> <li>Forest by Milinda Courey for Jungle</li> <li>Forest By Lance B</li> <li>Palm Tree By Tatiana for Oasis</li> <li>Water By Kozan for Marsh</li> <li>Harvest By Made for Flood plains</li> <li>Puddle By Bakunetsu Kaito for Lakes</li> <li>Island By Chanut is Industries for Atoll</li> <li>Iceberg By Jaime Carrion for Ice</li> </ul>"},{"location":"Credits/#nations","title":"Nations","text":"<ul> <li>Eye of Horus By Lilit Kalachyan for Egypt</li> <li>Russia By Eugen Belyakoff</li> <li>Dragon Head By Ravignir for China</li> <li>Lamassu By Jason Dilworth for Babylon</li> <li>Omega By icon 54 for Greece</li> <li>Shield By Nathan Driskell for America</li> <li>Fleaur de Lis By Jessika Gadoury for France</li> <li>Crown By Peter van Driel for England</li> <li>Wreath by VectorBakery or Roman</li> <li>Iron Cross By Souvik Maity for Germany</li> <li>Star and Crecent for Arabia</li> <li>Family Crest Komon by sahua d for Japan</li> <li>Ashika Chakra by sahua d for India</li> <li>Variation on crescent moon by Estu Suhartono for The Ottomans</li> <li>Korea by CJS for Korea</li> <li>Two Sword Scimitars by Those Icons for Persia</li> <li>Swirl by IronSV for Polynesia</li> <li>Dharmachakra by Parkjisun for Siam</li> <li>Inca by Ravignir for Inca</li> <li>Sun symbol black by Eddo for The Huns</li> <li>Lion by Nikki Rodriguez for The Netherlands</li> <li>Three Crowns by Daniel Falk for Sweden</li> <li>Flag of Austria by Olena Panasovska, UA for Austria. The original work has been modified.</li> <li>Elephant by Hea Poh Lin for Carthage. The original work has been modified.</li> <li>Orthodox Cross by Avana Vana for Byzantium</li> <li>Iroquois by Ravignir for Iroquois</li> <li>Songhai by Ravignir for Songhai</li> <li>Celtic Knot by Ervin Bolat for the Celts</li> <li>Ethiopian Icon created in Gimp by Unciv team from the following:<ul> <li>Lion by IronSV</li> <li>royal crown by Vectors Market</li> <li>Spear by Firza Alamsyah</li> <li>pennant by Sara Jeffries</li> </ul> </li> <li>Maya civilization by Olena Panasovska for The Maya</li> <li>Aztec icon by K\u0101ne, on Unciv Discord server</li> <li>Questionmark by YURR.studio for Random nation indicator</li> <li>View by Adrien Coquet for Spectator</li> </ul>"},{"location":"Credits/#promotions","title":"Promotions","text":"<ul> <li>Sight By Jejen Juliansyah Nur Agung for Scouting</li> <li>skill bow rain arrow by Maxicons for Barrage</li> <li>Bomb By Angelo Troiano for Bombardment</li> <li>Private E2 By Yeong Rong Kim for Shock</li> <li>Private First Class By Yeong Rong Kim for Drill</li> <li>Medic By Yohann Berger for Medic</li> <li>City By iconcheese for Siege</li> <li>Skull and Crossbones By Anton Outkine for Coastal Raider</li> <li>Spear By Deemak Daksina for Formation</li> <li>Wall By Graphic Tigers for Volley</li> <li>Lightning By Mooms for Blitz</li> <li>Move By Sandra for Mobility</li> <li>accuracy By vigtographics for Targeting</li> <li>location by Humantech for Accuracy</li> <li>Plane By Tran Minh Villageois for Interception / Domain Air</li> <li>Hammer by Thengakola for Air Repair</li> <li>Hook By Yeong Rong Kim for Boarding Party</li> <li>Leaf By Paul Verhulst for Indirect Fire</li> <li>Move By Muneer A.Safiah for Logistics</li> <li>Evasion By Anna Sophie for Evasion</li> <li>Interrupt by Stephen Plaster for Ambush</li> <li>Submarine by Lloyd Humphreys for Wolfpack</li> <li>Axe by Brian Oppenlander for Woodsman</li> <li>Competition by luca fruzza</li> <li>Icon for Flight Deck is made by JackRainy</li> <li>Icon for Armor Plating is made by JackRainy</li> <li>Slingshot by James Keuning for Slinger Withdraw</li> <li>Anchor by Gregor Cresnar for Amphibious / Domain Water</li> <li>survival knife by b faris for Survivalism</li> <li>Shamrock By P Thanga Vignesh for Pictish Courage</li> <li>home sweet home By Silviu Ojog for Home Sweet Home</li> <li>Star by Trent Kuhn for Dogfighting</li> </ul>"},{"location":"Credits/#religions","title":"Religions","text":"<ul> <li>Lightning Bolt by sian huxtable for Pantheon</li> <li>Christianity by Public Domain Nouns for Christianity</li> <li>Islam by Muhammed Riza for Islam</li> <li>taoism by parkjisun for Taosim</li> <li>Buddhism by Julio Yanes for Buddhism</li> <li>Hinduism by Mugda Damle for Hinduism</li> <li>Confucianism by Dabid J. Pascual for Confucianism</li> <li>Judaism by Dabid J. Pascual for Judaism</li> <li>Shinto by Dabid J. Pascual for Shinto</li> <li>Sikhism by Dabid J. Pascual for Sikhism</li> <li>Tengrism by Dabid J. Pascual for Tengriism</li> <li>Zoroastrianism by Dabid J. Pascual for Zoroastrianism</li> <li>praying by parkjisun for Religion (Civilopedia concept entry)</li> <li>praying by Gan Khoon Lay for Follower</li> <li>Hero by Andrew J. Young for Founder</li> <li>yell by Adrien Coquet for Enhancer</li> </ul>"},{"location":"Credits/#others","title":"Others","text":"<ul> <li>Circle By Aybige - Circle used to compose icons on the fly</li> <li>Link By Brad for Civilopedia links and unit escort formation. The original work has been slightly modified.</li> <li>Arrow By Joe Mortell for movement</li> <li>Swap By iconomania for swapping units</li> <li>Road By G\u00e1bor Istv\u00e1n Karaba for connect road automation</li> <li>Connection By Travis Avery</li> <li>Skull By Vladimir Belochkin for disbanding units</li> <li>Crosshair By Bakunetsu Kaito for selecting enemies to attack</li> <li>City By Felix Westphal</li> <li>Fire By Lloyd Humphreys for \"city being razed\" icon</li> <li>Sleep By Saeful Muslim for unit \"sleep\" action and status</li> <li>Skip by Freq Wazza for Skip icon</li> <li>Banner By Emir Palavan for embarked units</li> <li>Arrow By uzeir syarief for moving between idle units, expanders, etc.</li> <li>Exchange By Mike Rowe for switching tiles between cities</li> <li>Revolution By HeadsOfBirds for cities in resistance - world screen, city screen, city overview</li> <li>Viking Hat By my name is mud for pillaging improvements</li> <li>Aim By Kaviashri for ranged strength</li> <li>Capitol By Loren Klein for City-States</li> <li>Aircraft By Tom Fricker for aircraft icon in city button</li> <li>radar scan By icon 54 for Range</li> <li>short range radar by Vectors Point for Intercept range</li> <li>Puppet by vegeta1k95 based on Puppet by Ben Davis, for puppeted cities</li> <li>City By Muhajir ila Robbi in the Icon center</li> <li>Lock by Vadim Solomakhin for locked tiles</li> <li>Hourglass by I Create Stuff for the 'Turn' icon</li> <li>Shield by Gregor Cresnar for Religious Strength</li> <li>skill sword flame by Maxicons) for Remove Heresy</li> <li>Pencil by Muhamad Aldi Maulana for Enter Text Prompt Button / Pencil</li> <li>Parchment by hans draiman for Cultured City-States</li> <li>connection by Popular for Mercantile City-States</li> <li>crossed sword by ProSymbols for Militaristic City-States</li> <li>ship helm by Vectors Market for Maritime City-States</li> <li>Magnifying Glass by John Caserta for Mod filter</li> <li>tick by Adrien Coquet on Nation picker</li> <li>people by Wilson Joseph as base for Civilopedia category Nations</li> <li>Mountains  by Andrew J. Young as base for Civilopedia category Terrains / Domain Land</li> <li>Civilopedia category UnitTypes icon done by SomeTroglodyte from sources cited for Interception, Cavalry and Longbowman</li> <li>File:Maya.svg for Mayan numerals</li> <li>East side of stela C, Quirigua for Mayan calendar symbols</li> <li>Footprints by Abdul Wahhab for movement overlay toggle, slightly modified. Currently unused.</li> <li>Arrows.svg by Intralexical (@will-ca), CC0.</li> <li>favor by MICHAEL G BROWN for WLTK marker on City Overview</li> <li>WLTKD by vegeta1k95 based on favor by MICHAEL G BROWN for WLTKD status icon</li> <li>Party by Adrien Coquet for WLTK header on City Overview</li> <li>Party by Lars Meiertoberens as additional WLKT decoration</li> <li>spy by Vectorstall for Spy and the Espionage button</li> <li>secret agency by Martina Han\u017elov\u00e1 - Espionage tutorial</li> <li>turn right by Alice Design for Resource Overview</li> <li>Tyrannosaurus Rex by Amethyst Studio for Civilopedia Eras header</li> <li>Realistic easter day eggs with curvy lines and dots by freepik for easter eggs</li> <li>Eggs Easter Scrapbook by Claudette Gallant for easter eggs</li> <li>Halloween pumpkin by freepik for easter eggs</li> <li>Vector set of different sweets by macrovector for easter eggs</li> <li>Part of Merry christmas design elements set by vikayatskina for easter eggs</li> <li>Part of 3d winter holidays background rawpixel.com for easter eggs</li> <li>Stack of dollar bills with bow by katemangostar for easter eggs</li> <li>present boxes collection by nikapeshkov for easter eggs</li> <li>Reindeer in santa hat peeping out by katemangostar for easter eggs</li> <li>Positive santa ringing bell by katemangostar for easter eggs</li> <li>Snowman wearing santa hat scarf and mittens by katemangostar for easter eggs</li> <li>AirSweep by Creative Stall for Air Sweep icon</li> <li>Timer created by Gregor Cresnar Premium - Flaticon - for Game speeds civilopedia category</li> <li>Political Science created by Hilmy Abiyyu A. - Flaticon - for Global politics overview screen</li> <li>Question created by Aneeque Ahmed for Question Icon</li> <li>Trade created by Smashicons for Conduct Trade Mission</li> <li>Nothing created by Freepik for Nothing construction process</li> <li>Icon for Unique created by vegeta1k95</li> <li>[Transform] created by letstalkaboutdune for the Transform unit action</li> <li>Swords created by Muhajir ila Robbi for Blockaded tile marker</li> <li>Keyboard by Twenty Foo Studio for Options Keys</li> <li>charts by Srinivas Agra (gimped to appear bolder) for the Charts page</li> <li>framed image by Jose Dean for Victory Illustrations page</li> <li>down by Cengiz SARI for Show unit destination</li> <li>Cat by Josi for Politics overview diagram legend</li> <li>Bell by Lyhn, transparency modified, for Notifications (overview, unhide button)</li> <li>Galileo Donatello for the \"Meet another civilization\" tutorial: Public domain</li> <li>ServerRack by Chad Remsing</li> <li>RobotArm by Faizal khusein</li> <li>RobotHeadSquare by Ahmad Arzaha</li> <li>RobotHeadRect by suib icon</li> <li>Bobot by reallybasicname in the Discord</li> <li>DollarSign by Ahmad Arzaha</li> </ul>"},{"location":"Credits/#main-menu","title":"Main menu","text":"<ul> <li>Lightning by Rohith M S for Quickstart</li> <li>Loading by Universal Icons for Load Game</li> <li>New by Alice Design for New Game</li> <li>Go back by Salvia Santos for Resume and Undo button</li> <li>Multiplayer by Roy Charles</li> <li>Options By Thengakola</li> <li>Package by shashank singh for Mods</li> <li>scenario planning by nicolas for Scenarios</li> </ul>"},{"location":"Credits/#worldscreen","title":"WorldScreen","text":"<ul> <li>Reduce by Freepik</li> <li>Increase by Freepik</li> <li>Corner by Muhamad Ulum</li> </ul>"},{"location":"Credits/#sound-credits","title":"Sound credits","text":"<p>Sounds are from FreeSound.org unless otherwise noted and are either Creative Commons or Public Domain unless otherwise noted</p> <ul> <li>Soft two-fingered snap By EathanMarkson as 'click' for most clicks</li> <li>Pencil1 By stijn as 'paper' for opening and closing the tech picker</li> <li>SawInOut01 By kingof_thelab for construction picking?</li> <li>Chain Snare #1 By lovesbody as 'fortify'</li> <li>Level up By Marregheriti as 'upgrade' for upgrading units</li> <li>levelup By Seidhepriest as 'chimes' for special actions (free tech, build city, hurry wonder etc.)</li> <li>Coin By TheDJoe93 as 'coin' for purchasing tiles and constructions</li> <li>fast simple chop 1 By dave.dev as 'whoosh' for moving units around, also in edited form to produce the 'swap units' sound.</li> <li>Military kick By Dodgy C as 'promote' for unit promotions</li> <li>Tank reload By KieranKeegan as 'setup' for siege unit setup</li> <li>Scribble_short By waldram as 'policy' for adopting policies</li> <li>Hit Impact by Mrguff as 'throw' for catapult &amp; trebuchet attacks</li> <li>Arrow Impact by Twisted Euphoria on Pixabay as 'arrow' for arrow attacks (Pixabay License)</li> <li>Crossbow Firing by GameWithBepis on Pixabay as 'crossbow' for crossbow attacks (Pixabay License)</li> <li>Metal hit slide by orginaljun as 'nonmetalhit' for pre-metal melee sounds</li> <li>wpn 1 generic By SlavicMagic on Pixabay as 'metalhit' for metal melee sounds (Pixabay License)</li> <li>Horse's whinny By Kubuzz as 'horse' for cavalry attack sounds</li> <li>machine gun 001 - loop By pgi as 'machinegun' for machine gun attack sound</li> <li>uzzi_full_single By Deganoth as 'shot' for bullet attacks</li> <li>Grenade Launcher 2 By Daniel Simon as city bombard sound (CC Attribution 3.0 license)</li> <li>Woosh by Mark DiAngelo as 'slider' sound (CC Attribution 3.0 license)</li> <li>Large wooden wagon by Craig Smith as 'connect road' sound</li> <li>Tornado-Siren-II by Delilah as part of 'nuke' sound (CC Attribution 3.0 license)</li> <li>Explosion-Ultra-Bass by Mark DiAngelo as part of 'nuke' sound (CC Attribution 3.0 license)</li> <li>Short Choir by Breviceps as 'choir' for free great person pick</li> <li>Death Robot! Robotic scream by vultraz168 for Giant Death Robot Attack (CC0 1.0 Universal license)</li> <li>ceremonial cannon fire by DylanSmithSound for cannon and shipCannonVolley</li> <li>artillery fire by Tomashevsky for artillery</li> <li>20mm cannons by Piotr123 for ship guns</li> <li>\"bombing\" is made by the Unciv team using Audacity from<ul> <li>lancaster bomber by confusion_music - aircraft</li> <li>Artillery Explosion (Close) (Mixed) by EFlexMusic - impact</li> <li>SFX Hit drop/bomb effect 5 by old_waveplay - bass</li> </ul> </li> <li>\"jetgun\" for Jet Fighter attack is made by the Unciv team using Audacity from<ul> <li>Fighter Jet Aircraft Fly by (synthesised) by Headphaze</li> <li>Machine Gun 001 - triple shot by pgi</li> </ul> </li> <li>Excerpt from Tanks Shooting by qubodup for tankshot and shipCannonVolley</li> <li>\"torpedo\" is made by the Unciv team using Audacity from<ul> <li>Torpedo launch underwater by jobro</li> <li>Artillery Explosion (Close) (Mixed) by EFlexMusic</li> </ul> </li> <li>elephant 44 by y89312 for Naruesan's Elephant sound</li> <li>Excerpt from Missile Strike by BaDoink for guided missile</li> <li>Excerpt from FireBurning_v2.wav by pcaeldries for 'remove heresy' action of inquisitor (License)</li> <li>Up Chime 2 by FoolBoyMedia for notifications</li> <li>dingaling by morrisjm (based on Calling_Bell_02.wav by RSilveira_88) for notifications</li> <li>City ambience sounds made by Unciv Team using Audacity from CC0 sounds and<ul> <li>Street Musician Playing Renaissance Melody on Glockenspiel by MC5 for Renaissance city sound</li> <li>Ambience, Machine Factory by InspectorJ for Industrial city sound</li> <li>Rock_Hammer_Chisel_01 by dheming for Ancient city sound</li> <li>Future City ambience by bolkmar for Future city sound</li> <li>Jingle_Achievement by LittleRobotSoundFactory for We Love The King sound</li> </ul> </li> </ul>"},{"location":"Credits/#music","title":"Music","text":"<p>The following music is from https://filmmusic.io \"Thatched Villagers\" by Kevin MacLeod (https://incompetech.com)</p>"},{"location":"Credits/#trailer-audio","title":"Trailer audio","text":"<p>The following audio is from https://pixabay.com/ Pixabay License -   Beyond New Horizons - Free Epic Viking Medieval Soundtrack by GioeleFazzeri for background music -   Beep 6 by Eponn for beep in Cross-Platform Play section -   Cinematic Boom by Rizzard for final boom -   Cymbal Swell 2 by rubberduckie for cymbal swells -   hit of orchestral cymbals and bass drum by Selector for intro crash</p>"},{"location":"Credits/#visual-effects","title":"Visual effects","text":"<p>The fireworks on the City Screen of a WLTK-celebrating city are loosely based on the Fireworks.p file included in Particle Park. All differences and edits done by the Unciv team. License quoted: <pre><code>Particle Park Fireworks License\n\n------------------------------------------------------------------------------------------\n\nCopyright \u00a9 2019 Raymond Buckley\n\nParticle Park Fireworks can be used under the Creative Commons Attribution 4.0 International license.\n\nSee a human readable version here: https://creativecommons.org/licenses/by/4.0/\n\n------------------------------------------------------------------------------------------\n</code></pre></p>"},{"location":"Guiding-Principles/","title":"Guiding Principles","text":""},{"location":"Guiding-Principles/#the-ai-plays-to-win","title":"The AI plays to win","text":"<p>In a perfect world, the AI would pass the \"Turing test\" of gameplay - you would't be able to tell if you're playing against a human or AI.</p> <p>Examples:</p> <ul> <li>No \"what would you offer me for this\"</li> <li>AI will choose to attack you if your military is weak (WILL kick you when you're down)</li> </ul> <p>There is a fine line here between \"exploitable\" and \"no fun\" regarding trade - regular players may refuse any trade you offer them on principle. We don't want that from the AI, which leaves us slightly open to exploits, but that's a trade-off we make knowingly.</p>"},{"location":"Guiding-Principles/#modding-philosophy-minimal-objects-maximum-interactions","title":"Modding philosophy - minimal objects, maximum interactions","text":"<p>As a new modder it's easy to get lost in the sheer number of uniques.</p> <p>Our aim is to minimize the number of uniques as much as possible, but enable \"emergent modding\" by allowing combinations.</p> <p>Examples:</p> <ul> <li>Parameters in uniques &gt; multiple uniques</li> <li>Conditions should be Conditionals, so they can be applied to all uniques</li> <li>Triggered uniques and unique triggers - all combinations</li> <li>Unit Action modifiers, rather than special attributes for specific unit actions</li> </ul>"},{"location":"Guiding-Principles/#crash-early-crash-often","title":"Crash early, crash often","text":"<p>A crash stacktrace is halfway to a solution - a game save which reliably produces it is 90% there.</p> <p>Whenever an unexpected situation occurs - the game has reached an incorrect state - we should crash, to allow the problem to be fixed as soon as possible.</p> <p>Persisting with an incorrect state makes the eventual resulting problems further from the cause, and complicates debugging.</p>"},{"location":"Privacy-Policy/","title":"Privacy Policy","text":""},{"location":"Privacy-Policy/#we-dont-store-personal-information","title":"We don't store personal information","text":"<p>At all, in any way.</p>"},{"location":"Privacy-Policy/#we-do-store-your-multiplayer-games","title":"We do store your Multiplayer games","text":"<p>If you want to use an alternative server backend, you can set your server URL in the Options menu</p>"},{"location":"Developers/Building-Locally/","title":"Building Locally","text":"<p>By the end of this guide, you will have Unciv running locally from code, so you can make changes and test them locally.</p>"},{"location":"Developers/Building-Locally/#with-android-studio","title":"With Android Studio","text":"<ul> <li>Install Android Studio - it's free and awesome! Be aware that it's a long download!</li> <li>Install Git, it's the way for us to work together on this project. UI is optional, Android Studio has good Git tools built in :)</li> <li>Getting the code<ul> <li>Create a Github account, if you don't already have one</li> <li>Fork the repo - this will create a \"copy\" of the code on your account, at <code>https://github.com/&lt;YourUsername&gt;/Unciv</code></li> </ul> </li> <li>Load the project in Android Studio<ul> <li>File -&gt; New -&gt; Project from Version Control -&gt; GitHub</li> <li>Enter your GitHub username and password</li> <li>Select the repository and hit clone - The GitHub repo will be created as a new project in Android Studio.</li> </ul> </li> <li>Gradle will attempt the initial sync. If this is your first time with Android Studio, this may require you to accept the Android Build-tools licenses, which works differently on every device, so search for your OS-specific solution.<ul> <li>A new install may not be able to do the initial sync - this comes in the form of <code>Unable to find method ''void org.apache.commons.compress.archivers.zip.ZipFile.&lt;init&gt;(java.nio.channels.SeekableByteChannel)''</code> errors when you try to sync. If you have this problem go into File &gt; Settings &gt; Languages &amp; Frameworks &gt; Android SDK<ul> <li>Click \"SDK Platforms\"</li> <li>Click \"Android 16.0 (\"Baklava\")\"      (Optionally, you can save some space by selecting 'Show Package Details' and choosing the Platform SDK only, without Sources or system Images)</li> <li>Click \"SDK Tools\"</li> <li>Select \"Show Package Details\" in the bottom right</li> <li>Choose version 35.0.0 under \"Android SDK Build-Tools\"   </li> <li>Click \"Apply\"</li> <li>Restart Android Studio</li> </ul> </li> </ul> </li> <li>Have patience and let the initial Gradle sync finish. The subsequent ones won't take as long. Watch the status bar or the \"Build\" toolpane. </li> <li>If everything went well, you will now have three \"Run configurations\" (look for green in the top bar): \"android\", \"Desktop\" and \"Run unit tests\".<ul> <li>If the \"android\" one is missing, it's likely your Android SDK setup did not set the ANDROID_HOME environment variable. Do so, restart Studio and re-sync Gradle (the button with the elephant and arrow in the top bar).</li> <li>If the \"Desktop\" one is missing, here's how to create one manually:<ul> <li>Select Run &gt; Edit configurations (from main menu or the configurations dropdown)</li> <li>Click \"+\" to add a new configuration</li> <li>Choose \"Application\"</li> <li>Give the configuration a name, we recommend \"Desktop\"</li> <li>Set the module classpath (the box to the right of the Java selection) to <code>Unciv.desktop.main</code> (<code>Unciv.desktop</code> for Bumblebee or below), main class to <code>com.unciv.app.desktop.DesktopLauncher</code> and <code>$ProjectFileDir$/android/assets</code> as the Working directory, OK to close the window<ul> <li>It may be useful to set some VM options - activate the field in the run config editor with Alt-V or via the Modify Options menu, then add <code>-Xmx4096m -Xms256m -XX:MaxMetaspaceSize=256m</code> to allow a debugged game a little more memory. Or, use the <code>-DnoLog=</code> or <code>-DonlyLog=</code> options to control console logging. See the Log.kt comments for details.</li> <li>If you get a <code>../../docs/uniques.md (No such file or directory)</code> error that means you forgot to set the working directory! </li> </ul> </li> </ul> </li> <li>If the \"Run unit tests\" is missing - look for the top-level \"tests\" folder, right-klick -&gt; Modify Run Configuration...</li> </ul> </li> <li>Select the Desktop configuration (or however you chose to name it) and click the green arrow button to run! Or you can use the next button -the green critter with six legs and two feelers - to start debugging.</li> <li>A few Android Studio settings that are recommended:<ul> <li>Go to Settings &gt; Version Control &gt; Commit &gt; Advanced Commit and turn off 'Analyze code'</li> <li>On the same page, we recommend turning off \"Use non-modal commit interface\". This puts the \"Local Changes and \"Console\" Tabs back into the Git toolpane (and the Shelf once you have shelved diffs). These can be hard to find otherwise - feel free to ignore if you don't think you need them.</li> <li>Settings &gt; Editor &gt; Code Style &gt; Kotlin &gt; Tabs and Indents &gt; Continuation Indent: 4   </li> <li>Settings &gt; Editor &gt; General &gt; On Save &gt; Uncheck Remove trailing spaces on: [...] to prevent it from removing necessary trailing whitespace in template.properties for translation files   </li> <li>Right-click the <code>android/assets/SaveFiles</code> folder once you have one, \"Mark directory as\" &gt; Excluded</li> <li>If you download mods do the same for the <code>android/assets/mods</code> folder and any other files you may create while testing that do not belong in the public project.</li> <li>This disables indexing for performance.</li> </ul> </li> </ul> <p>Unciv uses Gradle to specify dependencies and how to run. In the background, the Gradle gnomes will be off fetching the packages (a one-time effort) and, once that's done, will build the project!</p> <p>Unciv uses Gradle 8.11.1 and the Android Gradle Plugin 8.9.1. Can check in File &gt; Project Structure &gt; Project</p> <p>Note: advanced build commands (as described in the next paragraph), specifically <code>gradlew desktop:dist</code> to build a jar, run just fine in Android Studio's terminal (Alt+F12), with most dependencies already taken care of.</p>"},{"location":"Developers/Building-Locally/#without-android-studio","title":"Without Android Studio","text":"<ul> <li>Ensure you have JDK 11 or higher installed</li> <li>Clone the project (see above initial steps)</li> <li>Open a terminal in the Unciv folder and run the following commands</li> </ul>"},{"location":"Developers/Building-Locally/#windows-cmd","title":"Windows (CMD)","text":"<ul> <li>Running: <code>gradlew desktop:run</code></li> <li>Building: <code>gradlew desktop:dist</code></li> </ul>"},{"location":"Developers/Building-Locally/#linux-macos-windows-powershell","title":"Linux / macOS / Windows (PowerShell)","text":"<ul> <li>Running: <code>./gradlew desktop:run</code></li> <li>Building: <code>./gradlew desktop:dist</code></li> </ul> <p>If the terminal returns <code>Permission denied</code> or <code>Command not found</code> on Mac/Linux, run <code>chmod +x ./gradlew</code> first. This is a one-time procedure.</p> <p>If you get an error that Android SDK folder wasn't found, install it by running:</p> <p><code>sudo apt update &amp;&amp; sudo apt install android-sdk</code> (Debian, Ubuntu, Mint etc.)</p> <p>Then, set the SDK location in the <code>local.properties</code> file by adding:</p> <p><code>sdk.dir = /path/to/android/sdk</code> - for example, <code>/usr/lib/android-sdk</code></p> <p>If during initial launch you get an error that the JDK version is wrong, install the JDK from here.</p> <p>Note: Gradle may take up to several minutes to download files After building, the output .JAR file should be in <code>/desktop/build/libs/Unciv.jar</code></p> <p>For actual development, you'll probably need to download Android Studio and build it yourself - see above :)</p>"},{"location":"Developers/Building-Locally/#debugging-on-android","title":"Debugging on Android","text":"<p>Sometimes, checking things out on the desktop version is not enough and you need to debug Unciv running on an Android device. For an introduction, see Testing android builds.</p>"},{"location":"Developers/Building-Locally/#next-steps","title":"Next steps","text":"<p>Congratulations! Unciv should now be running on your computer! Now we can start changing some code, and later we'll see how your changes make it into the main repository!</p> <p>Now would be a good time to get to know the project in general at the Project Structure overview!</p>"},{"location":"Developers/Building-Locally/#unit-tests","title":"Unit Tests","text":"<p>You can (and in some cases should) run and even debug the unit tests locally.</p> <ul> <li>In Android Studio, Run &gt; Edit configurations.<ul> <li>Click \"+\" to add a new configuration</li> <li>Choose \"Gradle\" and name the config, e.g. \"Unit Tests\"</li> <li>Under \"Gradle Project\", choose \"Unciv\" from the dropdown (or type it), set \"Tasks\" to <code>:tests:test</code> and \"Arguments\" to <code>--tests \"com.unciv.*\"</code>, OK to close the window.</li> </ul> </li> <li>Select the \"Unit Tests\" configuration and click the green arrow button to run! Or start a debug session as above.</li> </ul>"},{"location":"Developers/Building-Locally/#linting","title":"Linting","text":"<p>Detekt checks for code smells and other linting issues. To generate Detekt reports:</p> <ul> <li>Download detekt-cli (the zip file) and unzip it</li> <li>Open a terminal in the Unciv root directory and run one of the following commands to generate the report. NOTE: If you're using Windows, replace <code>detekt-cli</code> with <code>detekt-cli.bat</code>.<ul> <li>For warnings: <code>PATH/TO/DETEKT/detekt-cli --parallel --report html:detekt/reports.html --config .github/workflows/detekt_config/detekt-warnings.yml</code></li> <li>For errors: <code>PATH/TO/DETEKT/detekt-cli --parallel --report html:detekt/reports.html --config .github/workflows/detekt_config/detekt-errors.yml</code></li> </ul> </li> <li>The report will be generated in <code>detekt/reports.html</code></li> </ul>"},{"location":"Developers/Building-Locally/#cleaning-up-obsolete-files","title":"Cleaning up obsolete files","text":"<p>From time to time, Unciv bumps the versions of major tools - mainly Gradle, the Android SDK Platform, and the Android SDK Build-Tools. The new versions and support files are automatically downloaded for you, but old versions are not cleaned up automatically, nor are intermediate build files specific to Gradle versions. This may leave a few gigabytes of dead files on your system. If these bother you, you can clean up as follows:</p> <ul> <li>Remove obsolete Android SDK Platform and Build-Tools versions from SDK manager (remember all projects share these, so if you have other projects, keep their requirements too).</li> <li>With Android Studio closed (on Windows, you'll have to manually kill leftover Gradle daemons too):<ul> <li>Delete subfolders named after obsolete Gradle versions from Unciv/.gradle, ~/.gradle/caches (%HOME%.gradle\\caches on Windows) and ~/.gradle/daemon</li> <li>For a thorough but more costly cleanup, clean out ~/.gradle/caches entirely except for the tag files.   This will force the next gradle sync to re-download a large amount of support files, but this way you will also clean out remnants of superseded support libraries for kotlin, Gdx and so on.</li> </ul> </li> </ul> <p>Additionally, git prioritizes safety of your changes over efficiency to the extreme, leading to some bloat.  <code>git gc</code> is automatically done for you, but sparingly, and running it manually won't hurt. For a more thorough cleanup, run <code>git gc --prune=now --aggressive</code> sporadically from Studio's terminal (or any shell within Unicv's project folder), making sure to clean up all your obsolete branches first, and that all remaining branches are in sync with the online branches they're backing or based on master if they're local only.</p>"},{"location":"Developers/Building-Locally/#uncivserver","title":"UncivServer","text":"<p>The simple multiplayer host included in the sources can be set up to debug or run analogously to the main game: -   In Android Studio, Run &gt; Edit configurations.     -   Click \"+\" to add a new configuration     -   Choose \"Application\" and name the config, e.g. \"UncivServer\"     -   Set the module to <code>Unciv.server.main</code> (<code>Unciv.server</code> for Studio versions Bumblebee or below), main class to <code>com.unciv.app.server.UncivServer</code> and <code>&lt;repo_folder&gt;/android/assets/</code> as the Working directory, OK to close the window. -   Select the UncivServer configuration and click the green arrow button to run! Or start a debug session as above.</p> <p>To build a jar file, refer to Without Android Studio and replace 'desktop' with 'server'. That is, run <code>./gradlew server:dist</code> and when it's done look for /server/build/libs/UncivServer.jar</p>"},{"location":"Developers/Coding-standards/","title":"Coding standards","text":"<p>As an open-source project, there will be a lot of eyes on our code.</p> <p>The main purpose of having a coding standard is for the code to be as immediately readable as possible to as many potential contributors, and hence most of it focuses on defaulting to coding structures that exist in other similar languages (Java, C#) when possible.</p>"},{"location":"Developers/Coding-standards/#dont-use-let-and","title":"Don't use <code>.let{}</code> and <code>?:</code>","text":"<p>Kotlin is made greater for being strict with nullability. Don't let this fact confuse people new to it. These can be simply replaced by <code>if(x!=null)</code> which is much more readable. They all probably compile to the same bytecode anyway, so when in doubt - readability.</p>"},{"location":"Developers/Coding-standards/#foritem-in-list-and-not-listforeach","title":"<code>for(item in list)</code> and not <code>list.forEach{}</code>","text":"<p>For loops go waaaay back, forEach doesn't. As an added bonus, I'm pretty sure that because forEach accepts a function parameter, then when debugging it won't automatically step into these lines, unlike for.</p>"},{"location":"Developers/Coding-standards/#avoid-premature-abstraction","title":"Avoid premature abstraction","text":"<p>There's no need to create an interface if there is only one implementation of that interface. Doing so obfuscates the actual code that's running and increases the Time To Relevant Code. If abstraction becomes necessary later, we can always do it later.</p>"},{"location":"Developers/From-code-to-deployment/","title":"From code to deployment","text":"<p>So, your code works! You've solved all the bugs and now you just need to get it out to everyone!</p> <p>So, how does THAT work?</p> <p>The process has two major parts, one is \"Getting your code in the main repository\" and the other is \"Deploying versions\" - as a developer, you'll be taking an active part in the first process, but the second process is on me =)</p>"},{"location":"Developers/From-code-to-deployment/#getting-your-code-in-the-main-repo","title":"Getting your code in the main repo","text":"<ul> <li>First off, push your changes with Git to your own branch at https://github.com/YourUsername/Unciv.git. I hope you've been doing this during development too, but that's none of my business *sips tea*</li> <li>Issue a pull request from https://github.com/YourUsername/Unciv - from the Pull Requests is the simplest</li> <li>The Travis build will check that your proposed change builds properly and passes all tests</li> <li>I'll go over your pull request and will ask questions and request changes - this is not only for code quality and standard, it's mostly so you can learn how the repo works for the next change you make =)</li> <li>When everything looks good, I'll merge your code in and it'll enter the next release!</li> </ul>"},{"location":"Developers/From-code-to-deployment/#deploying-versions","title":"Deploying versions","text":"<p>When I'm ready to release a new version I:</p> <ul> <li>Comment \"prepare version\" in one of the open PRs tagged as 'mergeable translation' to trigger the translation branch creation.</li> <li>This also bumps the versions in the buildConfig.kt file, and generates a starting version summary in changelog.md.</li> <li>Merge the PR and delete the branch (so next version branch starts fresh)</li> <li>From my workstation - pull the latest changes and run the translation generation</li> <li>Edits to the autogenerated version notes in changelog.md to make them less than 500 chars (needed for Google Play) and more user-readable</li> <li>Add a tag to the commit of the version. When the Github action sees that we've added a tag, it will run a build, and this time (because of the configuration we put in the yml file file), it will:<ul> <li>Pack a .jar file, which will work for every operating system with Java</li> <li>Use Linux and Windows JDKs to create standalone zips for 32 and 64 bit systems, because we can't rely on the fact that users will have a JRE</li> <li>Download Butler and use it to push the new versions to the itch.io page</li> <li>Read the changelog.md file to get the changes for the latest version</li> <li>Upload all of these files to a new release on Github, with the release notes, which will get added to the Releases page</li> <li>Send an announcement on the Discord server of the version release and release notes via webhook</li> <li>Pack, Sign, and Upload a new APK to the Google Play Console at 10% rollout</li> </ul> </li> <li>The F-Droid bot checks periodically if we added a new tag. When it recognizes that we did, it will update the yaml file here<ul> <li>When the bot next runs and sees that there's a version it doesn't have a release for, it will attempt to build the new release. The log of the build will be added here (search for Unciv, there's a log link like this: <code>https://monitor.f-droid.org/builds/log/com.unciv.app/&lt;appCodeNumber&gt;</code>), and the new release will eventually be available here</li> </ul> </li> </ul>"},{"location":"Developers/From-code-to-deployment/#deploying-a-release-patch","title":"Deploying a release patch","text":"<p>In case a fix is urgent because a bug in the last release severely affects a large number of players, any Collaborator (next step up from Contributor) is able to trigger a patch release.</p> <ul> <li>In the PR that fixes the game-breaking bug, instead of merging, add a comment with \"release patch\" as body.</li> <li>Wait for the workflow (UncivBot) to do its thing (should be less than a minute - or watch from the \"Actions\" tab of the repo) and check.</li> </ul>"},{"location":"Developers/From-code-to-deployment/#about-google-play-publishing","title":"About Google Play publishing","text":"<p>We start at a 10% rollout, after a day with no major problems go to 30%, and after another day to 100%. If you were counting that means that most players will get the new version after 2+ days.</p> <p>If there were problems, we halt the current rollout, fix the problems, and release a patch version, which starts at 10% again.</p> <p>Dear future me - the automation was extremely annoying guesswork to set up, so the facts you need to know are:</p> <ul> <li>There is a user at the Google Cloud Platform Account Manager called Unciv_Upload_Account. There is an access key to this account, in json, stored as the Github secret GOOGLE_PLAY_SERVICE_ACCOUNT_JSON.</li> <li>This user was granted ADMIN permissions to the Google Play (after much trial and error since nothing else seemed to work) under User &gt; Users and Permissions. Under Manage &gt; Account permissions, you can see that it has Admin.</li> </ul>"},{"location":"Developers/From-code-to-deployment/#updating-the-wiki","title":"Updating the wiki","text":"<p>Pages for the Unciv Github Wiki are kept in the main repository under docs.</p> <p>The process to edit the wiki is as follows:</p> <ol> <li>Open a pull request in the main Unciv repository that changes files under docs.</li> <li>Once the pull request is merged, an account with commit privileges on the Unciv repository leaves a comment saying \"<code>update wiki</code>\".</li> <li>This comment triggers a bot to copy all the wiki files from the main repository into the Github wiki, with a link back to the PR in its commit message for credit.</li> </ol> <p>Doing things this way has several distinct advantages over using the Github Wiki web interface directly:</p> <ul> <li>Changes can be proposed via PR and proofread or fact-checked.</li> <li>A proper MarkDown editor or IDE can be used to write the wiki, bringing faster editing, clickable links while editing, better live HTML preview, and automatic detection of problems like broken links.</li> <li>The wiki files can also be browsed at https://github.com/yairm210/Unciv/tree/master/docs/wiki.</li> <li>Auto-generated documentation made by the build process can be placed directly in the wiki.</li> </ul> <p>However, it also imposes a couple of conventions about how links should best be formatted:</p> Link type Format Example Inter-wiki Should begin with \"./\", and include \".md\". <code>./Mods.md#other</code> Code or asset file Should begin with \"https://github.com/yairm210/Unciv/blob/master/\", and be relative to the project root. <code>https://github.com/yairm210/Unciv/blob/master/android/assets/game.png</code> <p>These formats will allow IDEs like Android studio to resolve these links and check for broken links, while also working on the Github code browser.</p> <p>The bot that updates the wiki from the main repository automatically translates them into formats that are compatible with Github Wikis, which have somewhat non-standard requirements.</p>"},{"location":"Developers/Game-Making-Tips/","title":"Game Making Tips","text":""},{"location":"Developers/Game-Making-Tips/#tips-and-tricks-for-making-a-libgdx-game","title":"Tips and tricks for making a LibGDX game","text":"<p>Here are a bunch of things I've learned from by brief excursion into the world of game making.</p> <p>Some of our will be obvious to you, some will not.</p>"},{"location":"Developers/Game-Making-Tips/#use-kotlin","title":"Use Kotlin","text":"<p>Unciv started its life as a Unity project in C#, was shifted to Java and LibGDX, and finally to Kotlin.</p> <p>I regret every minute that I spent writing events in Java, this is probably the most significant change that your application could see.</p>"},{"location":"Developers/Game-Making-Tips/#use-scene2d","title":"Use Scene2d","text":"<p>Unless you plan on creating images on the fly, you'll probably be using prerendered assets.</p> <p>Placing them manually is akin to manually positioning html tags, instead of using html hierarchy and css to guide positions.</p> <p>So too is Scene2d - as a placement framework. it's relatively simple to understand, especially when you...</p>"},{"location":"Developers/Game-Making-Tips/#ignore-horizontal-and-vertical-groups-use-table","title":"Ignore Horizontal and Vertical groups - use Table","text":"<p>I personally found that table has all the functionality of the above, and more.</p> <p>Each class has a different syntax too, so I found it much simpler to just stick with Table for everything.</p> <p>Table does just about EVERYTHING! It's insanely amazing!</p>"},{"location":"Developers/Game-Making-Tips/#if-your-game-is-getting-slow-use-the-android-profiler-in-android-studio","title":"If your game is getting slow, use the Android profiler in Android Studio","text":"<p>The top-down CPU chart is the best code profiler I've ever seen, use it to your advantage!</p>"},{"location":"Developers/Game-Making-Tips/#cache-everything","title":"Cache everything","text":"<p>Caching is a trade-off between purer, state-agnostic code and higher performance. Coming from a PC background, I automatically assume that anything less than O(n^2) is less than a millisecond and therefore, not a caching candidate. This is not so in mobile development.</p> <p>This becomes especially relevant when you need to save and load game data which has lots of connected parts - you have to avoid circular references, and you want to minimise the save size, but you need to reconstruct the missing links when loading.</p>"},{"location":"Developers/Game-Making-Tips/#minimize-string-operations","title":"Minimize String operations","text":"<p>All the tip and tricks you've heard to minimize String operations? Use them!</p> <p>String constants should be consts, use StringBuilders (or just ArrayLists of strings that you later .joinToString())</p>"},{"location":"Developers/Game-Making-Tips/#sequences-everywhere","title":"Sequences everywhere!","text":"<p>One thing I did not expect to be such an issue is intermediate lists when sorting and mapping.</p> <p>But apparently, the memory allocation for these tasks is Serious Business.</p> <p>So whenever possible, take your list and .asSequence() it before activating list operations - this results in huge savings of both time and memory!</p> <p>The only time you shouldn't be doing this, though, is when you want to cache the specific values for future use - sequences will go through the whole process every time you iterate on them, so just .toList() them when you've gotten the final results!</p>"},{"location":"Developers/Game-Making-Tips/#general-tips-for-making-an-open-source-game","title":"General tips for making an Open Source game","text":""},{"location":"Developers/Game-Making-Tips/#lower-the-entry-bar-for-both-programmers-and-players","title":"Lower the entry bar - for both programmers and players","text":"<p>I think that most Open Source games suffer from this problem - those that are in are way in, but those that are out and want to join have to learn the ecosystem.</p> <p>Documentation is a big issue here, but so are detailed instructions - and I mean \"Spoonfeeding\".</p> <p>Treat new developers as if they've never used Git before - it's possible they haven't!</p> <p>Explain how to download the sourecode, the tools, how to get the game running locally, how to make changes and how to submit them.</p> <p>Same think with new players - getting the game up and running should be AS SIMPLE AS HUMANLY POSSIBLE - you want people to play your game, don't you?</p> <p>This includes:</p> <ul> <li>Source-To-Executable automation - I use Travis</li> <li>Play stores and the like</li> <li>Internal game tutorials - your players will NEVER BE SATISFIED with this last point, but at least do what you candidate</li> </ul>"},{"location":"Developers/Game-Making-Tips/#community-community-community","title":"Community, Community, Community!","text":"<p>I, personally, underestimated this point for about a year after launch.</p> <p>I communicated with players through the Google Play Store and Github issues, and that seemed to be enough.</p> <p>It was only after repeated urgings from players that I opened a Discord server - and that gradually lead to a massive change!</p> <p>You see, it's not ABOUT programmer-to-player interaction. There will always be a small number of core devs relative to the large playerbase.</p> <p>The key to the community is the player-to-player interaction. Explaining things, questions, ideas, things that players bounce off each other, not only make the amorphous community a better place, but actually lead to a better game!</p> <p>Another think to remember is that there's a larger community around you - the Open Source community, the Linux community, etc.</p> <p>There are lots of people who will play your game only because it's open source, and it also means they don't have as many options.</p> <p>For example...</p> <ul> <li>Being the best 4X game means competing with the biggest names out there</li> <li>Being the best 4X game for Linux means many less competitors, but All The Cool Kids (tm) are multiplatforming nowadays so you're still outperformed.</li> <li>Being the best Open Source 4X game means about 5 competitors, and no money is involved either so the average entry is not as polished.</li> <li>Being the best Open Source 4X game for Android... means having so few competitors that it's totally doable.</li> </ul>"},{"location":"Developers/Game-Making-Tips/#everything-is-marketing","title":"Everything is marketing.","text":"<p>Your game's name, the icon, screenshots, everything a player sees about your game is marketing.</p> <p>Icons and bylines are especially important, since they're the first things your players will probably see.</p> <p>I saw an almost 50% (!) by changing the icon, after several experiments, which Google Play lets you conduct very easily.</p>"},{"location":"Developers/Game-Making-Tips/#translations-are-part-of-your-source-code","title":"Translations are part of your source code","text":"<p>This may be slightly controversial, so I'll explain.</p> <p>We went though a number of iterations regarding how to save translations until we arrived at the current format.</p> <p>The important parts are:</p> <ul> <li> <p>Game translation files should be AUTO GENERATED. This allows you to add new objects into the game with impunity,     knowing that corresponding lines will be auto-added to the translations.</p> </li> <li> <p>Translations for each language should be stored separately - this allows concurrent modification of several independent languages with no risk of conflict</p> </li> <li> <p>Translations should be PR'd in! This allows other speakers to question or change the proposed translations, and allows you to run tests on your translations.     If you require a specific format, this is invaluable as it means that bad translations will be rejected at the door.</p> </li> </ul>"},{"location":"Developers/Game-Making-Tips/#open-source-problems-require-open-source-solutions","title":"Open source problems require open (source?) solutions","text":"<p>TL;DR, consider using APIs that are free, even if they're not Open Source.</p> <p>Multiplayer requires syncing game files between clients, even when one of them is not currently online.</p> <p>The 'correct' way to solve this would probably be to have an online DB and a service which handles user requests.</p> <p>Since this is an Open Source game, I'm working on a 0$ budget, so we just store all the files in Dropbox and upload/download there.</p> <p>Is this secure? No, but does it need to be? You need to think of the cost vs the value.</p> <p>Same thing with Mods. Steam is big and secure so it handles its mods itself.</p> <p>We are small and open, so we just allow to download from Github, which lets us use all of Github's built in functions (user management, readmes, stars, versioning...) at no extra cost.</p> <p>And unlike the Dropbox usage, which is basically abuse, Github is built for this kind of thing! This is exactly the kind of use case they were thinking of to start with!</p>"},{"location":"Developers/Game-Making-Tips/#the-reckoning","title":"The Reckoning","text":"<p>There comes a time in every project where the cool stuff is done. All the cutting-edge awesomeness and algorithmic playdough is done, and now all (hah) it needs is polish.</p> <p>You know who loves polish? Players! Sure, there are some that say \"a good game is good even if it's basic\" but they have standards for what a basic game should have as well.</p> <p>And the numbers don't lie. Polished games sell themselves better, and so are played more.</p> <p>You know who doesn't love polish? DEVELOPERS.</p> <p>When your game is relatively simple, then the options for polish are more limited, but the more complex the game, the more polish-venues there are.</p> <p>And it can be an ABSOLUTE GRIND. Another weird use-case, another ingame option, \"better performance\" (I must have spent dozens of hours on different performance related actions)</p> <p>And the worst thing is, that everyone notices when it's missing, but no one notices when it's there. A hundred versions of polish - literally - and the average player may notice only a slight change.</p> <p>And then comes the moment when you ask yourself, why bother? What are we even doing here?</p> <p>For me, the answers are as follows:</p> <p>A. To build something truly great, you have to keep going way beyond when it stops being fun.</p> <p>B. There's a community of people that like what you're doing and want there to be more of it :)</p> <p>C. You know you want to keep coding, and what, you think you're going to start another project and it'll work out as well? You've tried that multiple times, and let's face it the chance of you making a second game that goes so well is really small unless you invest in it as much time as you have in this, and yeah, then you'll be back in this position again.</p> <p>And that's basically the loop I've been in for the last hundred versions or so! Solve bugs, fix edge cases, improve AI, accept PRs. Lots of mod-related changes, both to stop the game breaking when people do things in mods that they shouldn't and to allow them more freedom in making them.</p> <p>I don't think I'll ever really continue to finish G&amp;K, I'm DEFINITELY not planning on implementing BNW mechanics which frankly I think are...not great.</p> <p>That's where I am right now. Kind of done with the game, but considering that I thought that half a year ago and releases are still releasing roughly every week, also kind of not.</p>"},{"location":"Developers/Map-rendering/","title":"Map rendering","text":""},{"location":"Developers/Map-rendering/#introduction-how-does-libgdx-render-images","title":"Introduction - how does LibGDX render images?","text":"<p>Images in LibGDX are displayed on screen by a SpriteBatch, which uses GL to bind textures to load them in-memory, and can then very quickly display them on-screen. The actual rendering is then very fast, but the binding process is slow. Therefore, ideally we'd want as little bindings as possible, so the textures should contain as many images as possible. This is why we compile images (ImagePacker.packImages()) into large PNGs.</p> <p>However, due to limitations in different chipsets etc, these images are limited to a maximum size of 2048*2048 pixels, and the game contains more images than would fit into a single square of that size. What we do, then, is separate them by category, and thus rendering proximity. The 'android' folder contains Images, but also various sub-categories - Images.Flags, Images.Tech, etc. Each of these sub-categories are compiled into a separate PNG file in the 'android/assets' folder.</p> <p>When rendering, the major time-sink is in rebinding textures. We therefore need to be careful to minimize the number of -rebinds, or 'swapping between different categories'.</p>"},{"location":"Developers/Map-rendering/#layering","title":"Layering","text":"<p>Each map tile is comprised of several layers, and each layer needs to be rendered for all tiles before the next layer is. For example, we don't want one tile's unit sprite to be overlayed by another's improvement. This layering is done in TileGroupMap, where we take the individual parts for all tiles, separate them into the layers, and add them all to one big group. This also has a performance advantage, since e.g. text and construction images in the various city buttons are not rendered until the very end, and therefore swap per the number of of cities and not for every single tile. This also means that mods which add their own tilesets or unit sprites have better performance than 'render entire tile; would provide, since we first render all terrains, then all improvements, etc, so if my tileset provides all terrains, it won't be swapped out until we're done.</p>"},{"location":"Developers/Map-rendering/#debugging","title":"Debugging","text":"<p>Android Studio's built-in profiler has a CPU profiler which is perfect for this. Boot up the game on your Android device, open a game, start recording CPU, move the screen around a bit, and stop recording. Select the \"GL Thread\" from the list of threads, and change visualization to a flame graph. You'll then see what's actually taking rendering time.</p> <p>You can find various games to test on here - This for example is a crowded one.</p>"},{"location":"Developers/Project-structure-and-major-classes/","title":"Project structure","text":"<p>Since LibGDX, and therefore Unciv, are built for multi-platform support, the project structure is built accordingly.</p> <p>99% of the code is in the core project, which contains all the platform-independent code.</p> <p>The desktop and android folders contain platform-specific things, and the Android folder also contains the game Images and the all-important Assets, which are required for running from Desktop as well, so we bundle them up into the .jar file when releasing.</p> <p>The tests folder contains tests that can be run manually via gradle with <code>./gradlew tests:test</code>, and are run automatically by Travis for every push.</p> <p>The server folder contains the sources for the UncivServer (a host enabling communication between multiplayer game instances), which is packaged into its own separate jar.</p>"},{"location":"Developers/Project-structure-and-major-classes/#translations","title":"Translations","text":"<p>Before we get to the Classes, a word on Languages. Unciv is playable in several handfuls of languages, and there's magic to support that. Whenever you include a new string in code you will need to give it a quick evaluation - will users see it, and if so, what do I need to do to support its translations. Sometimes you may not need to do anything, sometimes you will add a line to the translation templates, and sometimes you will adapt the string formatting to support the translations. For details, see the 'Translation generation - for developers' chapter.</p>"},{"location":"Developers/Project-structure-and-major-classes/#major-classes","title":"Major classes","text":"<p>Civ, and therefore Unciv, is a game with endless interconnectivity - everything affects everything else.</p> <p>In order to have some semblance of order, we'll go over the main classes in the order in which they are serialized.</p> <p>So yes, you can - for instance - get the center tile of a city, a TileInfo, directly from CityInfo. But delving into all the connections would only harm the point of this overview, that's what the actual code is for ;)</p> <p>The Game State:</p> <ul> <li>GameInfo<ul> <li>CivilizationInfo<ul> <li>CityInfo</li> </ul> </li> <li>TileMap<ul> <li>TileInfo<ul> <li>MapUnit</li> </ul> </li> </ul> </li> <li>RuleSet (unique in that it is not part of the game state)</li> </ul> </li> </ul> <p>The UI:</p> <ul> <li>MainMenuScreen</li> <li>NewGameScreen</li> <li>WorldScreen</li> <li>CityScreen</li> <li>MapEditorScreen</li> <li>Picker Screens - TechPickerScreen, PolicyPickerScreen, ImprovementPickerScreen, PromotionPickerScreen</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#game-state","title":"Game State","text":""},{"location":"Developers/Project-structure-and-major-classes/#the-game-gameinfo","title":"The Game - <code>GameInfo</code>","text":"<p>First off, let's clarify: When we say \"The Game\", we mean the state of the game (what turn it is, who the players are, what each one has etc) and not the UI of the game.</p> <p>That is, The Game is the currently played game, not Unciv.</p> <p>The game contains three major parts:</p> <ul> <li>The list of the players, or civilizations - <code>List&lt;CivilizationInfo&gt;</code></li> <li>The map upon which the game is played - <code>TileMap</code></li> <li>The ruleset by which the game is played - <code>RuleSet</code>. This includes what technologies, buildings, units etc. are available, and IS NOT serialized and deserialized, but comes straight from the game files - more on that later.</li> <li>Parameters unique to this game - difficulty, game speed, victory conditions, etc.</li> </ul> <p>When we save the game, or load the game, we're actually serializing and deserializing this class, which means that the this class is the root of the entire game state.</p> <p>Most objects in the \"state tree\" have a transient reference to their parent, meaning the tree can be traversed in-code in all directions, and frequently is.</p>"},{"location":"Developers/Project-structure-and-major-classes/#a-civilization-civilizationinfo","title":"A Civilization - <code>CivilizationInfo</code>","text":"<p>This represents one of the players of the game, and NOT a specific nation - meaning, not France, but rather \"Player X who is France in this game\". In another game, there will be another France.</p> <p>As one of the focal points of the game, it contains a lot of important information, the most important of which are:</p> <ul> <li>The list of cities the civilization has - <code>List&lt;CityInfo&gt;</code></li> <li>Which nation this is - references a certain Nation (part of the ruleset)</li> <li>Various Managers for the different aspects of the civilization - <code>PolicyManager</code>, <code>GoldenAgeManager</code>, <code>GreatPersonManager</code>, <code>TechManager</code>, <code>VictoryManager</code>, <code>DiplomacyManager</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#a-city-cityinfo","title":"A City - <code>CityInfo</code>","text":"<p>This contains the information about a specific city.</p> <p>Beyond basic information like name, location on map etc, the most important classes it contains are:</p> <ul> <li>Calculating the yield of the city - <code>CityStats</code></li> <li>Managers for the various aspects - <code>PopulationManager</code>, <code>CityConstructions</code>, <code>CityExpansionManager</code></li> <li>The tiles controlled and worked by the city - only their locations are permanently saved in the CityInfo, the actual information is in the TileInfo in the TileMap</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-map-tilemap","title":"The map - <code>TileMap</code>","text":"<p>This contains mostly helper functions and acts as a wrapper for the list of tiles it contains</p>"},{"location":"Developers/Project-structure-and-major-classes/#a-tile-tileinfo","title":"A tile - <code>TileInfo</code>","text":"<p>Each tile is comprised of several layers, and so has information for each.</p> <p>Tiles have, primarily:</p> <ul> <li>A base terrain - Grassland, Hills, Desert etc. References a certain <code>Terrain</code> (part of the ruleset)</li> <li>An optional terrain feature - Forest, Jungle, Oasis etc. References a certain <code>Terrain</code> (part of the ruleset)</li> <li>An optional resource - Iron, Dye, Wheat etc. References a certain <code>TileResource</code> (part of the ruleset)</li> <li>An improvement built on the tile, if any. References a certain <code>TileImprovement</code> (part of the ruleset)</li> <li>The units that are currently in the tile - <code>MapUnit</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#a-unit-on-the-map-mapunit","title":"A unit on the map - <code>MapUnit</code>","text":"<p>Unlike buildings, Unit in Unciv has two meanings. One is a Type of unit (like Spearman), and one is a specific instance of a unit (say, a Babylonian Spearman, at a certain position, with X health).</p> <p><code>MapUnit</code> is a specific instance of a unit, whereas <code>BaseUnit</code> is the type of unit.</p> <p>Main information:</p> <ul> <li>A name - references a specific <code>BaseUnit</code></li> <li>Health and Movement</li> <li>Promotion status - <code>UnitPromotions</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#ruleset","title":"Ruleset","text":"<p>So far so good - but what of everything that makes Civ, Civ? The units, the buildings, the nations, the improvements etc?</p> <p>Since these things remain the same for every game, these are not saved on a per-game basis, but rather are saved in json files in Unciv's asset folder.</p> <p>Each class in the game state that saves one of these will reference it by name, and when the game is running it will check the Ruleset to find the relevant information for that object.</p> <p>The various objects are:</p> <ul> <li><code>Technology</code> - referenced mainly in <code>CivilizationInfo.TechManager</code></li> <li><code>Nations</code> - referenced mainly in <code>CivilizationInfo</code></li> <li><code>Policy</code> - referenced mainly in <code>CivilizationInfo.PolicyManager</code> (seeing a pattern here?)</li> <li><code>Building</code> - referenced mainly in <code>CityInfo.ConstructionManager</code></li> <li><code>BaseUnit</code> - referenced mainly in <code>MapUnit</code></li> <li><code>Promotion</code> - referenced mainly in <code>MapUnit</code></li> <li><code>Terrain</code> - referenced mainly in <code>TileInfo</code></li> <li><code>TileResource</code> - referenced mainly in <code>TileInfo</code></li> <li><code>TileImprovement</code> - referenced mainly in <code>TileInfo</code></li> </ul> <p>There are also Translations in the Ruleset, but they technically have nothing to do with the game state but rather with the UI display.</p> <p>The information for all of these is in json files in <code>android\\assets\\jsons</code></p>"},{"location":"Developers/Project-structure-and-major-classes/#ui","title":"UI","text":"<p><code>UncivGame</code> is the 'base' class for the UI, from which everything starts, but it itself doesn't do much.</p> <p>When we change a screen, we're changing a value in UncivGame, the interesting stuff happens in the screens themselves.</p>"},{"location":"Developers/Project-structure-and-major-classes/#the-main-menu-mainmenuscreen","title":"The main menu - <code>MainMenuScreen</code>","text":"<p>This is what the user sees when first entering the game. It acts as a hub to loading games, adding mods, options etc, without loading an actual game upfront - this allows us to differentiate between \"User can't enter game\" and \"User can't load game\" problems</p>"},{"location":"Developers/Project-structure-and-major-classes/#starting-a-new-game-newgamescreen","title":"Starting a new game - <code>NewGameScreen</code>","text":"<p>This is basically a giant setting screen for GameOptions and MapOptions classes, divided into:</p> <ul> <li>GameOptionsTable - game speed, mods, etc</li> <li>MapOptionsTable - either from preexisting map file or generated, in which case: size, map generation type, etc.</li> <li>PlayerPickerTable - What civs are in the game and who controls them</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-world-screen-worldscreen","title":"The World Screen - <code>WorldScreen</code>","text":"<p>90% of the game is spent on this screen, so naturally it's the fullest, with the most things happening.</p> <p>This is the main hub of the game, with all other screens being opened from it, and closing back to reveal it.</p> <p>Most notable are:</p> <ul> <li>The map itself - a <code>TileMapHolder</code> - with each of the rendered tiles being a <code>TileGroup</code></li> <li>The information panels - <code>WorldScreenTopBar</code> for stats and resources, <code>UnitTable</code> for the currently selected unit, <code>TileInfoTable</code> or the currently selected tile, <code>BattleTable</code> for battle simulation, and <code>NotificationsScroll</code> for the notifications</li> <li>The minimap - <code>MinimapHolder</code></li> <li>Buttons linking to other screens - to the <code>TechPickerScreen</code>, <code>EmpireOverviewScreen</code>, and <code>PolicyPickerScreen</code></li> <li>The almighty Next Turn button</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-city-screen-cityscreen","title":"The city screen - <code>CityScreen</code>","text":"<p>The second-most important screen.</p> <p>Notable parts:</p> <ul> <li>the City Stats table - should definitely be its own class come to think of it</li> <li>The construction list and current construction (bottom left) - <code>ConstructionsTable</code></li> <li>Existing buildings, specialists and stats drilldown - <code>CityInfoTable</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#others","title":"Others","text":"<p>A few words need to be said about the NextTurn process, but there isn't really a good place for it so I'll put it here.</p> <p>We clone the GameInfo and use a \"new\" GameInfo for each turn because of 2 reasons.</p> <p>The first is multithreading and thread safety, and the second is multiplayer reproducibility.</p> <p>The first point is pretty basic. The NextTurn needs to happen in a separate thread so that the user can still have a responsive game when it's off doing stuff. Stuff in the GameInfo changes on NextTurn, so if you're rendering that same GameInfo, this could cause conflicts. Also, after NextTurn we generally autosave, and if stuff changes in the state while we're trying to serialize it to put it in the save file, that's Not Fun. A single clone solves both of these problems at once.</p> <p>The second point is less obvious. If we use our mutable state, changing stuff in place, then what happens when we're playing in Multiplayer? Multiplayer is based upon the fact that you can receive an entire game state and go from there, and in fact the move to multiplayer was what made the whole \"clone\" thing necessary (on the way it also solved the aforementioned threading problems)</p>"},{"location":"Developers/Saved-games-and-transients/","title":"Saved games and transients","text":"<p>Unciv is a game where many things are interconnected. Each map unit, for example, belongs to a civ, is located on a tile, can have several promotions and \"inherits\" from a base unit.</p> <p>When saving a game state, we want it to be as small as possible - so we limit the information saved to the bare minimum. We save names instead of pointers, and anything that can be recalculated is simply not saved.</p> <p>But during runtime, we need these links for performance - why perform a lookup every time if we can save a reference on the object?</p> <p>Classes are therefore freeze dried on serialization, and rehydrated for runtime. Since these fields are marked in Kotlin as @Transient fields, we call the rehydration function <code>setTransients</code>.</p> <p>Take the map unit for example. How can we calculate the uniques for that unit? They can come from several places:</p> <ul> <li>Base unit uniques</li> <li>Promotions</li> <li>Civ-wide uniques</li> </ul> <p>So from the save file, we get the civ name, unit name, and promotion names; for runtime, we'll want a reference to the civ, base unit, and promotions.</p> <p>We can find these by looking up the civ in the game, and the unit and promotions from the ruleset.</p> <p>The civ itself - a game object - references the nation - a ruleset object, which is another link. The base unit references the unit type, another link.</p> <p>The nation, base unit, and promotions, all contain uniques - which are saved as strings. For performance, these too get saved at runtime as Unique instances - which contain the unique type, the parameters, conditionals, etc.</p> <p>Beyond the fact that each ruleset object retains a \"hydrated\" list of its uniques, the unit's uniques don't change very often - so we can add yet another layer of caching by saving all the unit's uniques, and rebuilding this every time there's a change</p> <p>All of this is VITAL for performance - Unciv is built to run on potatoes, and even hash lookups are expensive when performed often, not to mention Regexes required for Unique parsing!</p>"},{"location":"Developers/Testing-Android-Builds/","title":"Building for and testing on Android","text":"<p>This is a work in progress - feel free to contribute. Much of this information is not specific to Unciv and publicly available.</p>"},{"location":"Developers/Testing-Android-Builds/#run-configuration","title":"Run configuration","text":"<p>A successful Gradle sync should automatically create a Run configuration for \"android\". If not, you might try creating one yourself (however, if the config is missing due to an incomplete Gradle sync, then you likely won't be able to choose the module):</p> <ul> <li>In Android Studio, Run &gt; Edit configurations (be sure the Gradle sync is finished successfully first).<ul> <li>Click \"+\" to add a new configuration</li> <li>Choose \"Android App\"</li> <li>Give the configuration a name, we recommend \"Android\"</li> <li>Set module to <code>Unciv.android.main</code></li> <li>On the Miscellaneous tab, we recommend checking both logcat options</li> <li>On the Debugger tab, we recommend checking <code>Automatically attach on Debug.waitForDebugger()</code></li> <li>That's it, the rest can be left as defaults.</li> </ul> </li> </ul>"},{"location":"Developers/Testing-Android-Builds/#physical-devices","title":"Physical devices","text":"<p>Debugging on physical devices is actually easiest. With Studio running, you will have adb running, and any newly connected device that generally allows debugging will ask to confirm your desktop's fingerprint (use an USB cable for this tutorial, IP is another matter). Once adb sees the device and your desktop is authorized from the device, it will be available and preselected on the device select-box to the right of your \"android\" run configuration and you can start debugging just like the desktop version. Note A debug session does not end after selecting Exit from Unciv's menus - swipe it out of the recents list to end the debug session. Hitting the stop button in Studio is less recommended. That's an Android feature.</p>"},{"location":"Developers/Testing-Android-Builds/#adb-on-linux","title":"<code>adb</code> on Linux","text":"<p>For the above (using USB) to succeed on Linux, you may need to prepare permissions. The exact requirements depend on the distribution - if in doubt, search online resources. For a Mint 22.1 distro it's as follows, but the steps should be mappable to other distros easily: - Ensure you're a member of group <code>plugdev</code> (bash: <code>groups</code>). It's default on Mint, but if not, add yourself (<code>sudo usermod -a -G plugdev $USER</code>). - Ensure a matching udev rule exists. This can depend on the maker of the device you wish to connect. To find the maker ID, while the device is connected: <code>lsusb</code>.   Find your device and jot down the first 4-digit hex code after \"ID\". In many cases that will be <code>18d1</code> - e.g. LineageOS installs will mostly pretend to be 18d1, even if it's different hardware. - Look for existing rules in <code>/etc/udev/rules.d/</code>. A typical name would be <code>51-android.rules</code>. Those are text files, and all are processed, so guess from their names and if in doubt check them all. - Edit or create the rules file. On Mint 22+, using xed under sudo is fine, otherwise you might prefer to use another editor like nano. <code>sudo xed /etc/udev/rules.d/51-android.rules</code> - In the typical case, the file would have one line: <code>SUBSYSTEM==\"usb\", ATTR{idVendor}==\"18d1\", MODE=\"0666\", GROUP=\"plugdev\"</code>. Yes, replace that <code>18d1</code> with your maker ID. If the file and any lines for different maker IDs already exist, add another line. - Save the file ~and reboot.~ Just joking - we're on Linux, so a <code>sudo udevadm control --reload-rules &amp;&amp; sudo udevadm trigger</code> will do. - Try <code>adb kill-server &amp;&amp; adb devices</code>: Your device should be in the list, and Studio will be able to talk to it. - You will likely have to re-authorize your computer from the device. Make sure no notification drawer or other system UI is covering and hiding the prompt. - If you still have problems, make sure no gradle daemons are still running under the old permissions: <code>./gradlew --status</code>. If there are, kill them: <code>./gradlew --stop</code> (or skip the status right away).</p>"},{"location":"Developers/Testing-Android-Builds/#building-an-apk","title":"Building an APK","text":"<p>Android Studio has a menu entry \"Build -&gt; Build Bundle(s) / APK(s) -&gt; Build APK(s).\" This will build a ready-to-install APK, and when it is finished, pop a message that offers to show you the file in your local file manager. Important such locally built APK's are debug-signed and not interchangeable with Unciv downloaded from stores. You cannot update one with the other or switch without uninstalling first - losing all data. The command line equivalent is: <code>./gradlew android:assembleDebug</code>. Then find the apk yourself under <code>android/build/outputs/apk/debug</code>.</p>"},{"location":"Developers/Testing-Android-Builds/#virtual-devices-avd","title":"Virtual devices (AVD)","text":"<p>(TODO) - Install Emulator - Intel HAXM: Deprecated by Intel but still recommended - Download system image     - Choice: Match host architecture, w/o Google, older is faster...? - Configure AVD - Debug on AVD</p>"},{"location":"Developers/Testing-Android-Builds/#uncivs-log-output","title":"Unciv's log output","text":"<p>Unciv's log system runs on top of the Android SDK one, and filters and tags the messages before passing them to the system.</p> <p>Like the desktop variant, it has a 'release' mode where all logging from Unciv code is dropped. A release is detected when the actual APK manifest says debuggable=false - all possibilities discussed here are debug builds in that sense. Running from Studio it does not matter which button you use - Run or Debug - both deploy a debug build, the difference is only whether it attaches the debugger right away. An APK built from Studio is also always a debug build.</p> <p>Therefore, logging is always enabled unless you run a store version. You can override this by providing an intent extra: In your Run configuration, on the \"General\" Tab, add in the \"Launch Flags\" field: <code>--ez debugLogging false</code>. The override can also be controlled without Studio using the activity manager: <pre><code>adb shell am start com.unciv.app/com.unciv.app.AndroidLauncher --ez debugLogging true\n</code></pre> (or <code>am start...</code> directly from a device terminal) will turn on logging for a release (store) build.</p> <p>The log system's filtering capabilities that work by providing <code>-D</code> options to the Java virtual machine cannot be controlled on Android as far as we know. (TODO - document those in the desktop/Studio wiki article)</p>"},{"location":"Developers/Testing-Android-Builds/#reading-the-logcat","title":"Reading the logcat","text":"<p>(TODO) - Studio     - If the logcat window is missing: View - Tool Windows - Logcat - Studio's filtering     - When you debug Unciv, a matching filter is pre-applied to the Logcat window, but the tool can actually show the entire system log, including those for other apps.     - Using <code>package:com.unciv.app tag:Unciv</code> as filter is useful to see only the output of Unciv's own logging system. - logcat apps on the device     - <code>com.pluscubed.matloglibre</code>? Outdated. - logcat apps need root or specific authorization     - <code>adb shell pm grant &lt;logcat app's package id&gt; android.permission.READ_LOGS</code></p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/","title":"Translations, mods, and modding freedom in Open Source","text":"<p>Unciv is, at its core, a remake of Civ V, meaning mechanics-wise there's almost by definition not much place for innovation. In terms of UI, there's nothing here that hasn't been done dozens of times, with far greater polish. However, there is one area where Unciv is groundbreaking: in its accessibility of translations, the possibility space of its mods, and the relationship between them.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translations","title":"Translations","text":""},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#the-translation-process","title":"The translation process","text":"<p>So let's start with translation. Surely this is a solved problem, right? Source text + language = translated text, and this information needs to be in a file so the game can read it. What makes us different from, for example, Firaxis?</p> <p>There are a couple of things, but the most significant is that this is an open-source game, and thus the translations are open-source as well. This means translators are both amateurs and not obligated to translate, so if translating is difficult, they simply won't.</p> <p>Amateurs can make mistakes, which is why it's vital that mistakes are easy to spot. That means that formats like \"translation key\" - e.g. <code>DIPLOMACY_GREETING = Siamo lieti di fare la vostra conoscenza.</code> are much less effective than <code>A pleasure to meet you. = Siamo lieti di fare la vostra conoscenza.</code> This format lends itself both the easier translation (it's immediately obvious what needs to be translated) and actual collaboration.</p> <p>A common suggestion that we get (by people with little familiarity with the project) is to \"use a website for translation\". This is not bad advice for a small open source game, but there are multiple disadvantages that (for now) no translation website provides enough advantage to outweigh:</p> <ol> <li>Testing. Currently, translations undergo a number of tests for verification - more on that later! This allows some language changes to be accepted and others not, and it's all in the same platform with the same tests. External translation tools don't allow for this.</li> <li>History and revisions. This is what Git was made for, and nothing like it exists in the world. By itself this would not</li> <li>Release cycle. We release versions semiweekly, and if we needed to upload changes to the translation website for every in-game change, and download them for every release, that's extra work. For some websites this is automate-able - for most it is not.</li> <li>Discussions. Most crowdsourcing translation websites don't allow for discussions and corrections on translations. Github makes every translation collaborative work.</li> <li>Mass changes. If we're changing the source of the translation but want to keep the various destinations (say, we change \"Gold from trade routes +[amount]%\" to \"+[amount]% Gold from trade routes\"), if all the translation files are in Git we can do that in 1 minute. If it's external, this varies greatly.</li> </ol> <p>Here are some ways that we managed to go wrong in the past:</p> <ul> <li>Putting all languages into the same file (\"one big translation dictionary\") - when multiple people edit this file for different languages, they can conflict with each other. Separate to different files for simpler management.</li> <li>Using json - json is great for machines, but less so for humans, who can easily make mistakes. Json format is surprisingly finnicky, miss a closing \" and the whole file is now unreadable.</li> </ul> <p>The format we decided to go for is one file per language, delimited by \" = \" for visual separation, in a .properties file. Lines starting in # are considered comments, so we can add comments for translators.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#building-the-translation-files","title":"Building the translation files","text":"<p>As stated, Unciv releases versions semiweekly, and very often these changes include new objects or new UI elements. How do we keep all translation files up to date?</p> <p>In Unciv, all object data is stored in json format. This allows us to iterate on all objects, regardless of type, and extract the various text fields (strings or lists of strings). We avoid duplication by saving all translation texts we've already added, and use the existing translations to populate the \"value\" for each translation \"key\" we found in the json files.</p> <p>Since we rebuild the entire translation file every time, there's currently no way for translators to retain their own comments for future translators. But on the other hand, since for each line that we add we already know if it's translated or not, this allows us to add a <code># Requires translation</code> line before every non-translated line, which helps translators for languages that are almost fully translated to easily locate the new or changed terms for translation with ctrl+f (and of course this marking will disappear the next time we rebuild the file).</p> <p>Since there are UI texts that are not part of any specific object (like \"Start new game\"), we have a separate template.properties file for texts to translate that are not in the json files. Unlike adding objects, where the developer doesn't need to address the translation files at all since it's all linked, when adding UI elements with new texts devs need to remember to add the texts to template.properties file.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translation-placeholders","title":"Translation placeholders","text":"<p>This is all well and good for specific text-to-text translations, but what about translating \"A Temple has been built in Rome\"? The same template could potentially be any building name, or any city name!</p> <p>We do this with placeholders, which looks something like this: <code>[construction] has been built in [cityName] = [cityName] ha costruito [construction]</code>. As you can see, the placement of the parameters can change between languages, so we have to name all parameters.</p> <p>This also means that there can be explicitly wrong translations - if any parameter that appears in the source does not appear in the translated version, we won't be able to display this in-game! This is one of the translation tests that we mentioned earlier - when a translator opens a PR, the game undergoes build &amp; test via the Github Actions, and will notify on failures. Finding the text that warns of the failure within the action output is currently mostly done by devs, but I hope to be able to automate this too someday.</p> <p>To translate a text like \"[Temple] has been built in [Rome]\", therefore, we need to:</p> <ul> <li>Find the relevant translation (we do this by erasing all text between square brackets in input and finding the relevant translation text)</li> <li>Map placeholder names to input text (construction = Temple, cityName = Rome)</li> <li>Replace placeholders in translation with TRANSLATED input text (in <code>[cityName] ha costruito [construction]</code>, replace \"[cityName]\" with translation of \"Rome\", and \"[construction]\" with translation of \"Temple\")</li> </ul>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translating-mod-data","title":"Translating mod data","text":"<p>The translation generation reads information from \"a ruleset\", i.e. the set of jsons defining the game's objects. Every mod is also a ruleset, either replacing or adding to the base ruleset defined in the game. This means that the same translation generation that we do for the base game can also be applied to mods, and so each modder can decide (from within the game) to generate translation files for his mod, and since mods are uploaded to Github to be widely available as part of the mod release methodology, translators will be able to translate those files the exact same way that they translate Unciv's base ruleset.</p>"},{"location":"Developers/UI-development/","title":"UI Development","text":"<p>Unciv is backed by GDX's scene2d for the UI, so check out their official documentation for more info about that.</p> <p>We mainly use the <code>Table</code> class of scene2d, because it offers nice flexibility in laying out all the user interface.</p>"},{"location":"Developers/UI-development/#the-fasteruidevelopment-class","title":"The <code>FasterUIDevelopment</code> class","text":"<p>This class is basically just a small helper GDX application to help develop UI components faster.</p> <p>It sets up the very basics of Unciv, so that you can then show one single UI component instantly. This gives you much faster response times for when you change something, so that you can immediately see the changes you made, without having to restart the game, load a bunch of stuff and navigate to where your UI component would actually be.</p> <p>To use it, you change the <code>DevElement</code> class within the <code>FasterUIDevelopment.kt</code> file so that the <code>actor</code> field is set to the UI element you want to develop. A very basic usage is there by default, just showing a label, but you can put any UI element there instead.</p> <p>Once it's up and running, your UI element is centered in the window and gets an orange border. You can toggle Scene2D debugging with the middle mouse button (click the wheel).</p> <p>Note that the parent your UI element will get doesn't set the size (which in reactive nested layouts would be its responsibility), so if your element is a WidgetGroup like Table, just pack() it. Or ignore the orange dot left over from the border. Also please do not resize the window - there's no support for that at the moment and no guarantees can be given for the results.</p> <pre><code>class DevElement(\n    val screen: UIDevScreen\n) {\n    lateinit var actor: Actor\n    fun createDevElement() {\n        actor = \"This could be your UI element in development!\".toLabel()\n    }\n\n    fun afterAdd() {\n    }\n}\n</code></pre> <p>You can then simply run the <code>main</code> method of <code>FasterUIDevelopment</code> to show your UI element.</p> <p>There's two ways to do so: * Open this file in Android Studio under project:docs/Developers. That line above has a little green arrow in the left gutter that can be clicked. * Create a Run Configuration similar to the desktop one described here, but with classpath <code>Unciv.tests.test</code> and main class <code>com.unciv.dev.FasterUIDevelopment</code>.   </p>"},{"location":"Developers/UI-development/#the-gdx-scene2d-debug-option","title":"The 'Gdx Scene2D debug' option","text":"<p>This option (on the secret 'Debug' page) turns on several UI debug features: * Gdx Actor debug lines * Mouse coordinates and FPS * Descriptor of the Actor under the mouse * Coordinate scales</p>"},{"location":"Developers/UI-development/#gdx-actor-debug-lines","title":"Gdx Actor debug lines","text":"<p>See Gdx wiki The Scene2D debug option turns on mouse-over Gdx debug lines at the stage level using <code>setDebugUnderMouse</code>, <code>setDebugTableUnderMouse</code> and <code>setDebugParentUnderMouse</code>. * Blue lines are Table bounds - Each Table has dimensions as a Widget and as a logical table determined by the cells. They will coincide if there is both expandX and expandY set somewhere. * Red lines are Cell bounds - the part within cell padding. * Green lines are Actor bounds of the Cell contents. If the Cell has both Fill directions set, they disappear below the red cell bounds (that is, unless the content Actor has a maxSize limiting the fill).</p>"},{"location":"Developers/UI-development/#mouse-coordinates-and-fps","title":"Mouse coordinates and FPS","text":"<p>On the bottom right is a semi-transparent panel with 3 numbers on top: X and Y of the mouse in Gdx stage coordinates, and FPS.</p>"},{"location":"Developers/UI-development/#descriptor-of-the-actor-under-the-mouse","title":"Descriptor of the Actor under the mouse","text":"<p>The lower part of said panel shows a string helping to identify which Actor the mouse is over. This will look for the actor's parent and potentially children, and the optional Actor.name field. Java class names or Label text are used when appropriate - it tries to build something short, but just descriptive enough. It uses the following separators / symbols: * <code>:</code> a colon separates class name from Actor.name - or Actor.name is used undecorated if it contains the class name. * <code>\"</code> double-quotes show actual Label or TextButton text, max 20 characters, prefixed directly with the class name. * <code>.</code> a dot separates parent from hit Actor: If the above alone does not yield a descriptive label, the parent (if any) is added as descriptive label per the rules above or as simple class name. * <code>(</code>..<code>)</code> after the above designates a sample from the children (the first nicely descriptive one), only if the parent won't add good recognition value.</p>"},{"location":"Developers/UI-development/#coordinate-scales","title":"Coordinate scales","text":"<p>The bottom and right edges of the screen get tiny tick marks, each 20 units in the Gdx stage coordinates, to help estimate paddings or sizes.</p>"},{"location":"Developers/Unique-replacement-process/","title":"Unique replacement process","text":"<p>Often we want to rephrase a Unique, or add a parameter in it that extends the use-case for that unique. </p> <p>However, we need to allow modders some time to replace the old unique with the new one.  This means there will be some overlap - usually around an \"entire minor version\", which is 20 versions, which is ~2.5 months. During this time, both the old and new uniques need to work, and after this time, we should be able to find the old unique and properly kill it.</p> <p>Here's how we go about it.</p> <ul> <li>Rename the old unique to \"Old\", including uniques (shift+f6)  <li>Create the new unique directly above the old one, using the old name</li> <li>Wherever the old unique is used add in the new one rather than replacing it.</li> <li>Add a @Deprecated annotation to the old unique, with the replacement text - this allows modders to auto-replace the old unique with the new one</li> <li>The deprecation level must be <code>DeprecationLevel.WARNING</code> - or do away with the deprecation level entirely since that's the default</li> <p>After the time has passed, we will</p> <ul> <li>Move the old unique with the deprecation annotation to the bery top of \"deprecated and removed\" section, so it's sorted by recency</li> <li>Remove all usages of the old unique from the code</li> <li>Change the deprecation level to ERROR (which means we can't reintroduce usages)</li> </ul>"},{"location":"Developers/Uniques/","title":"Uniques","text":""},{"location":"Developers/Uniques/#what-modders-need-to-know","title":"What Modders Need To Know","text":"<p>Objects in the game - terrains, units, buildings, improvements, etc - differ by their stats, but what makes them truly different mechanically are their special abilities, or as we call them - Uniques.</p> <p>Each game object can have any number of these Uniques.</p> <p>The different possible types of uniques are available here, with each unique having a string value, e.g. <code>\"Gain [amount] [stat/resource]\"</code></p> <p>These are unique types, because they are in fact templates for possible concrete uniques, where the parameters in square brackets are filled in with specific values - e.g. <code>\"Gain [20] [Gold]\"</code> Game objects should have concrete uniques (parameters filled in)</p> <p>Every parameter in square brackets, is defined by its type, a list of which is available here - each parameter type has its own text value, e.g. \"amount\" means an integer. That determines possible values that this parameter can contain, e.g. \"amount\" should only contain strings that can be serialized as integers.</p> <p>Concrete uniques that contain incorrect values (e.g. <code>\"Gain [three] [money]\"</code>) are warned against in the mod checker, and if they're serious enough, also when starting a new game with the mod</p> <p>Sometimes uniques are deprecated - Unciv provides autoupdating, meaning you only need to click a button to update the deprecated uniques in your mod!</p>"},{"location":"Developers/Uniques/#conditionals-and-modifiers","title":"Conditionals and Modifiers","text":"<p>Uniques can be modified to do certain things, using special Uniques that are shown in the uniques list within <code>&lt;these brackets&gt;</code>.</p> <p>This is done by adding these modifiers after the unique like so: <code>\"Gain [30] [Gold] &lt;after discovering [Steam Power]&gt;\"</code></p> <p>The most common type of modifier is a conditional - basically limiting the unique to only apply under certain conditions - so all modifiers are sometimes refered to as conditionals.</p> <p>Other more specialized types of modifiers exist:</p> <ul> <li>Triggerable uniques can get under what circumstances they activate</li> <li>Unit actions can get costs, side effects, and limited uses</li> </ul> <p>As you can see, these conditionals also can contain parameters, and these follow the same rules for parameters as the regular uniques.</p>"},{"location":"Developers/Uniques/#triggerable-uniques","title":"Triggerable Uniques","text":"<p>Most uniques are long-term effects - they apply as long as you have the object containing them (building, resource, tech, policy). Trigger uniques are different - they are one-time effects, but which may be triggered several times.</p> <p>Trigger uniques come in two flavors - civ-wide triggers and unit-wide triggers. Unit triggerables are only relevant in the context of a specific unit, so they can be attached to units, promotions or unit types.</p> <p>Any triggerable unique added to a unit which has unit action modifiers will be considered as a unit action. Unit actions can contain civ-wide effects as well.</p> <p>Trigger uniques specify their activation with trigger conditions. Like the triggers themselves, these come in two flavors - civ-wide conditions and unit-wide conditions. Trigger uniques with no trigger modifiers are activated upon construction (units, buildings, improvements) or discovery (techs, policies).  </p> <p>Events are a ruleset object that act as a sort of \"extended trigger\" - they are activated by the <code>\"Triggers a [event] event\"</code> unique, and they trigger other uniques depending on user choice.</p>"},{"location":"Developers/Uniques/#what-developers-need-to-know","title":"What Developers Need To Know","text":"<p>We parse the unique by comparing the string given by the modder minus square bracket contents, to the known list of uniques. If we find a match - Congrats, we set that as the unique type.</p> <p>When we check for uniques in the code, it's always for uniques of a specific type, so we can just check the 'unique type' we previously assigned</p> <p>We then take the parameters of that unique, which we also determined previously by scanning for all strings within square brackets, and use their values in determining the effect of the unique</p> <p>There is a LOT of caching involved everywhere to make this all as fast as possible, but you really don't need to worry about that, that's my job ;)</p>"},{"location":"Modders/Autoupdates/","title":"Autoupdates","text":"<p>Unciv contains built-in capabilities for packing images and autoupdating uniques.</p> <p>You can automate these updates by adding a GitHub Actions workflow to your repository.</p> <ul> <li>In your Github page go to \"actions\" tab</li> <li>Suggested for this repo &gt; Simple workflow &gt; \"Configure\"</li> <li>Copy the text of this file (\"copy raw file\") to the new file in your repo</li> <li>Change the file name to \"autoupdate.yml\" at the top</li> <li>\"Commit changes\" (green button, top-right) &gt; \"Commit changes\"</li> </ul> <p>On every commit, and once per day, it will:</p> <ul> <li>Try to shrink PNGs (this is lossless, the pixel data remains the same but the file takes less space)</li> <li>Try to autoupdate deprecated uniques</li> </ul> <p>If there are changes, this will create a PR to your repo - here's an example - which you can choose to accept</p> <p>If you see that the autoupdate isn't 100% - in which case talk to me and we'll sort it out \ud83d\ude42</p>"},{"location":"Modders/Autoupdates/#errors","title":"Errors","text":"<p>If you get a <code>remote: Permission to &lt;...&gt;.git denied to github-actions[bot].</code> You need to:</p> <ul> <li>Open Settings &gt; Actions &gt; General</li> <li>Under \"Workflow permissions\" select \"Read and write permissions\", \"Allow GitHub Actions to create and approve pull requests\"</li> </ul>"},{"location":"Modders/Creating-a-UI-skin/","title":"Creating a UI skin","text":"<p>You should read the Mods page first before proceeding</p> <p>In order to add a UI skin mod (yes, UI skins are just another type of mod), all you need to do is add your images under <code>Images/Skins/MyCoolSkinExample</code> and enable the mod as a permanent visual mod.</p> <p>The game will then recognize the skin, and allow you to pick it in the options menu.</p> <p>Just like tilesets, UI skins can be used to alter the appearance of Unciv. Please note that UI skins do not support custom icons and fonts and not every UI element can be customized yet too.</p> <p>We use so called 9.png (or Ninepatch) files for every skin image because UI elements need a way to be resized based on game window size and resolution. Ninepatch files can be created manually by adding black pixels around your custom images in a specific manner or by using Android Studio's Draw 9-patch tool or this tool by romannurik for example. You may also check if your favorite image creation tool supports nine patches itself to generate them more easily.</p> <p>A skin image can either be gray scale and later be colored in game by modifying the <code>tint</code> in the skinConfig or be colored directly in the image. When coloring the image directly it is important to set the tint of the UI element to white. Please note that tileable ninepatches and ninepatches with multiple stretch areas are not supported because of technical restrictions by libgdx.</p> <p>There are 6 basic shapes which can be placed inside the <code>Images/Skins/MyCoolSkinExample</code> folder:  - checkbox  - checkbox-pressed  - rectangleWithOutline  - roundedEdgeRectangle  - select-box  - select-box-pressed</p> <p>These shapes are used all over Unciv and can be replaced to make a lot of UI elements change appearance at once. To change just one specific element use the table below to create an image at the specified directory using the specified name inside <code>Images/Skins/MyCoolSkinExample</code>. See the image below for an example file structure. </p>"},{"location":"Modders/Creating-a-UI-skin/#limitations","title":"Limitations","text":"<ul> <li>UI elements which change color because they have multiple states can not be given multiple colors based on their state using tint</li> <li>When coloring the image directly, setting the tint of the UI element to white overwrites these states</li> <li>Tileable ninepatches and ninepatches with multiple stretch areas are not supported because of technical restrictions by libgdx</li> </ul>"},{"location":"Modders/Creating-a-UI-skin/#available-ui-elements","title":"Available UI elements","text":"Directory Name Default shape Image AnimatedMenu/ Button roundedEdgeRectangleMid CityScreen/ CityPickerTable roundedEdgeRectangle CityScreen/CitizenManagementTable/ AvoidCell null CityScreen/CitizenManagementTable/ FocusCell null CityScreen/CitizenManagementTable/ ResetCell null CityScreen/CityConstructionTable/ AvailableConstructionsTable null CityScreen/CityConstructionTable/ ConstructionsQueueTable null CityScreen/CityConstructionTable/ Header null CityScreen/CityConstructionTable/ PickConstructionButton null CityScreen/CityConstructionTable/ PickConstructionButtonSelected null CityScreen/CityConstructionTable/ QueueEntry null CityScreen/CityConstructionTable/ QueueEntrySelected null CityScreen/CityScreenTileTable/ Background null CityScreen/CityScreenTileTable/ InnerTable null CityScreen/CityStatsTable/ Background null CityScreen/CityStatsTable/ InnerTable null CityScreen/ConstructionInfoTable/ Background null CityScreen/ConstructionInfoTable/ SelectedConstructionTable null CivilopediaScreen/ EntryButton null DiplomacyScreen/ LeftSide null DiplomacyScreen/ RightSide null DiplomacyScreen/ SelectedCiv null General/ AnimatedMenu roundedEdgeRectangle General/ Border null General/ DisabledBox null General/ ExpanderTab null General/ HealthBar null General/ KeyCapturingButton roundedEdgeRectangleSmall General/ TabbedPager null General/ Tooltip roundedEdgeRectangle General/Popup/ Background null General/Popup/ InnerTable null LanguagePickerScreen/ LanguageTable null LoadGameScreen/ BottomTable null LoadGameScreen/ TopTable null MainMenuScreen/ Background null MainMenuScreen/ MenuButton roundedEdgeRectangle MainMenuScreen/ Version roundedEdgeRectangle MapEditor/MapEditorToolsDrawer/ Handle null ModManagementOptions/ ExpanderTab null ModManagementScreen/ BottomTable null ModManagementScreen/ TopTable null MultiplayerScreen/ BottomTable null MultiplayerScreen/ TopTable null NewGameScreen/ BottomTable null NewGameScreen/ GameOptionsTable null NewGameScreen/ MapOptionsTable null NewGameScreen/ PlayerPickerTable null NewGameScreen/ TopTable null NewGameScreen/NationTable/ Background null NewGameScreen/NationTable/ BorderTable null NewGameScreen/NationTable/ RightInnerTable null NewGameScreen/NationTable/ Title null NewGameScreen/PlayerPickerTable/ PlayerTable null OverviewScreen/DiplomacyOverviewTab/ CivTable null OverviewScreen/NotificationOverviewTable/ Notification roundedEdgeRectangle OverviewScreen/ReligionOverviewTab/ BeliefDescription null OverviewScreen/TradesOverviewTab/ OffersTable null OverviewScreen/UnitOverviewTab/ UnitSupplyTable null PlayerReadyScreen/ Background null PolicyScreen/ PolicyBranchAdoptButton roundedEdgeRectangleSmall PolicyScreen/ PolicyBranchAdoptButtonBorder roundedEdgeRectangleSmall PolicyScreen/ PolicyBranchBackground rectangleWithOutline PolicyScreen/ PolicyBranchBackgroundBorder rectangleWithOutline PolicyScreen/ PolicyBranchHeader rectangleWithOutline PolicyScreen/ PolicyBranchHeaderBorder rectangleWithOutline PolicyScreen/Colors/ BranchBGAdopted 50,45,5 PolicyScreen/Colors/ BranchBGCompleted 255,205,0 PolicyScreen/Colors/ BranchBGNotAdopted 5,45,65 PolicyScreen/Colors/ BranchHeaderBG 47,90,92 PolicyScreen/Colors/ BranchLabelAdopted 150,70,40 PolicyScreen/Colors/ BranchLabelNotPickable 0xffffff7f PolicyScreen/Colors/ BranchLabelPickable WHITE PolicyScreen/Colors/ ButtonBGAdopted 1,17,19 PolicyScreen/Colors/ ButtonBGAdoptedSelected 1,17,19 PolicyScreen/Colors/ ButtonBGNotPickable 20,20,20 PolicyScreen/Colors/ ButtonBGNotPickableSelected 20,20,20 PolicyScreen/Colors/ ButtonBGPickable 32,46,64 PolicyScreen/Colors/ ButtonBGPickableSelected 37,87,82 PolicyScreen/Colors/ ButtonIconAdopted GOLD PolicyScreen/Colors/ ButtonIconAdoptedSelected GOLD PolicyScreen/Colors/ ButtonIconNotPickable 0xffffff33 PolicyScreen/Colors/ ButtonIconNotPickableSelected 0xffffff33 PolicyScreen/Colors/ ButtonIconPickable WHITE PolicyScreen/Colors/ ButtonIconPickableSelected WHITE PromotionScreen/ PromotionButton roundedEdgeRectangleMid PromotionScreen/ PromotionButtonBorder roundedEdgeRectangleMidBorder TechPickerScreen/ Background null TechPickerScreen/ BottomTable null TechPickerScreen/ CurrentTechColor 72, 147, 175 TechPickerScreen/ QueuedTechColor 72, 462, 43*2 TechPickerScreen/ ResearchableTechColor 28, 170, 0 TechPickerScreen/ ResearchedFutureTechColor 127, 50, 0 TechPickerScreen/ ResearchedTechColor 255, 215, 0 TechPickerScreen/ TechButtonIconsOutline roundedEdgeRectangleSmall VictoryScreen/ CivGroup roundedEdgeRectangle WorldScreen/ AirUnitTable null WorldScreen/ BattleTable null WorldScreen/ Notification roundedEdgeRectangle WorldScreen/ PickTechButton roundedEdgeRectangle WorldScreen/ TileInfoTable null WorldScreen/ TutorialTaskTable null WorldScreen/ UnitTable roundedEdgeRectangleMid WorldScreen/CityButton/ AirUnitTable roundedEdgeRectangleSmall WorldScreen/CityButton/ AirUnitTableBorder roundedEdgeRectangleSmall WorldScreen/CityButton/ DefenceTable roundedTopEdgeRectangleSmall WorldScreen/CityButton/ DefenceTableBorder roundedTopEdgeRectangleSmallBorder WorldScreen/CityButton/ IconTable roundedEdgeRectangleMid WorldScreen/CityButton/ IconTableBorder roundedEdgeRectangleMidBorder WorldScreen/CityButton/ InfluenceBar null WorldScreen/Minimap/ Background null WorldScreen/Minimap/ Border null WorldScreen/NextTurn/ ProgressBar null WorldScreen/NextTurn/ ProgressColor FOREST WorldScreen/TopBar/ LeftAttachment roundedEdgeRectangle WorldScreen/TopBar/ ResourceTable null WorldScreen/TopBar/ RightAttachment roundedEdgeRectangle WorldScreen/TopBar/ StatsTable null WorldScreenMusicPopup/TrackList/ Down null WorldScreenMusicPopup/TrackList/ Over null WorldScreenMusicPopup/TrackList/ Up null"},{"location":"Modders/Creating-a-UI-skin/#skinconfig","title":"SkinConfig","text":"<p>The skinConfig is similar to the tilesetConfig and can be used to define different colors and shapes for unciv to use.</p> <p>To create a config for your skin you just need to create a new .json file under <code>jsons/Skins/</code>. Just create a .txt file and rename it to MyCoolSkinExample.json. You only have to add things if you want to change them. Else the default values will be used.</p> <p>This is an example of such a config file that will be explain below:</p> <pre><code>{\n    \"baseColor\": {\"r\":1,\"g\":0,\"b\":0,\"a\":1},\n    \"defaultVariantTint\": {\"r\":1,\"g\":1,\"b\":1,\"a\":1},\n    \"skinVariants\": {\n        \"MainMenuScreen/MenuButton\": {\n            \"image\": \"MyCoolNewDesign\",\n            \"foregroundColor\": {\"r\": 0, \"g\": 0, \"b\": 1, \"a\": 1},\n            \"iconColor\": {\"r\": 0, \"g\": 1, \"b\": 0, \"a\": 1}\n        },\n        \"TechPickerScreen/TechButton\": {\n            \"image\": \"MyCoolNewDesign\",\n            \"alpha\": 0.7\n        },\n        \"WorldScreen/TopBar/ResourceTable\": {\n            \"alpha\": 0.8\n        },\n        \"WorldScreen/UnitTable\": {\n            \"tint\": {\"r\": 1, \"g\": 0, \"b\": 0},\n            \"image\": \"WorldScreen/TopBar/ResourceTable\",\n            \"alpha\": 0.4\n        },\n        \"WorldScreen/Minimap/Background\": {\n            \"tint\": {\"r\": 0.2, \"g\": 0.4, \"b\": 0.45, \"a\": 1}\n        }\n    }\n}\n</code></pre>"},{"location":"Modders/Creating-a-UI-skin/#basecolor","title":"baseColor","text":"<p>A color defined with normalized RGBA values. Default value: <code>{\"r\": 0, \"g\": 0.251, \"b\": 0.522, \"a\": 0.749}</code></p> <p>Defines the color unciv uses in most ui elements as default</p>"},{"location":"Modders/Creating-a-UI-skin/#fallbackskin","title":"fallbackSkin","text":"<p>A string. Default value: \"Minimal\".</p> <p>The name of another skin to use as a fallback if an image is not found or not specified in this skin. Set to null to disable fallback.</p>"},{"location":"Modders/Creating-a-UI-skin/#defaultvarianttint","title":"defaultVariantTint","text":"<p>A color defined with normalized RGBA values. Default value: null</p> <p>The tint all skinVariants should use if not explicitly specified in a skinVariant. If you mostly use colored images set this to white (<code>{\"r\": 1, \"g\": 1, \"b\": 1, \"a\": 1}</code>) to get the correct colors.</p>"},{"location":"Modders/Creating-a-UI-skin/#skinvariants","title":"skinVariants","text":"<p>A dictionary mapping string to a SkinElement. Default value: empty</p> <p>These variants can be used to define a different image, tint and/or alpha for a specified UI element. The string used to identify the UI element can be taken from the table above by appending the name to the directory. <pre><code>| Directory             | Name          |\n|-----------------------|---------------|\n| WorldScreen/          | Notification  | -&gt; WorldScreen/Notification\n| WorldScreen/TopBar/   | StatsTable    | -&gt; WorldScreen/TopBar/StatsTable\n</code></pre></p>"},{"location":"Modders/Creating-a-UI-skin/#image","title":"image","text":"<p>A path to an image. The file is expected to be located alongside the 6 basic shapes inside the <code>Images/Skins/MyCoolSkinExample</code> folder if just a name like <code>MyCoolNewDesign</code> is given. The image path can also be another ui element like <code>WorldScreen/TopBar/ResourceTable</code> so images can be reused by other elements.</p>"},{"location":"Modders/Creating-a-UI-skin/#tint","title":"tint","text":"<p>A color defined with normalized RGBA values. Default value: null</p> <p>The tint this UI element should get. Is applied as a tint on top of the image. This means that if the image is colored and the tint is not white the tint color will merge with the image color and not override it.</p>"},{"location":"Modders/Creating-a-UI-skin/#alpha","title":"alpha","text":"<p>A float value. Default value: null</p> <p>The alpha this UI element should have. Overwrites the alpha value of tint if specified.</p>"},{"location":"Modders/Creating-a-UI-skin/#foregroundcolor","title":"foregroundColor","text":"<p>A color defined with normalized RGBA values. Default value: null</p> <p>The color this UI element should use for its font and icons. To color icon and font differently use the <code>iconColor</code> in addition to this.</p>"},{"location":"Modders/Creating-a-UI-skin/#iconcolor","title":"iconColor","text":"<p>A color defined with normalized RGBA values. Default value: null</p> <p>The color this UI element should use for its icons. Overrides the <code>foregroundColor</code> for icons if specified.</p>"},{"location":"Modders/Creating-a-custom-tileset/","title":"Creating a custom tileset","text":"<p>You should read the Mods page first before proceeding</p> <p>In order to add a tileset mod (yes, tilesets are just another type of mod), all you need to do is add your images under Images/Tilesets/MyCoolTilesetExample and enable the mod as a permanent visual mod - the game will recognize the tileset, and allow you to pick it in the options menu.</p> <p>Let's look at the example \"Grassland+Jungle+Dyes+Trading post\" to learn how the game decides which images it should use for this tile:</p> <ol> <li>When there is a rule variant entry in the tileset config for this tile we will use the entry.</li> <li>Else if there is an image called \"Grassland+Jungle+Dyes+Trading post\" we will use it instead.</li> <li>Otherwise, we will check if there is an image called \"Grassland+Jungle\" (BaseTerrain+Terrainfeatures) and \"Dyes+Trading post\" (Resource+Improvement) and use the remainings of it. Let's say you made an image called \"Grassland+Jungle\" but none called \"Dyes+Trading post\". In the end, we will then use the images \"Grassland+Jungle\", \"Dyes\" and \"Trading post\".</li> </ol> <p>All these images can also use era-dependant variants if you want to change the appearance of, let's say, \"Trading post\" throughout the game. Just create images and add the suffix \"-[era name]\". E.g. \"Trading post-Classical era\", \"Trading post-Industrial era\", etc.</p> <p>It is advised to use the layered approach (1 and 3) often because it comes with a few advantages. Mainly:</p> <ul> <li>Decreased filesize (on disk, for downloads)</li> <li>Easier support for new terrains, improvements, resources, and for changing existing tiles</li> </ul> <p>You should keep in mind that the default rendering order is: BaseTerrain, TerrainFeatures, Resource, Improvement.</p>"},{"location":"Modders/Creating-a-custom-tileset/#tileset-config","title":"Tileset config","text":"<p>This is where tileset configs shine. You can use these to alter the way Unicv renders tiles.</p> <p>To create a config for your tileset you just need to create a new .json file under jsons/Tilesets/. Just create a .txt file and rename it to MyCoolTilesetExample.json. You only have to add things if you want to change them. Else the default values will be used.</p> <p>This is an example of such a config file that will be explain below:</p> <pre><code>{\n    \"useColorAsBaseTerrain\": \"false\",\n    \"useSummaryImages\": \"true\",\n    \"unexploredTileColor\": {\"r\":1,\"g\":1,\"b\":1,\"a\":1},\n    \"fogOfWarColor\": {\"r\":1,\"g\":0,\"b\":0,\"a\":1},\n    \"fallbackTileSet\": null,\n    \"tileScale\":0.9,\n    \"tileScales\": {\n        \"City center\":1.2,\n        \"Citadel\":1.5\n    },\n    \"ruleVariants\": {\n        \"Grassland+Forest\": [\"Grassland\",\"ForestForGrassland\"],\n        \"Grassland+Jungle+Dyes+Trading post\": [\"Grassland\",\"JungleForGrasslandBack\",\"Dyes+Trading post\",\"JungleForGrasslandFront\"]\n    }\n}\n</code></pre>"},{"location":"Modders/Creating-a-custom-tileset/#usecolorasbaseterrain","title":"useColorAsBaseTerrain","text":"<p>A boolean value (\"true\" or \"false\"). Default value: \"false\"</p> <p>If true, an additional \"Hexagon\" image is placed below each tile and colored in the corresponding BaseTerrain color. This removes the necessity to add individual BaseTerrain images. This is how the \"Minimal\" tileset works.</p>"},{"location":"Modders/Creating-a-custom-tileset/#usesummaryimages","title":"useSummaryImages","text":"<p>A boolean value (\"true\" or \"false\"). Default value: \"false\"</p> <p>If true, summary images are used for specific groups of images instead of using individual tile images. The summary images must be placed in the same folder as every other tile image. Summary images used:</p> Image group Summary image Natural wonders \"NaturalWonder\""},{"location":"Modders/Creating-a-custom-tileset/#unexploredtilecolor","title":"unexploredTileColor","text":"<p>A color defined with normalized RGBA values. Default value: \"{\"r\":0.24705882, \"g\":0.24705882, \"b\":0.24705882, \"a\":1}\" (DarkGray)</p> <p>Defines the color of the unexplored tiles.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fogofwarcolor","title":"fogOfWarColor","text":"<p>A color defined with normalized RGBA values. Default value: \"{\"r\":0, \"g\":0, \"b\":0, \"a\":1}\" (Black)</p> <p>Defines the color of the fog of war. The color gets approximated by 60% to allow the colors of the images below to shine through.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fallbacktileset","title":"fallbackTileSet","text":"<p>A string value. Default value: \"FantasyHex\"</p> <p>The name of another tileset whose images should be used if this tileset is missing images. Can be set to null to disable the the fallback tileset</p>"},{"location":"Modders/Creating-a-custom-tileset/#tilescale","title":"tileScale","text":"<p>A float value. Default value: 1.0</p> <p>The scale of all tiles. Can be used to increase or decrease the size of every tile. Is being used by the tileset mod 5Hex (made by ravignir) to fake shadows.</p>"},{"location":"Modders/Creating-a-custom-tileset/#tilescales","title":"tileScales","text":"<p>A dictionary mapping string to a float value. Default value: empty</p> <p>Used by the \"Minimal\" tileset to scale all its tiles except the base terrain down. Each entry overrides the tileScale value for the specified tile.</p>"},{"location":"Modders/Creating-a-custom-tileset/#rulevariants","title":"ruleVariants","text":"<p>A dictionary mapping string to a list of strings. Default value: empty</p> <p>The ruleVariants are the most powerful part of the tileset config. With this, you can define, for a specific tile, which images and in which order these images should be used.</p> <p>An example is given in the code above. For the tile \"Grassland+Jungle+Dyes+Trading post\" we then use the images \"Grassland\", \"JungleForGrasslandBack\", \"Dyes+Trading post\" and \"JungleForGrasslandFront\" in that order.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fog-and-unexplored-tiles","title":"Fog and unexplored tiles","text":"<p>Unciv distinguishes between \"unexplored\" tiles, which are tiles the Civ has never seen, and \"not visible\" tiles, which are those that were seen once but now are not.</p> <p>Not visible tiles are grayed out by design, and on top of that have the <code>CrosshatchHexagon.png</code> image applied to them.</p> <p>Unexplored tiles display the <code>UnexploredTile.png</code> image, on top of which <code>CrosshatchHexagon.png</code> is applied.</p> <p>You can set the CrosshatchHexagon to be functionally invisible by replacing it with a 1px by 1px invisible image.</p>"},{"location":"Modders/Creating-a-custom-tileset/#unit-images","title":"Unit images","text":"<p>Unit images can be changed according to civ-specific styles (if a mod specifies a \"style\" variable for each civilization) and according to the owning civ's current era. Unciv attempts to load the unit images in the following order (where unitName is the unit name given in Units.json, styleName is optionally specified in Nations.json, and eraName is the era name given in Eras.json (including \" era\")).</p> <ol> <li>unitName-styleName-eraName (example: \"Archer-customStyle1-Classical era.png\")</li> <li>unitName-eraName (example: \"Archer-Classical era.png\")</li> <li>unitName-styleName (example: \"Archer-customStyle1.png\")</li> <li>unitName (example: \"Archer.png\")</li> </ol> <p>Era-specific sprites do not need to be specified for each era, only on eras where the sprites change. If a modder wants a Great General unit to change sprites starting in the Modern era, they only need to create a \"Great General-Modern era.png\" image. The Great General unit would use the default \"Great General.png\" sprite for all eras up to the Modern era then the Modern era sprite for the Modern era and all eras after unless there is a later era sprite for this unit.</p>"},{"location":"Modders/Creating-a-custom-tileset/#nation-coloured-units","title":"Nation-coloured units","text":"<p>Unciv can colour units according to the civilization that owns them. [PR3231]</p> <p>This is used by providing multiple images per unit, each representing a coloured layer. The image suffixed with \"-1\" will be tinted to the civilization's inner colour, and the image suffixed with \"-2\" will be tinted to the civilization's outer colour. For example:</p> Image Description Colour Archer.png Base image Untinted Archer-1.png Colour layer Nation inner colour Archer-2.png Colour layer Nation outer colour <p>The Civ Army Color Style Sheet mod by @AdityaMH and the 5Hex Tileset by @ravignir are very good practical examples of how this can be used.</p>"},{"location":"Modders/Creating-a-custom-tileset/#attack-animations","title":"Attack animations","text":"<p>These are small animations that play on units when they receive damage.</p> <p>They can be for unit types (Archery, Seige, Cavalry) or for specific unit names</p> <p>The files should be in the format of <code>&lt;unit type/unit name&gt;-attack-&lt;frame number&gt;</code>. For example, a 3 frame animation for Sword units would have the files <code>Sword-attack-1.png</code>, <code>Sword-attack-3.png</code>, <code>Sword-attack-3.png</code></p>"},{"location":"Modders/Creating-a-custom-tileset/#edge-images","title":"Edge images","text":"<p>You can add additional images that will be drawn only when a tile is adjacent to another tile in a specific direction.</p> <p>The images should be placed in the <code>Images/Tilesets/&lt;tileset name&gt;/Edges</code> folder, rather than in <code>/Tiles</code>.</p> <p>The name of the tile should be <code>&lt;tile name&gt;-&lt;origin tile filter&gt;-&lt;destination tile filter&gt;-&lt;neighbor direction&gt;.png</code>, where direction of one of:</p> <ul> <li>Bottom</li> <li>BottomLeft</li> <li>BottomRight</li> <li>Top</li> <li>TopLeft</li> <li>TopRight</li> </ul> <p>And where the tile filter is one of: - Terrain name - Feature name - Terrain type (Land/Water)</p> <p>For example: <code>Cliff-Hills-Coast-Top.png</code></p> <p>The initial name has no bearing on the image used, it is just a way to group images together.</p>"},{"location":"Modders/Images-and-Audio/","title":"Images and Audio","text":""},{"location":"Modders/Images-and-Audio/#images-and-the-texture-atlas","title":"Images and the texture atlas","text":"<p>Images need to be 'packed' before the game can use them. This preparation step needs to happen only once (as long as the original graphics are not changed). The result one ore more a pairs of files - a texture in png format and a corresponding atlas file. If you have a single <code>Images</code>folder, the default such pair is named <code>game.png</code>/<code>game.atlas</code>. For your players, the individual images aren't important - only the combined images actually register to the game, so you need to include them in your repository and keep them up to date. We still recommend including the originals in a mod, so other developers running from source can access them. With original images included, you can use a development environment using git, have it linked to your repository, while using a symlink to allow Unciv to see the mod - and pack your atlas for you on every launch. If you're developing your mod on an Android version of Unciv (not recommended!) you won't be able to generate these packed files directly.</p>"},{"location":"Modders/Images-and-Audio/#ways-to-pack-texture-atlases","title":"Ways to pack texture atlases","text":"<ul> <li>Texture atlases CANNOT BE PACKED on Android (technical reason: TexturePacker uses <code>java.awt</code> to do heavy lifting, which is unavailable on Android 0_0)</li> <li>Launch the desktop version with your mod (your mod's main folder is a subfolder of the game's \"mods\" folder, or symlinked there). This uses the packing methods documented here.</li> <li>You can ask someone in the Discord server to help you out.</li> <li>You can use external tools, e.g. gdx-texture-packer-gui. Utmost care needs to be taken that the files can be discovered by Unciv and internal relative paths are correct.</li> <li>You can add a copy of this workflow to your mod to automatically pack the atlas on every commit to your repository. It should be placed in the same place (<code>.github/workflows/autoupdate.yml</code>) as the example.</li> </ul>"},{"location":"Modders/Images-and-Audio/#rendering-performance","title":"Rendering performance","text":""},{"location":"Modders/Images-and-Audio/#multiple-texture-atlases","title":"Multiple texture atlases","text":"<p>If your mod has lots of images (or large ones), the textures might 'spill' into additional texture files - 2048x2048 is the limit for a single texture pack. You will see a <code>game2.png</code>, possibly a <code>game3.png</code> or more appear. This is not good for performance, which is why the base game controls which kinds of images go together into one texture(+atlas). This works for mods, too: Create not only one Images folder, but several, the additional ones named \"Images.xyz\", where xyz will become the filename of the additional texture file (So don't use both Images and Images.game - those will clash). Look at the Unciv base game to get a better idea how that works. To minimize texture swaps, try to group them by the situation where in the game they are needed. You can distibute by folder, but having the same subfolders under several \"Images.xyz\" and distributing the images between them will also work.</p> <p>For an example, you can see the Alpha Frontier mod.</p> <p>A file <code>Atlases.json</code> (uppercase 'A') in the mod root (not in <code>Images</code> or in <code>jsons</code>) controls which atlases to load, which in turn control which texture (<code>.png</code>) files are read. This file is automatically created by the built-in packer. Only the <code>game.atlas</code> file is read by default for backward compatibility. If you use external tools and multiple atlases, you will need to maintain this file yourself - it is a simple json array of strings, each a file name without the <code>.atlas</code> extension (saved as UTF-8 without byte order mark).</p>"},{"location":"Modders/Images-and-Audio/#smaller-icons","title":"Smaller icons","text":"<p>A large number of atlases may be the result of having very large icons. We find that 100x100 pixels is good enough for most icons.</p>"},{"location":"Modders/Images-and-Audio/#circle-icons","title":"Circle icons","text":"<p>To allow for faster rendering for icons, which has a major performance effect, you can copy the \"OtherIcons/circle.png\" to:</p> <ul> <li>\"ImprovementIcons/Circle.png\" for improvements</li> <li>\"ResourceIcons/Circle.png\" for resources</li> <li>\"TechIcons/Circle.png\" for technologies</li> <li>\"ConstructionIcons/Circle.png\" for buildings and units</li> <li>\"StatIcons/Circle.png\" for stats</li> </ul>"},{"location":"Modders/Images-and-Audio/#texture-packer-settings","title":"Texture packer settings","text":"<p>The texture packers built into Unciv will look for a <code>TexturePacker.settings</code> file in each <code>Images</code> directory (not under <code>jsons</code>). With this file you can tune the packer - e.g. control pixel interpolation filters. It is a json of a Gdx TexturePacker.Settings instance. The default settings are as shown in the Gdx documentation linked above if you do supply a settings file, but without such a file, some fields have different defaults. To get these changed defaults, start with the following as base for your custom <code>TexturePacker.settings</code> file:</p> <p><pre><code>{\n    \"fast\": true,\n    \"combineSubdirectories\": true,\n    \"maxWidth\": 2048,\n    \"maxHeight\": 2048,\n    \"paddingX\": 8,\n    \"paddingY\": 8,\n    \"duplicatePadding\": true,\n    \"filterMin\": \"MipMapLinearLinear\",\n    \"filterMag\": \"MipMapLinearLinear\",\n}\n</code></pre> (change \"filterMag\" to \"Linear\" if your atlas name will end in \"Icons\".)</p>"},{"location":"Modders/Images-and-Audio/#texture-atlas-encoding","title":"Texture atlas encoding","text":"<p>Due to certain circumstances, please make sure names and paths that will be mapped in an atlas use only ascii. Not all parts of the loader enforce strict UTF-8 usage, sorry. Symptoms if you fail to heed this: mod works on a Chinese Windows box but not on a western one or vice-versa, or mod works on a Chinese Windows box but not a Chinese Linux box or vice-versa, or mod works on a Chinese Windows box with default settings but not on the same box with \"Use unicode UTF-8 for worldwide language support\" turned on. This does not technically apply to the atlas name itself when multiple atlases are used (the xyz part in \"Images.xyz\"), but we nevertheless recommend the same rule for consistency.</p>"},{"location":"Modders/Images-and-Audio/#permanent-audiovisual-mods","title":"Permanent audiovisual mods","text":"<p>The following chapters describe possibilities that will work while a mod is active. It is either selected for the current game (during new game creation, cannot be changed after that for saved games), meaning all its rules and resources will be used. Or it is marked as 'Permanent audiovisual mod' in the mod manager (you must select it in the 'installed' column to get the checkbox). In that case only graphics and audio will be active, the rule changes will be ignored (if it contains any) unless the first way is also used. Note that this feature includes graphics or sounds from the selected mod in all games, even those started before installing the mod. Repeat: In case of a mod bringing both changed rules and audiovisuals, the 'permanent' feature will include only the media on all games, to use the rules you will still need to select the mod for a new game.</p> <p>Note that the Mod author can (and often should) control whether the checkbox appears using ModOptions uniques.</p>"},{"location":"Modders/Images-and-Audio/#override-built-in-graphics","title":"Override built-in graphics","text":"<p>If a mod supplies an image with the same name and path as one included in the base game (and its atlas is up to date), and the mod is active, the mod's graphics will be used instead of the built-in one.</p> <p>For example, if you include a file named \"Images/OtherIcons/Link.png\" in your mod, you will be overriding the little chain links icon denoting linked lines in Civilopedia. The first part of the path is not relevant for overriding, it controls which of a set of atlas files will carry the image, but for selection in the game only the rest of the path is relevant. So, to override \"Images.Tech/TechIcons/Archery.png\" you could place your image as \"Images/TechIcons/Archery.png\" and it would work because the \"TechIcons/Archery\" part is the key.</p> <p>Please note, as for adding items, your graphics should keep the size and color choices of the original, or the result may be surprising, e.g. when the game tries to tint such an image.</p>"},{"location":"Modders/Images-and-Audio/#supply-additional-graphics","title":"Supply additional graphics","text":"<p>You will need to supply the graphics for new elements - a new unit needs its icon just as a new nation does. The rules are:</p> <ul> <li>The path and name of the image file need to conform to the rule: <code>Image[.AtlasName]/Type-specific/Objectname.png</code> (Type-specific means \"TechIcons\" for a Technology, \"NationIcons\" for a Nation and so on. See vanilla game folders. Objectname is the exact name as defined in json, before translation.)</li> <li>All path parts are case sensitive.</li> <li>Unit Pixel sprites and Tilesets follow special rules.</li> <li>If <code>UnitIcons/&lt;UnitName&gt;.png</code> does not exist, we fall back to <code>UnitTypeIcons/&lt;UnitType&gt;.png</code> - this allows setting a single image for an entire type of units without fiddling with each one </li> <li>Promotions can be named \"<code>[Unitname] ability</code>\". In such a case, if <code>UnitIcons/Unitname.png</code> exists it will fall back to that unit icon when <code>UnitPromotionIcons/Unitname ability.png</code> is missing.</li> <li>Promotions can be named \"Something I\" (or \" II\" or \" III\"). The suffix will be removed and painted as little stars, only the base <code>UnitPromotionIcons/Something.png</code> will be loaded.</li> <li>The special rules for promotions can be combined, e.g. \"<code>[Warrior] ability III</code>\" will fall back to the Warrior unit icon and paint 3 Stars on it.</li> </ul> <p>Additionally, there there are some kinds of images where the game has display capability but does not supply graphics itself, as described in the next paragraphs:</p>"},{"location":"Modders/Images-and-Audio/#adding-custom-fonts","title":"Adding custom Fonts","text":"<p>You can add custom <code>.ttf</code> fonts into the game: place <code>.ttf</code> file inside of <code>/fonts/</code> directory of your mod. The font you have added will be visible and choosable in <code>Options-Advanced</code> tab at the top of font list as <code>&lt;fontname&gt; (&lt;modname&gt;)</code>.</p> <p>All fonts are rendered by default at 50 pixel size and rescaled later for the game's needs. Currently fonts are NOT mipmapped on minification.</p>"},{"location":"Modders/Images-and-Audio/#overriding-special-characters","title":"Overriding special characters","text":"<p>The textures in the EmojiIcons subfolder and some others are mapped into the font at specific codepoints. They are used by the game, can be used in any text of a mod, and can be overridden by mod textures. Additionally, some code points are normally provided by the chosen system font, but have EmojiIcons names that will override the font glyph if a mod supplies them (marked 'optional' in the table below). Note textures provided for such codepoints do respect aspect ratio, they do not need to be square like many built-in icons are!</p> Symbol Codepoint Unicode name Texture path Optional \u26cf U+26CF pick EmojiIcons/Automate \u266a U+266A eighth note EmojiIcons/Culture \u2620 U+2620 skull and crossbones EmojiIcons/Death \u262e U+262E peace symbol EmojiIcons/Faith \u2042 U+2042 asterism EmojiIcons/Food \u00a4 U+00A4 currency sign EmojiIcons/Gold \u266c U+266C sixteenth note EmojiIcons/Great Artist \u2692 U+2692 hammer EmojiIcons/Great Engineer \u26e4 U+26E4 pentagram EmojiIcons/Great General \u2696 U+2696 scale EmojiIcons/Great Merchant \u269b U+269B atom EmojiIcons/Great Scientist \u2323 U+2323 smile EmojiIcons/Happiness \u221e U+221E infinity EmojiIcons/Infinity * \u2699 U+2699 gear EmojiIcons/Production \u237e U+237E bell symbol EmojiIcons/Science \uffea U+FFEA halfwidth upwards arrow EmojiIcons/SortedAscending * \u25c9 U+25C9 fisheye EmojiIcons/SortedByStatus * \u231a U+231A watch EmojiIcons/SortedByTime * \uffec U+FFEC halfwidth upwards arrow EmojiIcons/SortedDescending * \u272f U+272F pinwheel star EmojiIcons/Star * \u23f3 U+23F3 hourglass EmojiIcons/Turn \u2170 U+2170 small roman numeral one MayaCalendar/0 \u2171 U+2171 small roman numeral two MayaCalendar/1 \u2172 U+2172 small roman numeral three MayaCalendar/2 \u2173 U+2173 small roman numeral four MayaCalendar/3 \u2174 U+2174 small roman numeral five MayaCalendar/4 \u2175 U+2175 small roman numeral six MayaCalendar/5 \u2176 U+2176 small roman numeral seven MayaCalendar/6 \u2177 U+2177 small roman numeral eight MayaCalendar/7 \u2178 U+2178 small roman numeral nine MayaCalendar/8 \u2179 U+2179 small roman numeral ten MayaCalendar/9 \u217a U+217A small roman numeral eleven MayaCalendar/10 \u217b U+217B small roman numeral twelve MayaCalendar/11 \u217c U+217C small roman numeral fifty MayaCalendar/12 \u217d U+217D small roman numeral one hundred MayaCalendar/13 \u217e U+217E small roman numeral five hundred MayaCalendar/14 \u217f U+217F small roman numeral one thousand MayaCalendar/15 \u2180 U+2180 roman numeral one thousand cd MayaCalendar/16 \u2181 U+2181 roman numeral five thousand MayaCalendar/17 \u2182 U+2182 roman numeral ten thousand MayaCalendar/18 \u2183 U+2183 roman numeral reversed one hundred MayaCalendar/19 \u0dba U+0DBA sinhala letter yayanna MayaCalendar/Baktun \u0db9 U+0DB9 sinhala letter amba bayanna MayaCalendar/Katun \u0db8 U+0DB8 sinhala letter mayanna MayaCalendar/Tun \u27a1 U+27A1 black rightwards arrow StatIcons/Movement \u2026 U+2026 horizontal ellipsis StatIcons/Range \u2021 U+2021 double dagger StatIcons/RangedStrength \u2020 U+2020 dagger StatIcons/Strength"},{"location":"Modders/Images-and-Audio/#adding-wonder-splash-screens","title":"Adding Wonder Splash Screens","text":"<p>You can add wonder images to mods and they'll be displayed instead of the standard icon when a wonder is finished. The image needs to be a .png and 2:1 ratio so for example 200x100 px.</p> <p>Add the images to <code>/Images/WonderImages/</code>. They need to be named according to the name field in <code>Buildings.json</code>, so for example \"Temple of Artemis.png\" or \"Stonehenge.png\"</p> <p>Remember, to be compatible with mobile devices, a fresh atlas needs to be generated including these.</p>"},{"location":"Modders/Images-and-Audio/#adding-leader-portraits","title":"Adding Leader Portraits","text":"<p>The base game comes without Leader Portraits, but is able to display them in greetings, Civilopedia, diplomacy screens, or the nation picker. A mod can supply these, by adding their images to <code>/Images/LeaderIcons/</code>. The file name must correspond exactly with the leader name of a nation as defined in Nations.json, or they will be ignored.</p> <p>These work best if they are square, between 100x100 and 256x256 pixels, and include some transparent border within that area.</p> <p>For example, here is mod showing how to add leader portraits, which can complement the base game.</p>"},{"location":"Modders/Images-and-Audio/#adding-portraits","title":"Adding Portraits","text":"<p>The base game uses flat icons, surrounded with colored circles as backgrounds (e.g. for units to fit the civilization's flag colors), to denote entities such as: units, buildings, techs, resources, improvements, religions, promotions, uniques, unit actions and nations in the UI. A mod can supply \"Portraits\" - static images that will remain uncolored - by adding images to <code>/Images/&lt;entityType&gt;Portraits/</code> (e.g. <code>/Images/BuildingPortraits/</code>, <code>/Images/ResourcePortraits/</code>, etc), which will be used in all UI elements (except for unit icons in the world map). The file name must correspond exactly with the unit/building/tech/resource/etc name  defined in corresponding JSONs (e.g. Units.json, Buildings.json, TileResources.json, etc) or have the same name as the file they suppose to replace, or they will be ignored.</p> <p>If mod supplies '/Images/Portraits/Background.png' images, they will be used as a background for corresponding portraits instead of default circle. Portraits and backgrounds work best if they are full RGB square, between 100x100 and 256x256 pixels, and include some transparent border within that area. <p>For example, here is mod showing how to add custom portraits, which can complement the base game.</p> <p>Available <code>&lt;entityType&gt;Portraits/</code> include:</p> <ul> <li>UnitPortraits</li> <li>BuildingPortraits</li> <li>TechPortraits</li> <li>ResourcePortraits</li> <li>ImprovementPortraits</li> <li>UnitPromotionPortraits</li> <li>UniquePortraits</li> <li>NationPortraits</li> <li>ReligionPortraits</li> <li>UnitActionPortraits</li> </ul>"},{"location":"Modders/Images-and-Audio/#adding-icons-for-unit-types","title":"Adding icons for Unit Types","text":"<p>The Unit Types as defined in UnitTypes.json have no icons in the base game, but Civilopedia can decorate their entries if you supply images named 'Images/UnitTypeIcons/.png'. (while you're at it, you may override the default icon for the Unit Type category header - it's 'UnitTypes.png' in the same folder, or the icons used for the movement domains - 'DomainLand', 'DomainWater', 'DomainAir')"},{"location":"Modders/Images-and-Audio/#adding-icons-for-beliefs","title":"Adding icons for Beliefs","text":"<p>The individual Beliefs - as opposed to Belief types, as defined in Beliefs.json have no icons in the base game, but Civilopedia can decorate their entries if you supply images named 'Images/ReligionIcons/.png'. Civilopedia falls back to the icon for the Belief type - as you can see in the base game, but individual icons have precedence if they exist."},{"location":"Modders/Images-and-Audio/#adding-victory-illustrations","title":"Adding Victory illustrations","text":"<p>You can enable pictures for each of the Victories, illustrating their progress. That could be a Spaceship under construction, showing the parts you've added, or cultural progress as you complete Policy branches. They will be shown on a new tab of the Victory Screen.</p> <p>For this, you need to create a number of images. In the following, <code>&lt;&gt;</code> denote names as they appear in VictoryTypes.json, untranslated, and these file names (like any other in Unciv) are case-sensitive. All files are optional, except Background as noted:</p> <ul> <li><code>VictoryIllustrations/&lt;name&gt;/Background.png</code> - this determines overall dimensions, the others must not exceed its size and should ideally have identical size. Mandatory, if this file is missing, no illustrations will be shown for this Victory Type.</li> <li><code>VictoryIllustrations/&lt;name&gt;/Won.png</code> - shown if you (the viewing player) won this Victory.</li> <li><code>VictoryIllustrations/&lt;name&gt;/Lost.png</code> - shown if a competitor won this Victory - or you have completed this Victory, but have won a different one before.</li> <li><code>VictoryIllustrations/&lt;name&gt;/&lt;milestone&gt;.png</code> - One image for each entry in the <code>milestones</code> field without an <code>[amount]</code>, name taken verbatim but without square brackets, spaces preserved.</li> <li><code>VictoryIllustrations/&lt;name&gt;/&lt;milestone&gt; &lt;index&gt;.png</code> - For entries in the <code>milestones</code> field with an <code>[amount]</code>, one image per step, starting at index 1.</li> <li><code>VictoryIllustrations/&lt;name&gt;/&lt;component&gt;.png</code> - One image for each unique entry in the <code>requiredSpaceshipParts</code> field, that is, for parts that can only be built once. Spaces in unit names must be preserved.</li> <li><code>VictoryIllustrations/&lt;name&gt;/&lt;component&gt; &lt;index&gt;.png</code> - For parts in the <code>requiredSpaceshipParts</code> field that must be built several times, one per instance. Spaces in unit names must be preserved, and there must be one space between the name and the index. Indexes start at 1.</li> </ul> <p>Remember - these are logical names as they are indexed in your atlas file, if you let Unciv pack for you, the <code>VictoryIllustrations</code> folder should be placed under <code>&lt;mod&gt;/Images</code> - or maybe <code>&lt;mod&gt;/Images.Victories</code> if you want these images to occupy a separate <code>Victories.atlas</code> (Do not omit the <code>Images</code> folder even if left empty, the texture packer needs it as marker to do its task).</p> <p>That's almost all there is - no json needed, and works as 'Permanent audiovisual mod'. The Background image is the trigger, and if it's present all part images must be present too, or your spaceship crashes before takeoff, taking Unciv along with it. That was a joke, all other images are optional, it could just look boring if you omit the wrong ones.</p> <p>As for \"almost\" - all images are overlaid one by one over the Background one, so they must all be the same size. Except for Won and Lost - those, if their condition is met, replace the entire rest, so they can be different sizes than the background. The part images are overlaid over the background image in no guaranteed order, therefore they should use transparency to avoid hiding parts of each other.</p> <p>One way to create a set is to take one final image, select all parts that should be the centerpiece itself not background (use lasso, magic wand or similar tools, use antialiasing and feathering as you see fit), copy and paste as new layer. Then apply desaturation and/or curves to the selection on the background layer to only leave a hint of how the completed victory will look like. Now take apart the centerpiece - do a selection fitting one part name, copy and paste as new layer (in place), then delete the selected part from the original centerpiece layer. Rinse and repeat, then export each layer separately as png with the appropriate filenames. There's no suggested size, but keep in mind textures are a maximum of 2048x2048 pixels, and if you want your images packed properly, several should fit into one texture. They will be scaled down if needed to no more than 80% screen size, preserving aspect ratio.</p>"},{"location":"Modders/Images-and-Audio/#sounds","title":"Sounds","text":"<p>Standard values are below. The sounds themselves can be found here.</p> <ul> <li>arrow, artillery, bombard, bombing, cannon, chimes, choir, click, coin, construction, elephant, fortify, gdrAttack, horse, jetgun, machinegun, metalhit, missile, nonmetalhit, nuke, paper, policy, promote, setup, shipguns, shot, slider, swap, tankshot, throw, torpedo, upgrade, whoosh.</li> </ul> <p>Mods can add their own sounds, as long as any new value in attackSound has a corresponding sound file in the mod's sound folder, using one of the formats mp3, ogg or wav (file name extension must match codec used). Remember, names are case sensitive. Small sizes strongly recommended, Unciv's own sounds use 24kHz joint stereo 8-bit VBR at about 50-100kBps.</p>"},{"location":"Modders/Images-and-Audio/#override-built-in-sounds","title":"Override built-in sounds","text":"<p>This works like graphics, except no atlas is involved. E.g. you include a sounds/Click.mp3, it will play instead of the normal click sound. These files must stay short and small. A sound larger than 1MB when uncompressed may break or not play at all on mobile devices. Unciv tries to standardize on 24kHz sample rate, joint stereo, low-bitrate VBR (-128kbps) mp3. Only mp3 and ogg formats will be recognized (but an existing mp3 can be overridden with an ogg file).</p>"},{"location":"Modders/Images-and-Audio/#supply-additional-music","title":"Supply additional music","text":"<p>Sound files (mp3 or ogg) in a mod /music folder will be recognized and used when the mod is active. Except for context-specific music as described in the following paragraphs, tracks will play randomly from all available tracks (with a little bias to avoid close repetition of tracks). There is no overriding - a \"thatched-villagers.mp3\" in a mod will play in addition to and with the same likelihood as the file that the base game offers to download for you. There is no hard technical limit on bitrate or length, but large bandwidth requirements may lead to stuttering (The end of a \"next turn\", right before the world map is updated, and with very large maps, is the most likely to cause this).</p>"},{"location":"Modders/Images-and-Audio/#context-sensitive-music-overview","title":"Context-sensitive music: Overview","text":"<p>The Music Controller will generally play one track after another, with a pause (can be changed in options) between. While the \"Leave game?\" confirmation dialog is opened playback will fade out and pause and can resume when it is closed.</p> <p>There are various 'triggers' in the game code initiating a choice for a new track. The new track will, if necessary, fade out the currently playing track quickly before it starts playing. Track choice involves context provided by the trigger and a random factor, and an attempt is made to not repeat any track until at least eight others have played.</p> <p>Mods can provide their own music folder, and if they are active its contents will be treated exactly the same as those in the main music folder. Mods should control usage of their tracks by careful choice of file name. Mod developers can watch console output for messages logging track choice with trigger parameters or loading errors.</p> <p>One track is special: The Thatched Villagers (see also credits.md). The game is able to download it if the music folder is empty, and it is played when the music volume slider is used. It is also a fallback track should certain problems occur (a broken file, however, will shut down the player until another trigger happens).</p>"},{"location":"Modders/Images-and-Audio/#context-sensitive-music-list-of-triggers","title":"Context-sensitive music: List of Triggers","text":"<p>Triggers indicate context (call it intent, mood, whatever, it doesn't matter) by optionally providing a prefix and/or suffix to match against the file name. There are a few flags as well influencing choice or behaviour - one flag function is to make prefix or suffix mandatory, meaning if no available file matches the track chooser will do nothing. Otherwise, a next track will always be chosen from the available list by sorting and then picking the first entry. Sorting is done by in order of precedence: Prefix match, Suffix match, Recently played, and a random number. Therefore, as currently no triggers have an empty prefix, files matching none of the prefixes will never play unless there are less than eight files matching the requested prefix.</p> <p>The current list of triggers is as follows:</p> Description Prefix [^M] Suffix [^X] Flags Automatic next-track[^0] Ambient Launch game[^1] Menu Every 10th turn (player civ name) [^M] Peace or War[^2] [^F] New game: Select a mod (mod name) [^M] Theme [^S] New game: Pick a nation for a player (nation name) [^M] Theme or Peace [^S] Diplomacy: Select player (nation name) [^M] Peace or War[^3] [^S] First contact[^4] (civ name) [^M] Theme or Peace [^X] War declaration[^5] (civ name) [^M] War [^X] Civ defeated (victory/civ name) Defeat [^X] Player wins (victory/civ name) Victory [^X] Golden Age (civ name) [^M] Golden [^X] Wonder built (wonder name) [^M] Wonder [^X] Tech researched (tech name) [^M] Researched [^X] Map editor: Select nation start location (nation name) [^M] Theme [^S] Options: Volume slider or Default track downloaded [^D] Music controls (Options or from Menu) Next track Ambient <p>Legend:</p> <ul> <li>[^N]: Not implemented</li> <li>[^M]: Prefix must match. If no matching file is found, the trigger will do nothing.</li> <li>[^X]: Suffix must match. If no matching file is found, the trigger will do nothing.</li> <li>[^S]: Stop after playback. No automatic next choice.</li> <li>[^F]: Slow fadeout of replaced track.</li> <li>[^D]: Always plays the default file.</li> <li>[^0]: Whenever a track finishes and the configured silence has elapsed, an 'Ambient' track without any context is chosen. Also triggered by 'resume' (e.g. switching to another app and back on Android)</li> <li>[^1]: First opening of the Main Menu (or the initial language picker).</li> <li>[^2]: Whether the active player is at war with anybody.</li> <li>[^3]: According to your relation to the picked player.</li> <li>[^4]: Excluding City States.</li> <li>[^5]: Both in the alert when another player declares War on you and declaring War yourself in Diplomacy screen.</li> </ul>"},{"location":"Modders/Images-and-Audio/#supply-leader-voices","title":"Supply Leader Voices","text":"<p>Sound files named from a Nation name and the corresponding text message's field name, placed in a mod's <code>voices</code> folder, will play whenever that message is displayed. Nation name and message name must be joined with a dot '.', for example <code>voices/Zulu.defeated.ogg</code>.</p> <p>Leader voice audio clips will be streamed, not cached, so they are allowed to be long - however, if another Leader voice or a city ambient sound needs to be played, they will be cut off without fade-out Also note that voices for City-State leaders work only for those messages a City-state can actually use: <code>attacked</code>, <code>defeated</code>, and <code>introduction</code>.</p>"},{"location":"Modders/Images-and-Audio/#modding-easter-eggs","title":"Modding Easter eggs","text":"<p>Here's a list of special dates (or date ranges) Unciv will recognize:</p> name AprilFoolsDay Friday13th Qingming UncivBirthday DiaDeLosMuertos LunarNewYear Samhain Xmas Diwali Passover StarWarsDay YuleGoat Easter PrideDay TowelDay <p>... When these are or what they mean - look it up, if in doubt in our sources (\ud83d\ude08).</p> <p>An audiovisual Mod (which the user must then mark as permanent) can define textures named \"EasterEggs/<code>name</code>\", where name must correspond exactly to one from the table above, and index starts at 1 counting up. Example: /Images/EasterEggs/Diwali1.png and so on. Then, Unciv will display them as \"floating art\" on the main menu screen, on the corresponding dates. They will from time to time appear from off-screen, slide through the window, and disappear out the other side, with varying angles and speeds. <p>Notes: - You can test this by launching the jar and including <code>-DeasterEgg=name</code> on the command line. - In case of overlapping holidays, only one is chosen - and the \"impact\" of longer holidays is equalized by reducing the chance inversely proportional to the number of days. e.g. DiaDeLosMuertos is two days, so each Unciv launch on these days has 50% chance to show the egg. - Unciv's \"map-based\" easter eggs work independently! - No cultural prejudice is intended. If you know a nice custom we should include the date test for, just ask.</p>"},{"location":"Modders/Making-a-new-Civilization/","title":"'My first mod' - Making a new Civilization","text":"<p>By the end of this tutorial, you should have a working, generally-available mod that adds a new Civilization to the game</p>"},{"location":"Modders/Making-a-new-Civilization/#create-your-repository","title":"Create your repository","text":"<ul> <li>Create a Github account, if you don't already have one</li> <li>Go to the mod example</li> <li>Click the green <code>Use this template</code> button - <code>Create a new repository</code></li> <li>Choose your repository name and click <code>Create repository from template</code> (keep setting on 'public'!)</li> <li>Your new repository is now available!</li> </ul>"},{"location":"Modders/Making-a-new-Civilization/#fill-in-your-nation-info","title":"Fill in your Nation info","text":"<p>Each civ has some basic information - what the civ name is, the leader's name, colors and city names.</p> <p>In addition, each civ has flavor text when declaring war, intoduction etc.</p> <p>All of these need to be filled in in <code>jsons/Nations.json</code> file - see here for the base game file for more examples</p>"},{"location":"Modders/Making-a-new-Civilization/#get-your-civ-icon","title":"Get your Civ icon","text":"<p>Each civ has an icon, like the wreath for Rome, for instant identification.</p> <p>All of these icons are white on a transparent background, and are 100x100 pixels - see icon considerations for details</p> <p>You'll need to put your icon in the <code>Images/NationIcons</code> folder - you can navigate there and click <code>Add file - Create a new file</code> (top-right corner)</p>"},{"location":"Modders/Making-a-new-Civilization/#test-it-out","title":"Test it out!","text":"<ul> <li>Open Unciv</li> <li>Click 'Mods' - 'Download mod from URL'</li> <li>Copy-paste your repository's URL to the textbox, and click 'Download'</li> <li>Exit the mod screen, and create a new game, selecting your mod - which will be under 'Extension mods' on the left</li> </ul> <p>Congrats, your Civ is now fully playable!</p> <p>Note</p> <p>You currently won't see any images from this mod, since it has no texture atlas - see here for more details If you're on Desktop, you can restart Unciv to generate this atlas and see the images</p> <p>But this nation's abilities are exactly those of the base mod. To make it truly unique, we'll need to change some Uniques ;)</p>"},{"location":"Modders/Making-a-new-Civilization/#adding-unique-units","title":"Adding unique units","text":"<p>Units are defined in the <code>jsons/Units.json</code> - for the base game file, see here file, with an icon in the UnitIcons folder.</p> <p>The icons must be 200x200 pixels, white on transparent background - see icon considerations for details - and go in the <code>Images/UnitIcons</code> folder</p> <p>Remember that these are unique units, so search for an existing unique unit to see how they replace their regular counterparts!</p>"},{"location":"Modders/Making-a-new-Civilization/#adding-unique-buildings","title":"Adding unique buildings","text":"<p>Same as the units - info is in <code>jsons/Buildings.json</code> - for the base game file, see Buildings.json file and icons in the BuildingIcons folder, same rules for the icons apply (200x200 pixels, icon considerations)</p> <p>Icons go in <code>Images/BuildingIcons</code></p>"},{"location":"Modders/Making-a-new-Civilization/#civ-unique","title":"Civ Unique","text":"<p>Check out our list of uniques to see all the cool special effects you can add to your civilization!</p>"},{"location":"Modders/Making-a-new-Civilization/#make-it-searchable","title":"Make it searchable!","text":"<p>To list your mod in the Unciv Mods screen:</p> <ul> <li>Open your repository</li> <li>Click the gear icon, to the right of the 'About' label (right side, top)</li> <li>Under 'Topics', add 'unciv-mod'</li> <li>'Save changes'</li> </ul> <p>Congrats, your mod will now be shown in the mods page!</p> <p>The more stars your repo has, the higher towards the top it will appear, so start gaining fans :D</p>"},{"location":"Modders/Making-a-new-Civilization/#icon-considerations","title":"Icon considerations","text":"<p>ALL icons must be legally acceptable, meaning they either come from from open sources or you act according to their licence (for Creative Commons, for instance, you have to specify the source and the creator).</p> <p>Icons directly from the base game belong to Firaxis, so I'm not sure we're legally allowed to use them - please use other sources!</p> <p>One source I use constantly is The Noun Project - everything there is Creative Commons or open, so they can all be used!</p> <p>Credits for icons should go in a <code>Credits.md</code> page.</p>"},{"location":"Modders/Making-a-new-Civilization/#whats-next","title":"What's next?","text":"<p>You have a working mod, now it's time to go wild!</p> <ul> <li>Add the atlas files to your repo so your users get images</li> <li>Install Git locally, so you can change your files on your device and have those changes reflected in your repository</li> <li>Expand the abilities of your civ by adding new uniques</li> <li>Add new civs, buildings or units</li> <li>Expand into other game objects by exploring the rest of the mod file structure</li> <li>Try creating a base ruleset from this template</li> </ul>"},{"location":"Modders/Mods/","title":"Introduction to Mods","text":""},{"location":"Modders/Mods/#what-are-mods","title":"What are mods?","text":"<p>Everyone has that thing they wish could be in the game. Unfortunately, the game only understands code, so mods are our way to give a degree of freedom to those of us who don't code.</p> <p>Mods can add, replace and remove basic game definitions, such as units, nations, buildings, improvements, resources and terrains. Games loaded with these mods will function according to the mod definition.</p> <p>The game only knows how to recognize existing definitions, so you can't add new unique abilities to nations/units/buildings/etc, only play around with existing ones</p> <p>There are three main kinds of mods:</p> <ul> <li>Extension mods - these add new nations/units/buildings/resources to a base ruleset - can be either to the default ruleset, or to a base ruleset mod. Easy to do and probably the better place to get started - for example, creating a new Civilization</li> <li>Base Ruleset mods - these replace the entire existing ruleset - tech tree, units, policies, nations etc - to give an entirely different experience than the base game. These generally require quite a bit of work, but give a whole new experience, and so are the most popular. A minimal example can be found here as a template to build off of (\"Use this template\" green button in top right, \"Create a new repository\"). For requirements, see Requirements</li> <li>Ruleset-agnostic mods - these do not contain any ruleset-related jsons, but instead contain other affects. Audiovisual mods (including tilesets, unitsets, and UI skins) and map mods are in this category.</li> </ul> <p>Creating and editing mods from your phone is NOT RECOMMENDED - it's much easier using a desktop device!</p>"},{"location":"Modders/Mods/#mod-names","title":"Mod names","text":"<p>Mods need to conform to github repo naming rules, but best stay simple and use only letters, digits, and dashes <code>-</code>. Dashes are automatically converted to spaces for display and use within Unciv.</p> <p>Many punctuation or extended unicode characters might work, but at best potential users won't find them attractive, at worst we'll refuse support when you run into problems :smiling_imp:</p>"},{"location":"Modders/Mods/#mod-components","title":"Mod components","text":"<p>Mods are located in a <code>/mods</code> directory, on Desktop that should be next to your .jar file.</p> <p>Mods typically have 2 subfolders:</p> <ul> <li><code>jsons</code> - here you should put files that alter the data of game objects, the order of the files is as in the base json files. More information on these can be found here</li> <li><code>Images</code> - here you should put game images, as in the base image files.</li> </ul> <p>In order to remove objects from the game, you'll need to create a ModOptions file in the <code>/jsons</code> subfolder - there's an example here.</p> <p>Base Ruleset Mods are mods that 'start from scratch' - ALL the original objects are removed, and only the objects of the mod in question are used.</p> <p>This is done by adding a <code>\"isBaseRuleset\":true</code> configuration to your modOptions file, like so.</p>"},{"location":"Modders/Mods/#audiovisual-components","title":"Audiovisual components","text":"<p>In addition to changing the rules - or even without doing so - mods can override existing graphics or sounds, or add music tracks. For details, see Audiovisual Mods.</p> <p>Custom tilesets and unitsets are a subgroup of these - see Creating a custom tileset - as are UI skin mods, see Creating a UI skin.</p> <p>Such mods are candidates for the \"Permanent audiovisual mod\" switch available on the Mod Management Screen, see Permanent audiovisual mods.</p> <p>Images need to be 'packed' before the game can use them, which the desktop version can do for you. Please make sure to read the Texture atlas chapter!</p>"},{"location":"Modders/Mods/#adding-maps-to-mods","title":"Adding maps to mods","text":"<p>You can also add maps to mods, so they'll be available to players who download your mod.</p> <p>A mod can also be maps-only, if all you want to do is share your maps.</p> <p>When you've finished making your map in the Map Editor, save it, and it will be in the <code>/maps</code> folder of your game.</p> <p>Copy it to a <code>/maps</code> folder in your mod, and you're done!</p>"},{"location":"Modders/Mods/#getting-your-mod-out-there","title":"Getting your mod out there","text":"<p>In order to make your mod downloadable by anyone, you need to create a Github repository (instructions here)</p> <p>The Images and jsons folders need to be in the root directory of the repo - see here for example.</p> <p>You can then manually download the mod from within the Mod Manager in Unciv:</p> <ul> <li>From Unciv's main screen, click \"Mods\"</li> <li>Click \"Download mod from URL\", and enter the location of your Github page</li> <li>The game will automatically download and extract your mod, and it'll be ready to use!</li> </ul> <p>Once you've tested that your mod CAN be downloaded, and that it works well once downloaded, you're ready for the final stage - GETTING IT TO THE USERS AUTOMATICALLY.</p> <p>In order to do this, all you need to do is:</p> <ul> <li>Go to your Github page</li> <li>Click the gear icon next to the About (top-right part of the page)</li> <li>In 'Topics', add \"unciv-mod\"</li> </ul> <p>Optionally add one or more of the following topics to mark your mod as belonging to specific categories:</p> <ul> <li><code>unciv-mod-rulesets</code> (for base ruleset mods)</li> <li><code>unciv-mod-expansions</code> (for mods extending vanilla rulesets - please use this, not unciv-mod-expansion)</li> <li><code>unciv-mod-graphics</code> (for mods altering graphics - icons, portraits, tilesets)</li> <li><code>unciv-mod-audio</code> (for mods supplying music or modifying sounds)</li> <li><code>unciv-mod-maps</code> (for mods containing maps)</li> <li><code>unciv-mod-fun</code> (for mods mainly tweaking mechanics or other gameplay aspects)</li> <li><code>unciv-mod-modsofmods</code> (for mods extending another mod's ruleset)</li> </ul> <p>When you open Unciv's Mod Manager, it will query Github's list of repos with that topic, and now YOUR repo will appear there! The categories will appear as annotations on the mod buttons, and the user can filter for them. They are not required for the game to use the content - e.g. you can still load maps from mods lacking the unciv-mod-maps topic. If you want new categories, github will accept any topic, but you'll have to ask the Unciv team to enable them in the game.</p> <p>If you feel there should be additional topics supported in-game, then the course of action is as follows:</p> <ul> <li>You can add topics to your repository as you please, subject to github's terms, but if you whish them to become Unciv-supported they must begin with \"unciv-mod-\".</li> <li>Once done, you can either:<ul> <li>Wait at least one release, check that your topic appeared in ModCategories.json, and open a change PR for that file, removing the \"hidden\" attribute, telling us exactly why that topic would benefit the entire community.</li> <li>Or, open an issue pointing us to your Mod with the new topics, asking us to do the above for you, again telling us why.</li> </ul> </li> </ul>"},{"location":"Modders/Mods/#loading-mods-from-other-sources-than-github","title":"Loading mods from other sources than github","text":"<p>The mod manager has a \"Download mod from URL\" button. As mod consumer, you can use this to load mods as zip files from sources you trust: Use cases include mods in development, clients not able to connect to github for various reasons (e.g. firewalls, no IPv4 support), or as alternative transport for loading your own mods on mobile devices.</p> <p>This downloader supports simple redirections, but not hosters requiring authentication or pre-set cookies, or hosters reassembling files in the browser using javascript or other complications - a simple <code>http get</code> must suffice.</p> <p>As mod author, you might need to know a few details how that button works. After all, it will lack some metadata it can normally get from github - e.g. repository name, branch names, release tags. Your storage might be an alternative git platform, but unless we code explicit support, Unciv has no way to reliably determine those. Therefore pay attention to: - The zip content after unpacking should either contain exactly one subfolder and all the mod's files (and mod folders like <code>jsons</code> or <code>Images</code>) below that folder, or have all the mod's data directly at the top lefel of the zip content. - The content should include a majority of files or folders Unciv knows to be part of a mod. Adding more testing, comment, asset-source or similar files/folders than there are actual payload files will result in a \"Invalid Mod archive structure\" message and your mod won't be accepted. This is counted on the top mod level, so moving all extra files into one subfolder should work when you're nearing that limit. Note that files named \"license\", \"contribute.md\", \"readme.md\" or \"credits.md\" do count as \"good\" content. - The final mod name will be taken from one of three sources: The last part of the download link's path, the content-disposition header the server sends (you can see this as the actual name the file will be saved as when you download the link directly in a browser), or the first subfolder mentioned above. Precedence is subfolder - header - path, with some rarer exceptions (e.g. when the subfolder name is included in the header/path name but more boring, or in some cases typical branch name suffixes are automatically removed). - Therefore the best you can do is to include your mod content under a single subfolder with the desired mod name (including proper upper/lower casing), or, if your platform makes that difficult, make sure the downloaded name matches what you want to appear in your mod list (replacing blanks with dashes is allowed in all cases and recommended).</p>"},{"location":"Modders/Mods/#i-have-the-mod-now-what","title":"I have the mod, now what?","text":"<p>The primary use of mods is to add them when starting a new game, or configuring a map. This will mean that both the ruleset of the mod, and the images, will be in use for that specific game/map.</p> <p>For mods which are primarily visual or audio, there is a second use - through the mod manager, you can enable them as permanent audiovisual mods. This means that the images and/or sounds from the mod will replace the original media everywhere in the game, and contained music will be available - see here.</p>"},{"location":"Modders/Mods/#mod-location-for-manual-loading-of-mods","title":"Mod location for manual loading of mods","text":"<p>In general, you should never be manually-loading your mods - not only is this clunky, it's also more error-prone. Unless you have a very specific use-case, you probably shouldn't be doing this</p> <p>When loading a mod, it needs to be in its own folder in <code>/mods</code> - this is how you will work when you're editing your mod.</p> <p>In Android, you can copy them into the <code>Android/data/com.unciv.app/files/mods</code> directory.</p> <p>When the app starts, they will be auto-copied into the <code>/data/data/com.unciv.app/files/mods</code>, directory, that is inaccessible to users.</p> <p>In Chromebook, go to \"Play files\", should be on the sidebar on the left side of the window under \"My files\". Click the 3 vertical dots on the top right-hand corner of the window below the \"X\". If the option \"Show all Play folders\" does not have a check next to it click it. You should see some new files that appear on your screen. Now navigate to <code>Android/data/com.unciv.app/files/mods</code></p>"},{"location":"Modders/Mods/#other","title":"Other","text":"<p>You can add an image that will be displayed to users in the mod management screen by adding a \"preview.jpg\" or \"preview.png\" file.</p> <p>Existing mods can be found here!</p>"},{"location":"Modders/Mods/#whats-next","title":"What's next?","text":"<p>Now you should try to create your first mod!</p> <p>We recommend you start off by adding a new civilization as a mod, to get a hang of the process :)</p>"},{"location":"Modders/Scenarios/","title":"Scenarios","text":"<p>Scenarios are specific game states, set up so a player has a specific experience.</p> <p>These can range from just having cities and units in specific places, to having full-blown custom rulesets to support them.</p> <p>When creating a mod, we differentiate the ruleset from the scenario - the scenario is just a specific game state, or in other words - a saved game.</p> <p>To create a scenario:</p> <ul> <li>Create a new game with the players you want, AND a spectator</li> <li>Enter the game as the spectator, and edit the save using the console</li> <li>Save the game, copy the game save file to a \"scenarios\" folder in your mod</li> </ul>"},{"location":"Modders/Scenarios/#console","title":"Console","text":""},{"location":"Modders/Scenarios/#opening","title":"Opening","text":"<p>To open the console from the world screen, click the `` button on your keyboard.</p> <p>On mobile:</p> <ul> <li>Long-click menu hamburger (3 lines)</li> <li>Click \"developer console\" button</li> </ul> <p>To see available commands, click enter. This works for subcommands as well (e.g. when you entered <code>tile</code>).</p>"},{"location":"Modders/Scenarios/#command-formatting","title":"Command formatting","text":"<p>Object names (units buildings civs etc) are case-insensitive.</p> <p>Unit and building names with spaces in them, like \"Great General\", can be inputted in 2 ways:</p> <ul> <li>\"great general\" - with quotation marks around them</li> <li>great-general  - with dashes instead of spaces</li> </ul>"},{"location":"Modders/Scenarios/#autocomplete","title":"Autocomplete","text":"<p>The console has autocompletion - for commands and arguments with Tab.</p> <ul> <li>When two or more options match, the possibilities are displayed, and the longest common substring is entered for you (e.g. you enter 'c', Tab: commands 'city' or 'civ' match, the console partially completes 'ci' for you).</li> <li>When you haven't yet entered a partial text (console input is empty or ends in a space), autocompletion will display all options.</li> </ul>"},{"location":"Modders/Scenarios/#other","title":"Other","text":"<p>Some commands operate on a tile or unit you need to select on the map. You can also do so while the console is open.</p> <p>The console intentionally does not follow all rules defined by the ruleset - e.g. it allows Farms on hills without fresh water or the Mobility promotion on a Worker. Any unexpected consequences are your responsibility.</p> <p>You can access command history with the up/down buttons</p>"},{"location":"Modders/Type-checking/","title":"Type checking","text":"<p>Mistakes happen. Misnamed fields, things we forgot to add, or even stuff we didn't know existed.</p> <p>Computers can handle a lot of that themselves, so we can let them do the work to ensure that our json files are correct, by using json schemas.</p> <p>This also allows autocompletion when writing jsons!</p> <p>As of now, only Buildings and Units have proper schema</p>"},{"location":"Modders/Type-checking/#using-android-studio","title":"Using Android Studio","text":"<ul> <li>Double-click space, search \"json schema mappings\", enter</li> <li>Click the small '+' (top, under 'language &amp; frameworks' text)</li> <li>Put the URL as <code>https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/buildings.json</code></li> <li>Click the '+' under the 'Schema version' text, add 'File pattern', put pattern as <code>*/Buildings.json</code></li> </ul> <p>Tada! Now Android Studio will recognize all Buildings.json files as belonging to that schema, and will warn you of inconsistencies!</p>"},{"location":"Modders/Type-checking/#using-vscode","title":"Using VSCode","text":"<ul> <li>ctrl-shift-p, search \"open user settings (json)\", enter</li> <li>Copy this into the settings: <pre><code>    \"json.schemas\": [\n        {\n            \"fileMatch\": [\n                \"*/Buildings.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/buildings.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/Units.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/units.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/Nations.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/nations.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/TileImprovements.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/tileImprovements.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/Techs.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/techs.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/UnitTypes.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/unitTypes.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/UnitPromotions.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/unitPromotions.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/TileResources.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/tileResources.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/Events.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/events.json\"\n        },\n        {\n            \"fileMatch\": [\n              \"*/Terrains.json\"\n            ],\n            \"url\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/terrains.json\"\n        }\n    ]\n</code></pre></li> </ul>"},{"location":"Modders/Type-checking/#using-an-online-tool","title":"Using an online tool","text":"<p>If you don't use any of these tools, you can check your file online using this tool</p> <p>However, it can't handle the missing commas that vscode and Android Studio handle, so you may need to get your json up to spec to use it.</p> <p>The schema you want to validate against is: <pre><code>{\n    \"$ref\": \"https://raw.githubusercontent.com/yairm210/Unciv/master/docs/Modders/schemas/buildings.json\"\n}\n</code></pre></p>"},{"location":"Modders/Unique-parameters/","title":"Unique parameters","text":"<p>This page contains an overview of all different parameters used in uniques and what values can be filled into them. Each of the different parameter types is described below, including all possible values for them. These are split into two categories:</p> <ul> <li>descriptions: e.g., \"the name of any unit\"</li> <li><code>Text that looks like this</code>. This last one must be used exactly the same</li> </ul> <p>Note that all of these are case-sensitive!</p>"},{"location":"Modders/Unique-parameters/#general-filter-rules","title":"General Filter Rules","text":"<p>All filters except for <code>populationFilter</code> and <code>resourceFilter</code> accept multiple values in the format: <code>{A} {B} {C}</code> etc, meaning \"the object must match ALL of these filters\"</p> <p>Example: <code>[{Military} {Water}] units</code>, <code>[{Wounded} {Armor}] units</code>, etc.</p> <p>No space or other text is allowed between the <code>[</code> and the first <code>{</code>, nor between the last <code>}</code> and the ending <code>]</code>. The space in <code>} {</code>, however, is mandatory.</p> <p>All filters accept <code>non-[filter]</code> as a possible value</p> <p>Example: <code>[non-[Wounded]] units</code></p> <p>These can be combined by nesting, with the exception that an \"ALL\" filter cannot contain another \"ALL\" filter, even with a NON-filter in between.</p> <p>Example: <code>[{non-[Wounded]} {Armor}] units</code> means unit is type Armor and at full health. Example: <code>[non-[{Wounded} {Armor}]] units</code> means unit is neither wounded nor an Armor one.</p> <p><code>[{non-[{Wounded} {Armor}]} {Embarked}] units</code> WILL FAIL because the game will treat both \"} {\" at the same time and see <code>non-[{Wounded</code> and <code>Armor}]</code>, both invalid.</p> <p>Display of complex filters in Civilopedia may become unreadable. If so, consider hiding that unique and provide a better wording using the <code>Comment []</code> unique separately.</p>"},{"location":"Modders/Unique-parameters/#civfilter","title":"civFilter","text":"<p>Allows filtering for specific civs.</p> <p>Allowed values:</p> <ul> <li><code>Human player</code></li> <li><code>AI player</code></li> <li><code>Friendly</code></li> <li><code>Hostile</code></li> <li><code>Open Borders</code></li> <li>nationFilter</li> </ul>"},{"location":"Modders/Unique-parameters/#nationfilter","title":"nationFilter","text":"<p>Allows filtering for specific nations. Used by ModOptions.nationsToRemove.</p> <p>Allowed values:</p> <ul> <li><code>All</code>, <code>all</code></li> <li><code>City-States</code>, <code>City-State</code></li> <li><code>Major</code></li> <li>Nation name</li> <li>A unique a Nation has (verbatim, no placeholders)</li> </ul>"},{"location":"Modders/Unique-parameters/#baseunitfilter","title":"baseUnitFilter","text":"<p>Unit filters can be divided up into two parts: <code>baseUnitFilter</code>s and <code>mapUnitFilter</code>s. The former is tested against the unit as it appears in the json. This means it doesn't have an owning civ or tile it stands on, just its base properties. The latter is tested against the unit as it appears on the map, including its nation, tile, health and all other properties.</p> <p>Allowed values:</p> <ul> <li>unit name</li> <li>unit type - e.g. Melee, Ranged, WaterSubmarine, etc.</li> <li><code>Land</code>, <code>Water</code>, <code>Air</code></li> <li><code>land units</code>, <code>water units</code>, <code>air units</code></li> <li><code>non-air</code> for non-air non-missile units</li> <li><code>Military</code>, <code>military units</code></li> <li><code>Civilian</code>, <code>civilian units</code></li> <li><code>All</code>, <code>all</code></li> <li><code>Melee</code></li> <li><code>Ranged</code></li> <li><code>Nuclear Weapon</code></li> <li><code>Great Person</code></li> <li><code>Embarked</code></li> <li>Matching technologyfilter for the tech this unit requires - e.g. <code>Modern Era</code></li> <li>Any exact unique the unit has</li> <li>Any exact unique the unit type has</li> <li>Any combination of the above (will match only if all match). The format is <code>{filter1} {filter2}</code> and can match any number of filters. For example: <code>[{Modern era} {Land}]</code> units</li> </ul>"},{"location":"Modders/Unique-parameters/#mapunitfilter","title":"mapUnitFilter","text":"<p>This indicates a unit as placed on the map. Compare with <code>baseUnitFilter</code>.</p> <p>Allowed values:</p> <ul> <li>Any matching baseUnitFilter</li> <li>Any civFilter matching the owner</li> <li>Any unique the unit has - also includes uniques not caught by the baseUnitFilter, for example promotions</li> <li>Any promotion name, or an exact unique a promotion has</li> <li><code>Wounded</code></li> <li><code>Embarked</code></li> <li><code>City-State</code></li> <li><code>Barbarians</code>, <code>Barbarian</code></li> <li><code>Non-City</code></li> <li>Again, any combination of the above is also allowed, e.g. <code>[{Wounded} {Water}]</code> units.</li> </ul> <p>You can check this in-game using the console with the <code>unit checkfilter &lt;filter&gt;</code> command</p>"},{"location":"Modders/Unique-parameters/#buildingfilter","title":"buildingFilter","text":"<p>Allows to only activate a unique for certain buildings.</p> <p>Allowed values:</p> <ul> <li><code>All</code>, <code>all</code></li> <li><code>Buildings</code>, <code>Building</code></li> <li><code>Wonder</code>, <code>Wonders</code></li> <li><code>National Wonder</code>, <code>National</code></li> <li><code>World Wonder</code>, <code>World</code> -- All wonders that are not national wonders</li> <li>building name</li> <li>The name of the building it replaces (so for example uniques for libraries will apply to paper makers as well)</li> <li>Matching technologyfilter for the tech this building requires - e.g. Modern Era</li> <li>An exact unique the building has (e.g.: <code>spaceship part</code>)</li> <li><code>Culture</code>, <code>Gold</code>, etc. if the building is <code>stat-related</code> for that stat. Stat-related buildings are defined as one of the following:<ul> <li>Provides that stat directly (e.g. +1 Culture)</li> <li>Provides a percentage bonus for that stat (e.g. +10% Production)</li> <li>Provides that stat as a bonus for resources (e.g. +1 Food from every Wheat)</li> <li>Provides that stat per some amount of population (e.g. +1 Science for every 2 population [cityFilter])</li> </ul> </li> <li>Any combination of the above (will match only if all match). The format is <code>{filter1} {filter2}</code> up to any number of filters. For example <code>[{Ancient era} {Food}]</code> buildings.</li> </ul>"},{"location":"Modders/Unique-parameters/#cityfilter","title":"cityFilter","text":"<p>cityFilters allow us to choose the range of cities affected by this unique:</p> <ul> <li><code>in this city</code></li> <li><code>in all cities</code>, <code>All</code>, <code>all</code> - Generally applies to all cities owned by the relevant civ</li> <li><code>in your cities</code>, <code>Your</code></li> <li><code>in all coastal cities</code>, <code>Coastal</code></li> <li><code>in capital</code>, <code>Capital</code></li> <li><code>in all non-occupied cities</code>, <code>Non-occupied</code> - all cities that are not puppets and don't have extra unhappiness from being recently conquered</li> <li><code>in all cities with a world wonder</code></li> <li><code>in all cities connected to capital</code></li> <li><code>in all cities with a garrison</code>, <code>Garrisoned</code></li> <li><code>in non-enemy foreign cities</code> - In all cities owned by civs other than you that you are not at war with</li> <li><code>in enemy cities</code>, <code>Enemy</code></li> <li><code>in foreign cities</code>, <code>Foreign</code></li> <li><code>in annexed cities</code>, <code>Annexed</code></li> <li><code>in puppeted cities</code>, <code>Puppeted</code></li> <li><code>in resisting cities</code>, <code>Resisting</code></li> <li><code>in cities being razed</code>, <code>Razing</code></li> <li><code>in holy cities</code>, <code>Holy</code></li> <li><code>in City-State cities</code></li> <li><code>in cities following this religion</code> - Should only be used in pantheon/follower uniques for religions</li> <li><code>in cities following our religion</code></li> <li><code>in all cities in which the majority religion is a major religion</code></li> <li><code>in all cities in which the majority religion is an enhanced religion</code></li> <li>[civFilter]</li> </ul> <p>You can check this in-game using the console with the <code>city checkfilter &lt;filter&gt;</code> command</p>"},{"location":"Modders/Unique-parameters/#improvementfilter","title":"improvementFilter","text":"<p>For filtering a specific improvement.</p> <p>Allowed values:</p> <ul> <li>improvement name</li> <li>An exact unique the improvement has (e.g.: <code>spaceship improvement</code>)</li> <li><code>Improvement</code></li> <li><code>All</code>, <code>all</code></li> <li><code>Great Improvement</code>, <code>Great</code></li> <li><code>All Road</code> - for Roads &amp; Railroads</li> </ul>"},{"location":"Modders/Unique-parameters/#populationfilter","title":"populationFilter","text":"<p>A filter determining a part of the population of a city.</p> <p>Allowed values:</p> <ul> <li><code>Population</code></li> <li><code>Specialists</code></li> <li><code>Unemployed</code></li> <li><code>Followers of the Majority Religion</code> or <code>Followers of this Religion</code>, both of which only apply when this religion is the majority religion in that city</li> <li>Specialist names</li> </ul>"},{"location":"Modders/Unique-parameters/#religionfilter","title":"religionFilter","text":"<p>For filtering specific relgions</p> <ul> <li><code>any</code></li> <li><code>major</code></li> <li><code>enhanced</code></li> <li><code>your</code></li> <li><code>foriegn</code></li> <li><code>enemy</code></li> <li>The name of a relgion symbol</li> <li>The name of a belief</li> <li>A unique of a belief the religion has</li> </ul>"},{"location":"Modders/Unique-parameters/#policyfilter","title":"policyFilter","text":"<p>Allowed values:</p> <ul> <li><code>All</code>, <code>all</code></li> <li><code>[policyBranchName] branch</code></li> <li>The name of the policy</li> <li>A unique the Policy has (verbatim, no placeholders)</li> </ul>"},{"location":"Modders/Unique-parameters/#combatantfilter","title":"combatantFilter","text":"<p>Allowed values:</p> <ul> <li>mapUnitFilter, for unit combatants</li> <li><code>City</code>, <code>All</code>, or civFilter, for city combatants</li> </ul> <p>Since mapUnitFilter contains civFilter, that means civFilter can be applied to combatantFilter for both units and cities.</p>"},{"location":"Modders/Unique-parameters/#regiontype","title":"regionType","text":"<p>Used for dividing the world into regions in each of which a single player is placed at the start of the game. Allowed values are <code>Hybrid</code> and the name of any terrain that has one of the following two uniques:</p> <ul> <li><code>A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount]</code></li> <li><code>A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount]</code></li> </ul>"},{"location":"Modders/Unique-parameters/#simpleterrain","title":"simpleTerrain","text":"<p>Used by NaturalWonderGenerator to place natural wonders</p> <p>Allowed values:</p> <ul> <li><code>Land</code></li> <li><code>Water</code></li> <li><code>Elevated</code></li> <li>The name of any terrain</li> </ul>"},{"location":"Modders/Unique-parameters/#stats","title":"stats","text":"<p>This indicates a text comprised of specific stats and is slightly more complex.</p> <p>Each stats is comprised of several stat changes, each in the form of <code>+{amount} {stat}</code>, where 'stat' is one of the seven major stats (eg <code>Production</code>, <code>Food</code>, <code>Gold</code>, <code>Science</code>, <code>Culture</code>, <code>Happiness</code> and <code>Faith</code>). For example: <code>+1 Science</code>.</p> <p>These can be strung together with \", \" between them, for example: <code>+2 Production, +3 Food</code>.</p>"},{"location":"Modders/Unique-parameters/#resourcefilter","title":"resourceFilter","text":"<p>Allowed values:</p> <ul> <li>Resource name</li> <li><code>any</code></li> <li><code>All</code>, <code>all</code></li> <li>Resource type: <code>Strategic</code>, <code>Luxury</code>, <code>Bonus</code></li> <li>Stat provided by the resource when improved (e.g. <code>Food</code>)</li> </ul>"},{"location":"Modders/Unique-parameters/#stockpiledresource","title":"stockpiledResource","text":"<p>This indicates a text that corresponds to a custom Stockpile Resource.</p> <p>These are global civilization resources that act similar to the main Civ-wide resources like <code>Gold</code> and <code>Faith</code>. You can generate them and consume them. And actions that would consume them are blocked if you don't have enough left in stock.</p> <p>To use, you need to first define a TileResources with the \"Stockpiled\" Unique. Then you can reference them in other Uniques.</p>"},{"location":"Modders/Unique-parameters/#stockpile","title":"Stockpile","text":"<p>Something that can be added to a civ</p> <p>Allowed values:</p> <ul> <li>stockpiled resource (see above)</li> <li>Stat name - for global stats, not city stats</li> <li><code>Stored Food</code> (for cities)</li> <li><code>Golden Age points</code></li> </ul>"},{"location":"Modders/Unique-parameters/#technologyfilter","title":"technologyFilter","text":"<p>At the moment only implemented for ModOptions.techsToRemove.</p> <p>Allowed values:</p> <ul> <li><code>All</code>, <code>all</code></li> <li>The name of an Era</li> <li>The name of a Technology</li> <li>A unique a Technology has (verbatim, no placeholders)</li> </ul>"},{"location":"Modders/Unique-parameters/#terrainfilter","title":"terrainFilter","text":"<p>This indicates the terrain on a single tile.</p> <p>Allowed values:</p> <ul> <li>A filter names a specific json attribute (by name):<ul> <li>Base terrain</li> <li>Terrain features</li> <li>Base terrain uniques</li> <li>Terrain feature uniques</li> <li>Resource</li> <li>Natural wonder</li> <li>A nationFilter matching the tile owner</li> </ul> </li> <li>Or the filter is a constant string choosing a derived test:<ul> <li><code>All</code>, <code>all</code></li> <li><code>Terrain</code></li> <li><code>Water</code>, <code>Land</code></li> <li><code>Coastal</code> (at least one direct neighbor is a coast)</li> <li><code>River</code> (as in all 'river on tile' contexts, it means 'adjacent to a river on at least one side')</li> <li><code>Open terrain</code>, <code>Rough terrain</code> (note all terrain not having the rough unique is counted as open)</li> <li><code>Friendly Land</code>, <code>Friendly</code> - land belonging to you, or other civs with open borders to you</li> <li><code>Foreign Land</code> - any land that isn't friendly land</li> <li><code>Enemy Land</code>, <code>Enemy</code> - any land belonging to a civ you are at war with</li> <li><code>your</code> - land belonging to you</li> <li><code>Unowned</code> - land that is not owned by any civ</li> <li><code>Water resource</code>, <code>Strategic resource</code>, <code>Luxury resource</code>, <code>Bonus resource</code>, <code>resource</code></li> <li><code>Natural Wonder</code> (as opposed to above which means testing for a specific Natural Wonder by name, this tests for any of them)</li> <li><code>Featureless</code></li> <li><code>Fresh Water</code></li> <li><code>non-fresh water</code></li> <li><code>Impassible</code></li> </ul> </li> </ul> <p>Please note all of these are case-sensitive.</p> <p>Note: Resource filters depend on whether a viewing civ is known in the context where the filter runs. Water and specific tests require a viewing civ, and if the resource needs a tech to be visible, that tech to be researched by the viewing civ. The other resource category tests can succeed without a known viewing civ only for resources not requiring any tech. So - test your mod!</p> <p>So for instance, the unique \"[stats] from [tileFilter] tiles [cityFilter]\" can match several cases:</p>"},{"location":"Modders/Unique-parameters/#tilefilter","title":"tileFilter","text":"<p>Allowed values:</p> <ul> <li>terrainFilter for this tile</li> <li>improvementFilter for this tile</li> <li>civFilter of the civilization who owns this tile</li> <li><code>Improvement</code> or <code>improved</code> for tiles with any improvements</li> <li><code>unimproved</code> for tiles with no improvement</li> <li><code>pillaged</code> for pillaged tiles</li> <li><code>worked</code> for tiles worked by a city</li> </ul> <p>You can check this in-game using the console with the <code>tile checkfilter &lt;filter&gt;</code> command</p>"},{"location":"Modders/Unique-parameters/#terrainquality","title":"terrainQuality","text":"<p>Used to indicate for what use the terrain should be viewed when dividing the world into regions, in each of which a single player is placed at the start of the game.</p> <p>Allowed values:</p> <ul> <li><code>Undesirable</code></li> <li><code>Food</code></li> <li><code>Desirable</code></li> <li><code>Production</code></li> </ul>"},{"location":"Modders/Unique-parameters/#countable","title":"countable","text":"<p>Indicates something that can be counted, used both for comparisons and for multiplying uniques</p> <p>Allowed values:</p> <ul> <li>Integer constant - any positive or negative integer number<ul> <li>Example: <code>Only available &lt;when number of [123] is more than [0]&gt;</code></li> </ul> </li> <li><code>turns</code> - Number of turns played<ul> <li>Example: <code>Only available &lt;when number of [turns] is more than [0]&gt;</code></li> <li>Always starts at zero irrespective of game speed or start era</li> </ul> </li> <li><code>year</code> - The current year<ul> <li>Example: <code>Only available &lt;when number of [year] is more than [0]&gt;</code></li> <li>Depends on game speed or start era, negative for years BC</li> </ul> </li> <li><code>Cities</code> - The number of cities the relevant Civilization owns<ul> <li>Example: <code>Only available &lt;when number of [Cities] is more than [0]&gt;</code></li> </ul> </li> <li><code>Units</code> - The number of units the relevant Civilization owns<ul> <li>Example: <code>Only available &lt;when number of [Units] is more than [0]&gt;</code></li> </ul> </li> <li>Stat name (<code>Production</code>, <code>Food</code>, <code>Gold</code>, <code>Science</code>, <code>Culture</code>, <code>Happiness</code> or <code>Faith</code>)<ul> <li>Example: <code>Only available &lt;when number of [Science] is more than [0]&gt;</code></li> <li>Gets the stat reserve, not the amount per turn (can be city stats or civilization stats, depending on where the unique is used)</li> </ul> </li> <li>Stat/Resource Per Turn<ul> <li>Example: <code>Only available &lt;when number of [[Culture] Per Turn] is more than [0]&gt;</code></li> <li>Gets the amount of a stat or resource the civilization gains per turn</li> </ul> </li> <li><code>Completed Policy branches</code><ul> <li>Example: <code>Only available &lt;when number of [Completed Policy branches] is more than [0]&gt;</code></li> </ul> </li> <li><code>[cityFilter] Cities</code><ul> <li>Example: <code>Only available &lt;when number of [[in all cities] Cities] is more than [0]&gt;</code></li> </ul> </li> <li><code>[mapUnitFilter] Units</code><ul> <li>Example: <code>Only available &lt;when number of [[Wounded] Units] is more than [0]&gt;</code></li> </ul> </li> <li><code>[buildingFilter] Buildings</code><ul> <li>Example: <code>Only available &lt;when number of [[Culture] Buildings] is more than [0]&gt;</code></li> </ul> </li> <li><code>Adopted [policyFilter] Policies</code><ul> <li>Example: <code>Only available &lt;when number of [Adopted [Oligarchy] Policies] is more than [0]&gt;</code></li> </ul> </li> <li><code>Adopted [policyFilter] Policies by [civFilter] Civilizations</code><ul> <li>Example: <code>Only available &lt;when number of [Adopted [Oligarchy] Policies by [City-States] Civilizations] is more than [0]&gt;</code></li> </ul> </li> <li><code>Remaining [civFilter] Civilizations</code><ul> <li>Example: <code>Only available &lt;when number of [Remaining [City-States] Civilizations] is more than [0]&gt;</code></li> </ul> </li> <li><code>Owned [tileFilter] Tiles</code><ul> <li>Example: <code>Only available &lt;when number of [Owned [Farm] Tiles] is more than [0]&gt;</code></li> </ul> </li> <li><code>[tileFilter] Tiles</code><ul> <li>Example: <code>Only available &lt;when number of [[Desert] Tiles] is more than [0]&gt;</code></li> </ul> </li> <li>Resource name - From TileResources.json<ul> <li>Example: <code>Only available &lt;when number of [Iron] is more than [0]&gt;</code></li> <li>Can be city stats or civilization stats, depending on where the unique is used</li> <li>For example: If a unique is placed on a building, then the retrieved resources will be of the city. If placed on a policy, they will be of the civilization.</li> <li>This can make a difference for e.g. local resources, which are counted per city.</li> </ul> </li> <li><code>Era number</code> - Number of the era the current player is in<ul> <li>Example: <code>Only available &lt;when number of [Era number] is more than [0]&gt;</code></li> <li>Zero-based index of the Era in Eras.json.</li> </ul> </li> <li><code>Speed modifier for [stat]</code> - A game speed modifier for a specific Stat, as percentage<ul> <li>Example: <code>Only available &lt;when number of [Speed modifier for [Culture]] is more than [0]&gt;</code></li> <li>Chooses an appropriate field from the Speeds.json entry the player has chosen.</li> <li>It is returned multiplied by 100.</li> <li>Food and Happiness return the generic <code>modifier</code> field.</li> <li>Other fields like <code>goldGiftModifier</code> or <code>barbarianModifier</code> are not accessible with this Countable.</li> </ul> </li> <li>Evaluate expressions!<ul> <li>Example: <code>Only available &lt;when number of [[Iron] + 2] is more than [0]&gt;</code></li> <li>Expressions support arbitrary math operations, and can include other countables, when surrounded by square brackets.</li> <li>For example, since <code>Cities</code> is a countable, and <code>[Melee] units</code> is a countable, you can have something like: <code>([[Melee] units] + 1) / [Cities]</code> (the whitespace is optional but helps readability)</li> <li>Since on translation, the brackets are removed, the expression will be displayed as <code>(Melee units + 1) / Cities</code></li> <li>Supported operations between 2 values are: +, -, *, /, %, ^</li> <li>Supported operations on 1 value are: - (negation), \u221a (square root), abs (absolute value - turns negative into positive), sqrt (square root), floor (round down), ceil (round up)</li> </ul> </li> </ul>"},{"location":"Modders/uniques/","title":"Uniques","text":"<p>An overview of uniques can be found here</p> <p>Simple unique parameters are explained by mouseover. Complex parameters are explained in Unique parameter types</p>"},{"location":"Modders/uniques/#triggerable-uniques","title":"Triggerable uniques","text":"<p>Uniques that have immediate, one-time effects. These can be added to techs to trigger when researched, to policies to trigger when adopted, to eras to trigger when reached, to buildings to trigger when built. Alternatively, you can add a TriggerCondition to them to make them into Global uniques that activate upon a specific event.They can also be added to units to grant them the ability to trigger this effect as an action, which can be modified with UnitActionModifier and UnitTriggerCondition conditionals.</p> Gain a free [buildingName] [cityFilter] <p>Free buildings CANNOT be self-removing - this leads to an endless loop of trying to add the building</p> <p>Example: \"Gain a free [Library] [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> Remove [buildingFilter] [cityFilter] <p>Example: \"Remove [Culture] [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> Sell [buildingFilter] buildings [cityFilter] <p>Example: \"Sell [Culture] buildings [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> Free [unit] appears <p>Example: \"Free [Musketman] appears\"</p> <p>Applicable to: Triggerable</p> [positiveAmount] free [unit] units appear <p>Example: \"[3] free [Musketman] units appear\"</p> <p>Applicable to: Triggerable</p> Free Social Policy <p>Applicable to: Triggerable</p> [positiveAmount] Free Social Policies <p>Example: \"[3] Free Social Policies\"</p> <p>Applicable to: Triggerable</p> Empire enters golden age <p>Applicable to: Triggerable</p> Empire enters a [positiveAmount]-turn Golden Age <p>Example: \"Empire enters a [3]-turn Golden Age\"</p> <p>Applicable to: Triggerable</p> Free Great Person <p>Applicable to: Triggerable</p> [amount] population [cityFilter] <p>Example: \"[3] population [in all cities]\"</p> <p>Applicable to: Triggerable</p> [amount] population in a random city <p>Example: \"[3] population in a random city\"</p> <p>Applicable to: Triggerable</p> Discover [tech] <p>Example: \"Discover [Agriculture]\"</p> <p>Applicable to: Triggerable</p> Adopt [policy/belief] <p>Example: \"Adopt [Oligarchy]\"</p> <p>Applicable to: Triggerable</p> Remove [policy] <p>Example: \"Remove [Oligarchy]\"</p> <p>Applicable to: Triggerable</p> Remove [policy] and refund [amount]% of its cost <p>Example: \"Remove [Oligarchy] and refund [3]% of its cost\"</p> <p>Applicable to: Triggerable</p> Free Technology <p>Applicable to: Triggerable</p> [positiveAmount] Free Technologies <p>Example: \"[3] Free Technologies\"</p> <p>Applicable to: Triggerable</p> [positiveAmount] free random researchable Tech(s) from the [era] <p>Example: \"[3] free random researchable Tech(s) from the [Ancient era]\"</p> <p>Applicable to: Triggerable</p> Reveals the entire map <p>Applicable to: Triggerable</p> Gain a free [beliefType] belief <p>Example: \"Gain a free [Follower] belief\"</p> <p>Applicable to: Triggerable</p> Triggers voting for the Diplomatic Victory <p>Applicable to: Triggerable</p> Instantly consumes [positiveAmount] [stockpiledResource] <p>Example: \"Instantly consumes [3] [Mana]\"</p> <p>Applicable to: Triggerable</p> Instantly provides [positiveAmount] [stockpiledResource] <p>Example: \"Instantly provides [3] [Mana]\"</p> <p>Applicable to: Triggerable</p> Instantly gain [amount] [stockpile] <p>Example: \"Instantly gain [3] [Mana]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Triggerable</p> Gain [amount] [stat] <p>Example: \"Gain [3] [Culture]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Triggerable</p> Gain [amount]-[amount] [stat] <p>Example: \"Gain [3]-[3] [Culture]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Triggerable</p> Gain enough Faith for a Pantheon <p>Applicable to: Triggerable</p> Gain enough Faith for [positiveAmount]% of a Great Prophet <p>Example: \"Gain enough Faith for [3]% of a Great Prophet\"</p> <p>Applicable to: Triggerable</p> Research [relativeAmount]% of [tech] <p>Example: \"Research [+20]% of [Agriculture]\"</p> <p>Applicable to: Triggerable</p> Gain control over [tileFilter] tiles in a [nonNegativeAmount]-tile radius <p>Example: \"Gain control over [Farm] tiles in a [3]-tile radius\"</p> <p>Applicable to: Triggerable</p> Gain control over [positiveAmount] tiles [cityFilter] <p>Example: \"Gain control over [3] tiles [in all cities]\"</p> <p>Applicable to: Triggerable</p> Reveal up to [positiveAmount/'all'] [tileFilter] within a [positiveAmount] tile radius <p>Example: \"Reveal up to [3] [Farm] within a [3] tile radius\"</p> <p>Applicable to: Triggerable</p> Triggers the following global alert: [comment] <p>Supported on Policies and Technologies.</p> <p>For other targets, the generated Notification may not read nicely, and will likely not support translation. Reason: Your [comment] gets a generated introduction, other triggers usually notify you, not others, and that difference is currently handled by mapping text.</p> <p>Conditionals evaluate in the context of the civilization having the Unique, not the recipients of the alerts.</p> <p>Example: \"Triggers the following global alert: [comment]\"</p> <p>Applicable to: Triggerable</p> Promotes all spies [positiveAmount] time(s) <p>Example: \"Promotes all spies [3] time(s)\"</p> <p>Applicable to: Triggerable</p> Gain an extra spy <p>Applicable to: Triggerable</p> Turn this tile into a [terrainName] tile <p>Example: \"Turn this tile into a [Forest] tile\"</p> <p>Applicable to: Triggerable</p> Remove [resourceFilter] resources from this tile <p>Example: \"Remove [Strategic] resources from this tile\"</p> <p>Applicable to: Triggerable</p> Remove [improvementFilter] improvements from this tile <p>Example: \"Remove [All Road] improvements from this tile\"</p> <p>Applicable to: Triggerable</p> [mapUnitFilter] units gain the [promotion] promotion <p>Works only with promotions that are valid for the unit's type - or for promotions that do not specify any.</p> <p>Example: \"[Wounded] units gain the [Shock I] promotion\"</p> <p>Applicable to: Triggerable</p> Provides the cheapest [stat] building in your first [positiveAmount] cities for free <p>Example: \"Provides the cheapest [Culture] building in your first [3] cities for free\"</p> <p>Applicable to: Triggerable</p> Provides a [buildingName] in your first [positiveAmount] cities for free <p>Example: \"Provides a [Library] in your first [3] cities for free\"</p> <p>Applicable to: Triggerable</p> Triggers a [event] event <p>Example: \"Triggers a [Inspiration] event\"</p> <p>Applicable to: Triggerable</p> Mark tutorial [comment] complete <p>Example: \"Mark tutorial [comment] complete\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable</p> Play [comment] sound <p>See Images and Audio for a list of available sounds.</p> <p>Example: \"Play [comment] sound\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable</p> Get the leader title of [leaderTitle] <p>Example: \"Get the leader title of [Sovereign [leaderName] the Great]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable</p> Suppress warning [validationWarning] <p>Allows suppressing specific validation warnings. Errors, deprecation warnings, or warnings about untyped and non-filtering uniques should be heeded, not suppressed, and are therefore not accepted. Note that this can be used in ModOptions, in the uniques a warning is about, or as modifier on the unique triggering a warning - but you still need to be specific. Even in the modifier case you will need to specify a sufficiently selective portion of the warning text as parameter.</p> <p>Example: \"Suppress warning [Tinman is supposed to automatically upgrade at tech Clockwork, and therefore Servos for its upgrade Mecha may not yet be researched! -or- is supposed to automatically upgrade]\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable, Terrain, Speed, ModOptions, MetaModifier</p>"},{"location":"Modders/uniques/#unittriggerable-uniques","title":"UnitTriggerable uniques","text":"<p>Uniques that have immediate, one-time effects on a unit.They can be added to units (on unit, unit type, or promotion) to grant them the ability to trigger this effect as an action, which can be modified with UnitActionModifier and UnitTriggerCondition conditionals.</p> [unitTriggerTarget] heals [positiveAmount] HP <p>Example: \"[This Unit] heals [3] HP\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] takes [positiveAmount] damage <p>Example: \"[This Unit] takes [3] damage\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] gains [amount] XP <p>Example: \"[This Unit] gains [3] XP\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] upgrades for free <p>Example: \"[This Unit] upgrades for free\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] upgrades for free including special upgrades <p>Example: \"[This Unit] upgrades for free including special upgrades\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] gains the [promotion] promotion <p>Example: \"[This Unit] gains the [Shock I] promotion\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] loses the [promotion] promotion <p>Example: \"[This Unit] loses the [Shock I] promotion\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] gains [positiveAmount] movement <p>Example: \"[This Unit] gains [3] movement\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] loses [positiveAmount] movement <p>Example: \"[This Unit] loses [3] movement\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] gains the [promotion] status for [positiveAmount] turn(s) <p>Statuses are temporary promotions. They do not stack, and reapplying a specific status take the highest number - so reapplying a 3-turn on a 1-turn makes it 3, but doing the opposite will have no effect. Turns left on the status decrease at the start of turn, so bonuses applied for 1 turn are stll applied during other civ's turns.</p> <p>Example: \"[This Unit] gains the [Shock I] status for [3] turn(s)\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] loses the [promotion] status <p>Example: \"[This Unit] loses the [Shock I] status\"</p> <p>Applicable to: UnitTriggerable</p> [unitTriggerTarget] is destroyed <p>Example: \"[This Unit] is destroyed\"</p> <p>Applicable to: UnitTriggerable</p>"},{"location":"Modders/uniques/#global-uniques","title":"Global uniques","text":"<p>Uniques that apply globally. Civs gain the abilities of these uniques from nation uniques, reached eras, researched techs, adopted policies, built buildings, religion 'founder' uniques, owned resources, and ruleset-wide global uniques.</p> [stats] <p>Example: \"[+1 Gold, +2 Production]\"</p> <p>Applicable to: Global, Terrain, Improvement</p> [stats] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every specialist [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from every specialist [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] per [positiveAmount] population [cityFilter] <p>Example: \"[+1 Gold, +2 Production] per [3] population [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] per [positiveAmount] social policies adopted <p>Only works for civ-wide stats</p> <p>Example: \"[+1 Gold, +2 Production] per [3] social policies adopted\"</p> <p>Applicable to: Global</p> [stats] per every [positiveAmount] [civWideStat] <p>Example: \"[+1 Gold, +2 Production] per every [3] [Gold]\"</p> <p>Applicable to: Global</p> [stats] in cities on [terrainFilter] tiles <p>Example: \"[+1 Gold, +2 Production] in cities on [Fresh Water] tiles\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from all [buildingFilter] buildings <p>Example: \"[+1 Gold, +2 Production] from all [Culture] buildings\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles without [tileFilter] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles without [Farm] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every [tileFilter/specialist/buildingFilter] <p>Example: \"[+1 Gold, +2 Production] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from each Trade Route <p>Example: \"[+1 Gold, +2 Production] from each Trade Route\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] <p>Example: \"[+20]% [Culture]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] [cityFilter] <p>Example: \"[+20]% [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from every [tileFilter/buildingFilter] <p>Example: \"[+20]% [Culture] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Yield from every [tileFilter/buildingFilter] <p>Example: \"[+20]% Yield from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from City-States <p>Example: \"[+20]% [Culture] from City-States\"</p> <p>Applicable to: Global</p> [relativeAmount]% [stat] from Trade Routes <p>Example: \"[+20]% [Culture] from Trade Routes\"</p> <p>Applicable to: Global</p> Nullifies [stat] [cityFilter] <p>Example: \"Nullifies [Culture] [in all cities]\"</p> <p>Applicable to: Global</p> Nullifies Growth [cityFilter] <p>Example: \"Nullifies Growth [in all cities]\"</p> <p>Applicable to: Global</p> [relativeAmount]% Production when constructing [buildingFilter] buildings [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [baseUnitFilter] units [cityFilter] <p>Example: \"[+20]% Production when constructing [Melee] units [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [buildingFilter] wonders [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] wonders [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production towards any buildings that already exist in the Capital <p>Example: \"[+20]% Production towards any buildings that already exist in the Capital\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Yield from pillaging tiles <p>Example: \"[+20]% Yield from pillaging tiles\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Health from pillaging tiles <p>Example: \"[+20]% Health from pillaging tiles\"</p> <p>Applicable to: Global, Unit</p> Military Units gifted from City-States start with [positiveAmount] XP <p>Example: \"Military Units gifted from City-States start with [3] XP\"</p> <p>Applicable to: Global</p> Militaristic City-States grant units [positiveAmount] times as fast when you are at war with a common nation <p>Example: \"Militaristic City-States grant units [3] times as fast when you are at war with a common nation\"</p> <p>Applicable to: Global</p> Gifts of Gold to City-States generate [relativeAmount]% more Influence <p>Example: \"Gifts of Gold to City-States generate [+20]% more Influence\"</p> <p>Applicable to: Global</p> Can spend Gold to annex or puppet a City-State that has been your Ally for [nonNegativeAmount] turns <p>Example: \"Can spend Gold to annex or puppet a City-State that has been your Ally for [3] turns\"</p> <p>Applicable to: Global</p> City-State territory always counts as friendly territory <p>Applicable to: Global</p> Allied City-States will occasionally gift Great People <p>Applicable to: Global</p> [relativeAmount]% City-State Influence degradation <p>Example: \"[+20]% City-State Influence degradation\"</p> <p>Applicable to: Global</p> Resting point for Influence with City-States is increased by [amount] <p>Example: \"Resting point for Influence with City-States is increased by [3]\"</p> <p>Applicable to: Global</p> Allied City-States provide [stat] equal to [relativeAmount]% of what they produce for themselves <p>Example: \"Allied City-States provide [Culture] equal to [+20]% of what they produce for themselves\"</p> <p>Applicable to: Global</p> [relativeAmount]% resources gifted by City-States <p>Example: \"[+20]% resources gifted by City-States\"</p> <p>Applicable to: Global</p> [relativeAmount]% Happiness from luxury resources gifted by City-States <p>Example: \"[+20]% Happiness from luxury resources gifted by City-States\"</p> <p>Applicable to: Global</p> City-State Influence recovers at twice the normal rate <p>Applicable to: Global</p> [relativeAmount]% growth [cityFilter] <p>Example: \"[+20]% growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [amount]% Food is carried over after population increases [cityFilter] <p>Example: \"[3]% Food is carried over after population increases [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Food consumption by specialists [cityFilter] <p>Example: \"[+20]% Food consumption by specialists [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% unhappiness from the number of cities <p>Example: \"[+20]% unhappiness from the number of cities\"</p> <p>Applicable to: Global</p> [relativeAmount]% Unhappiness from [populationFilter] [cityFilter] <p>Example: \"[+20]% Unhappiness from [Followers of this Religion] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [amount] Happiness from each type of luxury resource <p>Example: \"[3] Happiness from each type of luxury resource\"</p> <p>Applicable to: Global</p> Retain [relativeAmount]% of the happiness from a luxury after the last copy has been traded away <p>Example: \"Retain [+20]% of the happiness from a luxury after the last copy has been traded away\"</p> <p>Applicable to: Global</p> [relativeAmount]% of excess happiness converted to [stat] <p>Example: \"[+20]% of excess happiness converted to [Culture]\"</p> <p>Applicable to: Global</p> Cannot build [baseUnitFilter] units <p>Example: \"Cannot build [Melee] units\"</p> <p>Applicable to: Global</p> Enables construction of Spaceship parts <p>Applicable to: Global</p> May buy [baseUnitFilter] units for [nonNegativeAmount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [nonNegativeAmount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units for [nonNegativeAmount] [stat] [cityFilter] <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [nonNegativeAmount] [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] [cityFilter] <p>Example: \"May buy [Melee] units with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] for [nonNegativeAmount] times their normal Production cost <p>Example: \"May buy [Melee] units with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] for [nonNegativeAmount] times their normal Production cost <p>Example: \"May buy [Culture] buildings with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing items in cities [relativeAmount]% <p>Example: \"[Culture] cost of purchasing items in cities [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [buildingFilter] buildings [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Culture] buildings [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [baseUnitFilter] units [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Melee] units [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> Enables conversion of city production to [civWideStat] <p>Example: \"Enables conversion of city production to [Gold]\"</p> <p>Applicable to: Global</p> Production to [civWideStat] conversion in cities changed by [relativeAmount]% <p>Example: \"Production to [Gold] conversion in cities changed by [+20]%\"</p> <p>Applicable to: Global</p> Improves movement speed on roads <p>Applicable to: Global</p> Roads connect tiles across rivers <p>Applicable to: Global</p> [relativeAmount]% maintenance on road &amp; railroads <p>Example: \"[+20]% maintenance on road &amp; railroads\"</p> <p>Applicable to: Global</p> No Maintenance costs for improvements in [tileFilter] tiles <p>Example: \"No Maintenance costs for improvements in [Farm] tiles\"</p> <p>Applicable to: Global</p> [relativeAmount]% construction time for [improvementFilter] improvements <p>Example: \"[+20]% construction time for [All Road] improvements\"</p> <p>Applicable to: Global, Unit</p> Can build [improvementFilter] improvements at a [relativeAmount]% rate <p>Example: \"Can build [All Road] improvements at a [+20]% rate\"</p> <p>Applicable to: Global, Unit</p> Gain a free [buildingName] [cityFilter] <p>Free buildings CANNOT be self-removing - this leads to an endless loop of trying to add the building</p> <p>Example: \"Gain a free [Library] [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> [relativeAmount]% maintenance cost for [buildingFilter] buildings [cityFilter] <p>Example: \"[+20]% maintenance cost for [Culture] buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Remove [buildingFilter] [cityFilter] <p>Example: \"Remove [Culture] [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> Sell [buildingFilter] buildings [cityFilter] <p>Example: \"Sell [Culture] buildings [in all cities]\"</p> <p>Applicable to: Triggerable, Global</p> [relativeAmount]% Culture cost of natural border growth [cityFilter] <p>Example: \"[+20]% Culture cost of natural border growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Gold cost of acquiring tiles [cityFilter] <p>Example: \"[+20]% Gold cost of acquiring tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Each city founded increases culture cost of policies [relativeAmount]% less than normal <p>Example: \"Each city founded increases culture cost of policies [+20]% less than normal\"</p> <p>Applicable to: Global</p> [relativeAmount]% Culture cost of adopting new Policies <p>Example: \"[+20]% Culture cost of adopting new Policies\"</p> <p>Applicable to: Global</p> Each city founded increases Science cost of Technologies [relativeAmount]% less than normal <p>Example: \"Each city founded increases Science cost of Technologies [+20]% less than normal\"</p> <p>Applicable to: Global</p> [relativeAmount]% Science cost of researching new Technologies <p>Example: \"[+20]% Science cost of researching new Technologies\"</p> <p>Applicable to: Global</p> [stats] for every known Natural Wonder <p>Example: \"[+1 Gold, +2 Production] for every known Natural Wonder\"</p> <p>Applicable to: Global</p> [stats] for discovering a Natural Wonder (bonus enhanced to [stats] if first to discover it) <p>Example: \"[+1 Gold, +2 Production] for discovering a Natural Wonder (bonus enhanced to [+1 Gold, +2 Production] if first to discover it)\"</p> <p>Applicable to: Global</p> [relativeAmount]% Great Person generation [cityFilter] <p>Example: \"[+20]% Great Person generation [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Gold from Great Merchant trade missions <p>Example: \"[+20]% Gold from Great Merchant trade missions\"</p> <p>Applicable to: Global, Unit</p> Great General provides double combat bonus <p>Applicable to: Global, Unit</p> Receive a free Great Person at the end of every [comment] (every 394 years), after researching [tech]. Each bonus person can only be chosen once. <p>Example: \"Receive a free Great Person at the end of every [comment] (every 394 years), after researching [Agriculture]. Each bonus person can only be chosen once.\"</p> <p>Applicable to: Global</p> Once The Long Count activates, the year on the world screen displays as the traditional Mayan Long Count. <p>Applicable to: Global</p> [amount] Unit Supply <p>Example: \"[3] Unit Supply\"</p> <p>Applicable to: Global</p> [amount] Unit Supply per [positiveAmount] population [cityFilter] <p>Example: \"[3] Unit Supply per [3] population [in all cities]\"</p> <p>Applicable to: Global</p> [amount] Unit Supply per city <p>Example: \"[3] Unit Supply per city\"</p> <p>Applicable to: Global</p> [amount] units cost no maintenance <p>Example: \"[3] units cost no maintenance\"</p> <p>Applicable to: Global</p> Units in cities cost no Maintenance <p>Applicable to: Global</p> Enables embarkation for land units <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global</p> Enables [mapUnitFilter] units to enter ocean tiles <p>Example: \"Enables [Wounded] units to enter ocean tiles\"</p> <p>Applicable to: Global</p> Land units may cross [terrainName] tiles after the first [baseUnitFilter] is earned <p>Example: \"Land units may cross [Forest] tiles after the first [Melee] is earned\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global</p> Enemy [mapUnitFilter] units must spend [positiveAmount] extra movement points when inside your territory <p>Example: \"Enemy [Wounded] units must spend [3] extra movement points when inside your territory\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global</p> New [baseUnitFilter] units start with [amount] XP [cityFilter] <p>Example: \"New [Melee] units start with [3] XP [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> All newly-trained [baseUnitFilter] units [cityFilter] receive the [promotion] promotion <p>Example: \"All newly-trained [Melee] units [in all cities] receive the [Shock I] promotion\"</p> <p>Applicable to: Global, FollowerBelief</p> [mapUnitFilter] Units adjacent to this city heal [amount] HP per turn when healing <p>Example: \"[Wounded] Units adjacent to this city heal [3] HP per turn when healing\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% XP required for promotions <p>Example: \"[+20]% XP required for promotions\"</p> <p>Applicable to: Global</p> [relativeAmount]% City Strength from defensive buildings <p>Example: \"[+20]% City Strength from defensive buildings\"</p> <p>Applicable to: Global</p> [relativeAmount]% Strength for cities <p>Example: \"[+20]% Strength for cities\"</p> <p>Applicable to: Global, FollowerBelief</p> Provides [amount] [resource] <p>Example: \"Provides [3] [Iron]\"</p> <p>Applicable to: Global, FollowerBelief, Improvement</p> [relativeAmount]% [resourceFilter] resource production <p>Example: \"[+20]% [Strategic] resource production\"</p> <p>Applicable to: Global</p> Requires establishing embassies to conduct advanced diplomacy <p>Applicable to: Global</p> Enables Open Borders agreements <p>Applicable to: Global</p> Enables Research agreements <p>Applicable to: Global</p> Science gained from research agreements [relativeAmount]% <p>Example: \"Science gained from research agreements [+20]%\"</p> <p>Applicable to: Global</p> Enables Defensive Pacts <p>Applicable to: Global</p> When declaring friendship, both parties gain a [relativeAmount]% boost to great person generation <p>Example: \"When declaring friendship, both parties gain a [+20]% boost to great person generation\"</p> <p>Applicable to: Global</p> Influence of all other civilizations with all city-states degrades [relativeAmount]% faster <p>Example: \"Influence of all other civilizations with all city-states degrades [+20]% faster\"</p> <p>Applicable to: Global</p> Gain [amount] Influence with a [baseUnitFilter] gift to a City-State <p>Example: \"Gain [3] Influence with a [Melee] gift to a City-State\"</p> <p>Applicable to: Global</p> Resting point for Influence with City-States following this religion [amount] <p>Example: \"Resting point for Influence with City-States following this religion [3]\"</p> <p>Applicable to: Global</p> Notified of new Barbarian encampments <p>Applicable to: Global</p> Receive triple Gold from Barbarian encampments and pillaging Cities <p>Applicable to: Global</p> When conquering an encampment, earn [amount] Gold and recruit a Barbarian unit <p>Example: \"When conquering an encampment, earn [3] Gold and recruit a Barbarian unit\"</p> <p>Applicable to: Global</p> When defeating a [mapUnitFilter] unit, earn [amount] Gold and recruit it <p>Example: \"When defeating a [Wounded] unit, earn [3] Gold and recruit it\"</p> <p>Applicable to: Global</p> May choose [amount] additional [beliefType] beliefs when [foundingOrEnhancing] a religion <p>Example: \"May choose [3] additional [Follower] beliefs when [founding] a religion\"</p> <p>Applicable to: Global</p> May choose [amount] additional belief(s) of any type when [foundingOrEnhancing] a religion <p>Example: \"May choose [3] additional belief(s) of any type when [founding] a religion\"</p> <p>Applicable to: Global</p> [stats] when a city adopts this religion for the first time <p>Example: \"[+1 Gold, +2 Production] when a city adopts this religion for the first time\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Global</p> [relativeAmount]% Natural religion spread [cityFilter] <p>Example: \"[+20]% Natural religion spread [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Religion naturally spreads to cities [amount] tiles away <p>Example: \"Religion naturally spreads to cities [3] tiles away\"</p> <p>Applicable to: Global, FollowerBelief</p> May not generate great prophet equivalents naturally <p>Applicable to: Global</p> [relativeAmount]% Faith cost of generating Great Prophet equivalents <p>Example: \"[+20]% Faith cost of generating Great Prophet equivalents\"</p> <p>Applicable to: Global</p> [relativeAmount]% spy effectiveness [cityFilter] <p>Example: \"[+20]% spy effectiveness [in all cities]\"</p> <p>Applicable to: Global</p> [relativeAmount]% enemy spy effectiveness [cityFilter] <p>Example: \"[+20]% enemy spy effectiveness [in all cities]\"</p> <p>Applicable to: Global</p> New spies start with [amount] level(s) <p>Example: \"New spies start with [3] level(s)\"</p> <p>Applicable to: Global</p> Triggers victory <p>Applicable to: Global</p> Triggers a Cultural Victory upon completion <p>Applicable to: Global</p> May buy items in puppet cities <p>Applicable to: Global</p> May not annex cities <p>Applicable to: Global</p> \"Borrows\" city names from other civilizations in the game <p>Applicable to: Global</p> Cities are razed [amount] times as fast <p>Example: \"Cities are razed [3] times as fast\"</p> <p>Applicable to: Global</p> Receive a tech boost when scientific buildings/wonders are built in capital <p>Applicable to: Global</p> [relativeAmount]% Golden Age length <p>Example: \"[+20]% Golden Age length\"</p> <p>Applicable to: Global</p> Population loss from nuclear attacks [relativeAmount]% [cityFilter] <p>Example: \"Population loss from nuclear attacks [+20]% [in all cities]\"</p> <p>Applicable to: Global</p> Damage to garrison from nuclear attacks [relativeAmount]% [cityFilter] <p>Example: \"Damage to garrison from nuclear attacks [+20]% [in all cities]\"</p> <p>Applicable to: Global</p> Rebel units may spawn <p>Applicable to: Global</p> [relativeAmount]% Strength <p>Example: \"[+20]% Strength\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Strength decreasing with distance from the capital <p>Example: \"[+20]% Strength decreasing with distance from the capital\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% to Flank Attack bonuses <p>Example: \"[+20]% to Flank Attack bonuses\"</p> <p>Applicable to: Global, Unit</p> [amount] additional attacks per turn <p>Example: \"[3] additional attacks per turn\"</p> <p>Applicable to: Global, Unit</p> [amount] Movement <p>Example: \"[3] Movement\"</p> <p>Applicable to: Global, Unit</p> [amount] Sight <p>Example: \"[3] Sight\"</p> <p>Applicable to: Global, Unit, Terrain</p> [amount] Range <p>Example: \"[3] Range\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount] Air Interception Range <p>Example: \"[+20] Air Interception Range\"</p> <p>Applicable to: Global, Unit</p> [amount] HP when healing <p>Example: \"[3] HP when healing\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Spread Religion Strength <p>Example: \"[+20]% Spread Religion Strength\"</p> <p>Applicable to: Global, Unit</p> When spreading religion to a city, gain [amount] times the amount of followers of other religions as [stat] <p>Example: \"When spreading religion to a city, gain [3] times the amount of followers of other religions as [Culture]\"</p> <p>Applicable to: Global, Unit</p> Ranged attacks may be performed over obstacles <p>Applicable to: Global, Unit</p> No defensive terrain bonus <p>Applicable to: Global, Unit</p> No defensive terrain penalty <p>Applicable to: Global, Unit</p> No damage penalty for wounded units <p>Applicable to: Global, Unit</p> Unable to capture cities <p>Applicable to: Global, Unit</p> Unable to pillage tiles <p>Applicable to: Global, Unit</p> Destroys [cityFilter] cities instead of capturing <p>The unit will destroy [cityFilter] cities instead of capturing them, also allows non-melee units to destroy cities.Capital cities (including city states) are immune to this effect.</p> <p>Example: \"Destroys [in all cities] cities instead of capturing\"</p> <p>Applicable to: Global, Unit</p> No movement cost to pillage <p>Applicable to: Global, Unit</p> May heal outside of friendly territory <p>Applicable to: Global, Unit</p> All healing effects doubled <p>Applicable to: Global, Unit</p> Heals [amount] damage if it kills a unit <p>Example: \"Heals [3] damage if it kills a unit\"</p> <p>Applicable to: Global, Unit</p> Can only heal by pillaging <p>Applicable to: Global, Unit</p> [relativeAmount]% maintenance costs <p>Example: \"[+20]% maintenance costs\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Gold cost of upgrading <p>Example: \"[+20]% Gold cost of upgrading\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of the damage done to [combatantFilter] units as [stockpile] <p>Example: \"Earn [3]% of the damage done to [City] units as [Mana]\"</p> <p>Applicable to: Global, Unit</p> Upon capturing a city, receive [amount] times its [stat] production as [stockpile] immediately <p>Example: \"Upon capturing a city, receive [3] times its [Culture] production as [Mana] immediately\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of killed [mapUnitFilter] unit's [costOrStrength] as [stockpile] <p>Example: \"Earn [3]% of killed [Wounded] unit's [Cost] as [Mana]\"</p> <p>Applicable to: Global, Unit</p> [amount] XP gained from combat <p>Example: \"[3] XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% XP gained from combat <p>Example: \"[+20]% XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> [greatPerson] is earned [relativeAmount]% faster <p>Example: \"[Great General] is earned [+20]% faster\"</p> <p>Applicable to: Global, Unit</p> [nonNegativeAmount] Movement point cost to disembark <p>Example: \"[3] Movement point cost to disembark\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global, Unit</p> [nonNegativeAmount] Movement point cost to embark <p>Example: \"[3] Movement point cost to embark\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global, Unit</p>"},{"location":"Modders/uniques/#nation-uniques","title":"Nation uniques","text":"Starts with [tech] <p>Example: \"Starts with [Agriculture]\"</p> <p>Applicable to: Nation</p> Starts with [policy] adopted <p>Example: \"Starts with [Oligarchy] adopted\"</p> <p>Applicable to: Nation</p> All units move through Forest and Jungle Tiles in friendly territory as if they have roads. These tiles can be used to establish City Connections upon researching the Wheel. <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Nation</p> Units ignore terrain costs when moving into any tile with Hills <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Nation</p> Excluded from map editor <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Terrain, Improvement, Resource</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Will not be chosen for new games <p>Applicable to: Nation</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#personality-uniques","title":"Personality uniques","text":"Will not build [baseUnitFilter/buildingFilter] <p>Example: \"Will not build [Melee]\"</p> <p>Applicable to: Personality</p>"},{"location":"Modders/uniques/#era-uniques","title":"Era uniques","text":"Starting in this era disables religion <p>Applicable to: Era</p> Every major Civilization gains a spy once a civilization enters this era <p>Applicable to: Era</p>"},{"location":"Modders/uniques/#tech-uniques","title":"Tech uniques","text":"Enables establishment of embassies <p>Applicable to: Tech</p> Starting tech <p>Applicable to: Tech</p> Can be continually researched <p>Applicable to: Tech</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Cannot be hurried <p>Applicable to: Tech, Building</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#policy-uniques","title":"Policy uniques","text":"Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#founderbelief-uniques","title":"FounderBelief uniques","text":"<p>Uniques for Founder and Enhancer type Beliefs, that will apply to the founder of this religion</p> [stats] for each global city following this religion <p>Example: \"[+1 Gold, +2 Production] for each global city following this religion\"</p> <p>Applicable to: FounderBelief</p> [stats] from every [positiveAmount] global followers [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from every [3] global followers [in all cities]\"</p> <p>Applicable to: FounderBelief</p> [relativeAmount]% [stat] from every follower, up to [relativeAmount]% <p>Example: \"[+20]% [Culture] from every follower, up to [+20]%\"</p> <p>Applicable to: FounderBelief, FollowerBelief</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#followerbelief-uniques","title":"FollowerBelief uniques","text":"<p>Uniques for Pantheon and Follower type beliefs, that will apply to each city where the religion is the majority religion</p> [stats] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every specialist [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from every specialist [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] per [positiveAmount] population [cityFilter] <p>Example: \"[+1 Gold, +2 Production] per [3] population [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] in cities on [terrainFilter] tiles <p>Example: \"[+1 Gold, +2 Production] in cities on [Fresh Water] tiles\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from all [buildingFilter] buildings <p>Example: \"[+1 Gold, +2 Production] from all [Culture] buildings\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles without [tileFilter] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles without [Farm] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every [tileFilter/specialist/buildingFilter] <p>Example: \"[+1 Gold, +2 Production] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from each Trade Route <p>Example: \"[+1 Gold, +2 Production] from each Trade Route\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] <p>Example: \"[+20]% [Culture]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] [cityFilter] <p>Example: \"[+20]% [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from every [tileFilter/buildingFilter] <p>Example: \"[+20]% [Culture] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Yield from every [tileFilter/buildingFilter] <p>Example: \"[+20]% Yield from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from every follower, up to [relativeAmount]% <p>Example: \"[+20]% [Culture] from every follower, up to [+20]%\"</p> <p>Applicable to: FounderBelief, FollowerBelief</p> [relativeAmount]% Production when constructing [buildingFilter] buildings [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [baseUnitFilter] units [cityFilter] <p>Example: \"[+20]% Production when constructing [Melee] units [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [buildingFilter] wonders [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] wonders [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production towards any buildings that already exist in the Capital <p>Example: \"[+20]% Production towards any buildings that already exist in the Capital\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% growth [cityFilter] <p>Example: \"[+20]% growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [amount]% Food is carried over after population increases [cityFilter] <p>Example: \"[3]% Food is carried over after population increases [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Food consumption by specialists [cityFilter] <p>Example: \"[+20]% Food consumption by specialists [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Unhappiness from [populationFilter] [cityFilter] <p>Example: \"[+20]% Unhappiness from [Followers of this Religion] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units for [nonNegativeAmount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [nonNegativeAmount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units for [nonNegativeAmount] [stat] [cityFilter] <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [nonNegativeAmount] [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] [cityFilter] <p>Example: \"May buy [Melee] units with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] for [nonNegativeAmount] times their normal Production cost <p>Example: \"May buy [Melee] units with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] for [nonNegativeAmount] times their normal Production cost <p>Example: \"May buy [Culture] buildings with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing items in cities [relativeAmount]% <p>Example: \"[Culture] cost of purchasing items in cities [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [buildingFilter] buildings [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Culture] buildings [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [baseUnitFilter] units [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Melee] units [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% maintenance cost for [buildingFilter] buildings [cityFilter] <p>Example: \"[+20]% maintenance cost for [Culture] buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Culture cost of natural border growth [cityFilter] <p>Example: \"[+20]% Culture cost of natural border growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Gold cost of acquiring tiles [cityFilter] <p>Example: \"[+20]% Gold cost of acquiring tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Great Person generation [cityFilter] <p>Example: \"[+20]% Great Person generation [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> New [baseUnitFilter] units start with [amount] XP [cityFilter] <p>Example: \"New [Melee] units start with [3] XP [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> All newly-trained [baseUnitFilter] units [cityFilter] receive the [promotion] promotion <p>Example: \"All newly-trained [Melee] units [in all cities] receive the [Shock I] promotion\"</p> <p>Applicable to: Global, FollowerBelief</p> [mapUnitFilter] Units adjacent to this city heal [amount] HP per turn when healing <p>Example: \"[Wounded] Units adjacent to this city heal [3] HP per turn when healing\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Strength for cities <p>Example: \"[+20]% Strength for cities\"</p> <p>Applicable to: Global, FollowerBelief</p> Provides [amount] [resource] <p>Example: \"Provides [3] [Iron]\"</p> <p>Applicable to: Global, FollowerBelief, Improvement</p> [relativeAmount]% Natural religion spread [cityFilter] <p>Example: \"[+20]% Natural religion spread [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Religion naturally spreads to cities [amount] tiles away <p>Example: \"Religion naturally spreads to cities [3] tiles away\"</p> <p>Applicable to: Global, FollowerBelief</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Earn [amount]% of [mapUnitFilter] unit's [costOrStrength] as [stockpile] when killed within 4 tiles of a city following this religion <p>Example: \"Earn [3]% of [Wounded] unit's [Cost] as [Mana] when killed within 4 tiles of a city following this religion\"</p> <p>Applicable to: FollowerBelief</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#building-uniques","title":"Building uniques","text":"[positiveAmount]% of [stat] from every [improvementFilter/buildingFilter] in the city added to [resource] <p>Example: \"[3]% of [Culture] from every [All Road] in the city added to [Iron]\"</p> <p>Applicable to: Building</p> Consumes [amount] [resource] <p>Example: \"Consumes [3] [Iron]\"</p> <p>Applicable to: Building, Unit, Improvement</p> Costs [amount] [stockpiledResource] <p>These resources are removed when work begins on the construction. Do not confuse with \"costs [amount] [stockpiledResource]\" (lowercase 'c'), the Unit Action Modifier.</p> <p>Example: \"Costs [3] [Mana]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Building, Unit, Improvement</p> Unbuildable <p>Blocks from being built, possibly by conditional. However it can still appear in the menu and be bought with other means such as Gold or Faith</p> <p>Applicable to: Building, Unit, Improvement</p> Cannot be purchased <p>Applicable to: Building, Unit</p> Can be purchased with [stat] [cityFilter] <p>Example: \"Can be purchased with [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Can be purchased for [amount] [stat] [cityFilter] <p>Example: \"Can be purchased for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Limited to [amount] per Civilization <p>Example: \"Limited to [3] per Civilization\"</p> <p>Applicable to: Building, Unit</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Excess Food converted to Production when under construction <p>Applicable to: Building, Unit</p> Requires at least [amount] population <p>Example: \"Requires at least [3] population\"</p> <p>Applicable to: Building, Unit</p> Triggers a global alert upon build start <p>Applicable to: Building, Unit</p> Triggers a global alert upon completion <p>Applicable to: Building, Unit</p> Cost increases by [amount] per owned city <p>Example: \"Cost increases by [3] per owned city\"</p> <p>Applicable to: Building, Unit</p> Cost increases by [amount] when built <p>Example: \"Cost increases by [3] when built\"</p> <p>Applicable to: Building, Unit</p> [amount]% production cost <p>Intended to be used with conditionals to dynamically alter construction costs</p> <p>Example: \"[3]% production cost\"</p> <p>Applicable to: Building, Unit</p> Can only be built <p>Meant to be used together with conditionals, like \"Can only be built &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also NOT block Upgrade and Transform actions. See also OnlyAvailable.</p> <p>Applicable to: Building, Unit</p> Must have an owned [tileFilter] within [amount] tiles <p>Example: \"Must have an owned [Farm] within [3] tiles\"</p> <p>Applicable to: Building</p> Enables nuclear weapon <p>Applicable to: Building</p> Must be on [tileFilter] <p>Example: \"Must be on [Farm]\"</p> <p>Applicable to: Building</p> Must not be on [tileFilter] <p>Example: \"Must not be on [Farm]\"</p> <p>Applicable to: Building</p> Must be next to [tileFilter] <p>Example: \"Must be next to [Farm]\"</p> <p>Applicable to: Building, Improvement</p> Must not be next to [tileFilter] <p>Example: \"Must not be next to [Farm]\"</p> <p>Applicable to: Building</p> Unsellable <p>Applicable to: Building</p> Obsolete with [tech] <p>Example: \"Obsolete with [Agriculture]\"</p> <p>Applicable to: Building, Improvement, Resource</p> Indicates the capital city <p>Applicable to: Building</p> Moves to new capital when capital changes <p>Applicable to: Building</p> Provides 1 extra copy of each improved luxury resource near this City <p>Applicable to: Building</p> Destroyed when the city is captured <p>Applicable to: Building</p> Never destroyed when the city is captured <p>Applicable to: Building</p> Doubles Gold given to enemy if city is captured <p>Applicable to: Building</p> Removes extra unhappiness from annexed cities <p>Applicable to: Building</p> Connects trade routes over water <p>Applicable to: Building</p> Automatically built in all cities where it is buildable <p>Applicable to: Building</p> Creates a [improvementName] improvement on a specific tile <p>When choosing to construct this building, the player must select a tile where the improvement can be built. Upon building completion, the tile will gain this improvement. Limited to one per building.</p> <p>Example: \"Creates a [Trading Post] improvement on a specific tile\"</p> <p>Applicable to: Building</p> Can carry [amount] extra [mapUnitFilter] units <p>For buildings, supports using <code>Air</code> for <code>mapUnitFilter</code> to increase city air unit capacity.</p> <p>Example: \"Can carry [3] extra [Wounded] units\"</p> <p>Applicable to: Building, Unit</p> Spaceship part <p>Applicable to: Building, Unit</p> Cannot be hurried <p>Applicable to: Tech, Building</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Shown while unbuilable <p>This unique is automatically hidden from users.</p> <p>Applicable to: Building, Unit</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#unitaction-uniques","title":"UnitAction uniques","text":"<p>Uniques that affect a unit's actions, and can be modified by UnitActionModifiers</p> Founds a new city <p>Applicable to: UnitAction</p> Founds a new puppet city <p>Applicable to: UnitAction</p> Can instantly construct a [improvementFilter] improvement <p>Example: \"Can instantly construct a [All Road] improvement\"</p> <p>Applicable to: UnitAction</p> Can Spread Religion <p>Applicable to: UnitAction</p> Can remove other religions from cities <p>Applicable to: UnitAction</p> May found a religion <p>Applicable to: UnitAction</p> May enhance a religion <p>Applicable to: UnitAction</p> Can transform to [unit] <p>By default consumes all movement</p> <p>Example: \"Can transform to [Musketman]\"</p> <p>Applicable to: UnitAction</p>"},{"location":"Modders/uniques/#unit-uniques","title":"Unit uniques","text":"<p>Uniques that can be added to units, unit types, or promotions</p> [relativeAmount]% Yield from pillaging tiles <p>Example: \"[+20]% Yield from pillaging tiles\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Health from pillaging tiles <p>Example: \"[+20]% Health from pillaging tiles\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% construction time for [improvementFilter] improvements <p>Example: \"[+20]% construction time for [All Road] improvements\"</p> <p>Applicable to: Global, Unit</p> Can build [improvementFilter] improvements at a [relativeAmount]% rate <p>Example: \"Can build [All Road] improvements at a [+20]% rate\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Gold from Great Merchant trade missions <p>Example: \"[+20]% Gold from Great Merchant trade missions\"</p> <p>Applicable to: Global, Unit</p> Great General provides double combat bonus <p>Applicable to: Global, Unit</p> Consumes [amount] [resource] <p>Example: \"Consumes [3] [Iron]\"</p> <p>Applicable to: Building, Unit, Improvement</p> Costs [amount] [stockpiledResource] <p>These resources are removed when work begins on the construction. Do not confuse with \"costs [amount] [stockpiledResource]\" (lowercase 'c'), the Unit Action Modifier.</p> <p>Example: \"Costs [3] [Mana]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Building, Unit, Improvement</p> Unbuildable <p>Blocks from being built, possibly by conditional. However it can still appear in the menu and be bought with other means such as Gold or Faith</p> <p>Applicable to: Building, Unit, Improvement</p> Cannot be purchased <p>Applicable to: Building, Unit</p> Can be purchased with [stat] [cityFilter] <p>Example: \"Can be purchased with [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Can be purchased for [amount] [stat] [cityFilter] <p>Example: \"Can be purchased for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Limited to [amount] per Civilization <p>Example: \"Limited to [3] per Civilization\"</p> <p>Applicable to: Building, Unit</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Excess Food converted to Production when under construction <p>Applicable to: Building, Unit</p> Requires at least [amount] population <p>Example: \"Requires at least [3] population\"</p> <p>Applicable to: Building, Unit</p> Triggers a global alert upon build start <p>Applicable to: Building, Unit</p> Triggers a global alert upon completion <p>Applicable to: Building, Unit</p> Cost increases by [amount] per owned city <p>Example: \"Cost increases by [3] per owned city\"</p> <p>Applicable to: Building, Unit</p> Cost increases by [amount] when built <p>Example: \"Cost increases by [3] when built\"</p> <p>Applicable to: Building, Unit</p> [amount]% production cost <p>Intended to be used with conditionals to dynamically alter construction costs</p> <p>Example: \"[3]% production cost\"</p> <p>Applicable to: Building, Unit</p> Can only be built <p>Meant to be used together with conditionals, like \"Can only be built &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also NOT block Upgrade and Transform actions. See also OnlyAvailable.</p> <p>Applicable to: Building, Unit</p> May create improvements on water resources <p>Applicable to: Unit</p> Can build [improvementFilter/terrainFilter] improvements on tiles <p>Example: \"Can build [All Road] improvements on tiles\"</p> <p>Applicable to: Unit</p> Can be added to [comment] in the Capital <p>Example: \"Can be added to [comment] in the Capital\"</p> <p>Applicable to: Unit</p> Prevents spreading of religion to the city it is next to <p>Applicable to: Unit</p> Removes other religions when spreading religion <p>Applicable to: Unit</p> May Paradrop to [tileFilter] tiles up to [positiveAmount] tiles away <p>Example: \"May Paradrop to [Farm] tiles up to [3] tiles away\"</p> <p>Applicable to: Unit</p> Can perform Air Sweep <p>Applicable to: Unit</p> Can speed up construction of a building <p>Applicable to: Unit</p> Can speed up the construction of a wonder <p>Applicable to: Unit</p> Can hurry technology research <p>Applicable to: Unit</p> Can generate a large amount of culture <p>Applicable to: Unit</p> Can undertake a trade mission with City-State, giving a large sum of gold and [amount] Influence <p>Example: \"Can undertake a trade mission with City-State, giving a large sum of gold and [3] Influence\"</p> <p>Applicable to: Unit</p> Automation is a primary action <p>This unique is automatically hidden from users.</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength <p>Example: \"[+20]% Strength\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Strength decreasing with distance from the capital <p>Example: \"[+20]% Strength decreasing with distance from the capital\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% to Flank Attack bonuses <p>Example: \"[+20]% to Flank Attack bonuses\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Strength for enemy [mapUnitFilter] units in adjacent [tileFilter] tiles <p>Example: \"[+20]% Strength for enemy [Wounded] units in adjacent [Farm] tiles\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength bonus for [mapUnitFilter] units within [amount] tiles <p>Example: \"[+20]% Strength bonus for [Wounded] units within [3] tiles\"</p> <p>Applicable to: Unit</p> [amount] additional attacks per turn <p>Example: \"[3] additional attacks per turn\"</p> <p>Applicable to: Global, Unit</p> [amount] Movement <p>Example: \"[3] Movement\"</p> <p>Applicable to: Global, Unit</p> [amount] Sight <p>Example: \"[3] Sight\"</p> <p>Applicable to: Global, Unit, Terrain</p> [amount] Range <p>Example: \"[3] Range\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount] Air Interception Range <p>Example: \"[+20] Air Interception Range\"</p> <p>Applicable to: Global, Unit</p> [amount] HP when healing <p>Example: \"[3] HP when healing\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Spread Religion Strength <p>Example: \"[+20]% Spread Religion Strength\"</p> <p>Applicable to: Global, Unit</p> When spreading religion to a city, gain [amount] times the amount of followers of other religions as [stat] <p>Example: \"When spreading religion to a city, gain [3] times the amount of followers of other religions as [Culture]\"</p> <p>Applicable to: Global, Unit</p> Can only attack [combatantFilter] units <p>Example: \"Can only attack [City] units\"</p> <p>Applicable to: Unit</p> Can only attack [tileFilter] tiles <p>Example: \"Can only attack [Farm] tiles\"</p> <p>Applicable to: Unit</p> Cannot attack <p>Applicable to: Unit</p> Must set up to ranged attack <p>Applicable to: Unit</p> Self-destructs when attacking <p>Applicable to: Unit</p> Eliminates combat penalty for attacking across a coast <p>Applicable to: Unit</p> May attack when embarked <p>Applicable to: Unit</p> Eliminates combat penalty for attacking over a river <p>Applicable to: Unit</p> Blast radius [amount] <p>Example: \"Blast radius [3]\"</p> <p>Applicable to: Unit</p> Ranged attacks may be performed over obstacles <p>Applicable to: Global, Unit</p> Nuclear weapon of Strength [amount] <p>Example: \"Nuclear weapon of Strength [3]\"</p> <p>Applicable to: Unit</p> No defensive terrain bonus <p>Applicable to: Global, Unit</p> No defensive terrain penalty <p>Applicable to: Global, Unit</p> No damage penalty for wounded units <p>Applicable to: Global, Unit</p> Uncapturable <p>Applicable to: Unit</p> Withdraws before melee combat <p>Applicable to: Unit</p> Unable to capture cities <p>Applicable to: Global, Unit</p> Unable to pillage tiles <p>Applicable to: Global, Unit</p> Destroys [cityFilter] cities instead of capturing <p>The unit will destroy [cityFilter] cities instead of capturing them, also allows non-melee units to destroy cities.Capital cities (including city states) are immune to this effect.</p> <p>Example: \"Destroys [in all cities] cities instead of capturing\"</p> <p>Applicable to: Global, Unit</p> No movement cost to pillage <p>Applicable to: Global, Unit</p> Can move after attacking <p>Applicable to: Unit</p> Transfer Movement to [mapUnitFilter] <p>Example: \"Transfer Movement to [Wounded]\"</p> <p>Applicable to: Unit</p> Can move immediately once bought <p>Applicable to: Unit</p> May heal outside of friendly territory <p>Applicable to: Global, Unit</p> All healing effects doubled <p>Applicable to: Global, Unit</p> Heals [amount] damage if it kills a unit <p>Example: \"Heals [3] damage if it kills a unit\"</p> <p>Applicable to: Global, Unit</p> Can only heal by pillaging <p>Applicable to: Global, Unit</p> Unit will heal every turn, even if it performs an action <p>Applicable to: Unit</p> All adjacent units heal [amount] HP when healing <p>Example: \"All adjacent units heal [3] HP when healing\"</p> <p>Applicable to: Unit</p> No Sight <p>Applicable to: Unit</p> Can see over obstacles <p>Applicable to: Unit</p> Can carry [amount] [mapUnitFilter] units <p>Example: \"Can carry [3] [Wounded] units\"</p> <p>Applicable to: Unit</p> Can carry [amount] extra [mapUnitFilter] units <p>For buildings, supports using <code>Air</code> for <code>mapUnitFilter</code> to increase city air unit capacity.</p> <p>Example: \"Can carry [3] extra [Wounded] units\"</p> <p>Applicable to: Building, Unit</p> Cannot be carried by [mapUnitFilter] units <p>Example: \"Cannot be carried by [Wounded] units\"</p> <p>Applicable to: Unit</p> [relativeAmount]% chance to intercept air attacks <p>Example: \"[+20]% chance to intercept air attacks\"</p> <p>Applicable to: Unit</p> Damage taken from interception reduced by [relativeAmount]% <p>Example: \"Damage taken from interception reduced by [+20]%\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Damage when intercepting <p>Example: \"[+20]% Damage when intercepting\"</p> <p>Applicable to: Unit</p> [amount] extra interceptions may be made per turn <p>Example: \"[3] extra interceptions may be made per turn\"</p> <p>Applicable to: Unit</p> Cannot be intercepted <p>Applicable to: Unit</p> Cannot intercept [mapUnitFilter] units <p>Example: \"Cannot intercept [Wounded] units\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength when performing Air Sweep <p>Example: \"[+20]% Strength when performing Air Sweep\"</p> <p>Applicable to: Unit</p> [relativeAmount]% maintenance costs <p>Example: \"[+20]% maintenance costs\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Gold cost of upgrading <p>Example: \"[+20]% Gold cost of upgrading\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of the damage done to [combatantFilter] units as [stockpile] <p>Example: \"Earn [3]% of the damage done to [City] units as [Mana]\"</p> <p>Applicable to: Global, Unit</p> Upon capturing a city, receive [amount] times its [stat] production as [stockpile] immediately <p>Example: \"Upon capturing a city, receive [3] times its [Culture] production as [Mana] immediately\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of killed [mapUnitFilter] unit's [costOrStrength] as [stockpile] <p>Example: \"Earn [3]% of killed [Wounded] unit's [Cost] as [Mana]\"</p> <p>Applicable to: Global, Unit</p> May capture killed [mapUnitFilter] units <p>Example: \"May capture killed [Wounded] units\"</p> <p>Applicable to: Unit</p> [amount] XP gained from combat <p>Example: \"[3] XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% XP gained from combat <p>Example: \"[+20]% XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> Can be earned through combat <p>Applicable to: Unit</p> [greatPerson] is earned [relativeAmount]% faster <p>Example: \"[Great General] is earned [+20]% faster\"</p> <p>Applicable to: Global, Unit</p> Invisible to others <p>Applicable to: Unit</p> Invisible to non-adjacent units <p>Applicable to: Unit</p> Can see invisible [mapUnitFilter] units <p>Example: \"Can see invisible [Wounded] units\"</p> <p>Applicable to: Unit</p> May upgrade to [unit] through ruins-like effects <p>Example: \"May upgrade to [Musketman] through ruins-like effects\"</p> <p>Applicable to: Unit</p> Can upgrade to [unit] <p>Example: \"Can upgrade to [Musketman]\"</p> <p>Applicable to: Unit</p> Destroys tile improvements when attacking <p>Applicable to: Unit</p> Cannot move <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Double movement in [terrainFilter] <p>Example: \"Double movement in [Fresh Water]\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> All tiles cost 1 movement <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> May travel on Water tiles without embarking <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Can pass through impassable tiles <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Ignores terrain cost <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Ignores Zone of Control <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Rough terrain penalty <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Can enter ice tiles <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> Cannot embark <p>Applicable to: Unit</p> Cannot enter ocean tiles <p>Applicable to: Unit</p> May enter foreign tiles without open borders <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> May enter foreign tiles without open borders, but loses [amount] religious strength each turn it ends there <p>Example: \"May enter foreign tiles without open borders, but loses [3] religious strength each turn it ends there\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Unit</p> [nonNegativeAmount] Movement point cost to disembark <p>Example: \"[3] Movement point cost to disembark\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global, Unit</p> [nonNegativeAmount] Movement point cost to embark <p>Example: \"[3] Movement point cost to embark\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Global, Unit</p> Never appears as a Barbarian unit <p>This unique is automatically hidden from users.</p> <p>Applicable to: Unit</p> Religious Unit <p>Applicable to: Unit</p> Spaceship part <p>Applicable to: Building, Unit</p> Takes your religion over the one in their birth city <p>Applicable to: Unit</p> Great Person - [comment] <p>Example: \"Great Person - [comment]\"</p> <p>Applicable to: Unit</p> Is part of Great Person group [comment] <p>Great people in the same group increase teach other's costs when gained. Gaining one will make all others in the same group cost more GPP.</p> <p>Example: \"Is part of Great Person group [comment]\"</p> <p>Applicable to: Unit</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Shown while unbuilable <p>This unique is automatically hidden from users.</p> <p>Applicable to: Building, Unit</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#unittype-uniques","title":"UnitType uniques","text":"Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#promotion-uniques","title":"Promotion uniques","text":"Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Not shown on world screen <p>This unique is automatically hidden from users.</p> <p>Applicable to: Promotion, Resource</p> Doing so will consume this opportunity to choose a Promotion <p>Applicable to: Promotion</p> This Promotion is free <p>Applicable to: Promotion</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#terrain-uniques","title":"Terrain uniques","text":"[stats] <p>Example: \"[+1 Gold, +2 Production]\"</p> <p>Applicable to: Global, Terrain, Improvement</p> [amount] Sight <p>Example: \"[3] Sight\"</p> <p>Applicable to: Global, Unit, Terrain</p> Must be adjacent to [amount] [simpleTerrain] tiles <p>Example: \"Must be adjacent to [3] [Elevated] tiles\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Must be adjacent to [amount] to [amount] [simpleTerrain] tiles <p>Example: \"Must be adjacent to [3] to [3] [Elevated] tiles\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Must not be on [amount] largest landmasses <p>Example: \"Must not be on [3] largest landmasses\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Must be on [amount] largest landmasses <p>Example: \"Must be on [3] largest landmasses\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Occurs on latitudes from [amount] to [amount] percent of distance equator to pole <p>Example: \"Occurs on latitudes from [3] to [3] percent of distance equator to pole\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Occurs in groups of [amount] to [amount] tiles <p>Example: \"Occurs in groups of [3] to [3] tiles\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Neighboring tiles will convert to [baseTerrain/terrainFeature] <p>Supports conditionals that need only a Tile as context and nothing else, like <code>&lt;with [n]% chance&gt;</code>, and applies them per neighbor.</p> <p>If your mod renames Coast or Lakes, do not use this with one of these as parameter, as the code preventing artifacts won't work.</p> <p>Example: \"Neighboring tiles will convert to [Grassland]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Grants [stats] to the first civilization to discover it <p>Example: \"Grants [+1 Gold, +2 Production] to the first civilization to discover it\"</p> <p>Applicable to: Terrain</p> Units ending their turn on this terrain take [amount] damage <p>Example: \"Units ending their turn on this terrain take [3] damage\"</p> <p>Due to performance considerations, this unique is cached, thus conditionals that may change within a turn may not work.</p> <p>Applicable to: Terrain</p> Grants [promotion] ([comment]) to adjacent [mapUnitFilter] units for the rest of the game <p>Example: \"Grants [Shock I] ([comment]) to adjacent [Wounded] units for the rest of the game\"</p> <p>Applicable to: Terrain</p> [amount] Strength for cities built on this terrain <p>Example: \"[3] Strength for cities built on this terrain\"</p> <p>Applicable to: Terrain</p> Provides a one-time bonus of [stats] to the closest city when cut down <p>Example: \"Provides a one-time bonus of [+1 Gold, +2 Production] to the closest city when cut down\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>This unique's effect can be modified with &lt;(modified by game progress up to [relativeAmount]%)&gt;</p> <p>Applicable to: Terrain</p> Vegetation <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Improvement</p> Tile provides yield without assigned population <p>Applicable to: Terrain, Improvement</p> Nullifies all other stats this tile provides <p>Applicable to: Terrain</p> Only [improvementFilter] improvements may be built on this tile <p>Example: \"Only [All Road] improvements may be built on this tile\"</p> <p>Applicable to: Terrain</p> Blocks line-of-sight from tiles at same elevation <p>Applicable to: Terrain</p> Has an elevation of [amount] for visibility calculations <p>Example: \"Has an elevation of [3] for visibility calculations\"</p> <p>Applicable to: Terrain</p> Always Fertility [amount] for Map Generation <p>Example: \"Always Fertility [3] for Map Generation\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> [amount] to Fertility for Map Generation <p>Example: \"[3] to Fertility for Map Generation\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount] <p>Example: \"A Region is formed with at least [3]% [Elevated] tiles, with priority [3]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount] <p>Example: \"A Region is formed with at least [3]% [Elevated] tiles and [Elevated] tiles, with priority [3]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> A Region can not contain more [simpleTerrain] tiles than [simpleTerrain] tiles <p>Example: \"A Region can not contain more [Elevated] tiles than [Elevated] tiles\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Base Terrain on this tile is not counted for Region determination <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Starts in regions of this type receive an extra [resource] <p>Example: \"Starts in regions of this type receive an extra [Iron]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Never receives any resources <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Becomes [terrainName] when adjacent to [terrainFilter] <p>Example: \"Becomes [Forest] when adjacent to [Fresh Water]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Considered [terrainQuality] when determining start locations <p>Example: \"Considered [Undesirable] when determining start locations\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Doesn't generate naturally <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Resource</p> Occurs at temperature between [fraction] and [fraction] and humidity between [fraction] and [fraction] <p>Example: \"Occurs at temperature between [0.5] and [0.5] and humidity between [0.5] and [0.5]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Resource</p> Occurs in chains at high elevations <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Occurs in groups around high elevations <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Every [amount] tiles with this terrain will receive a major deposit of a strategic resource. <p>Example: \"Every [3] tiles with this terrain will receive a major deposit of a strategic resource.\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain</p> Rare feature <p>Applicable to: Terrain</p> [amount]% Chance to be destroyed by nukes <p>Example: \"[3]% Chance to be destroyed by nukes\"</p> <p>Applicable to: Terrain</p> Fresh water <p>Applicable to: Terrain</p> Rough terrain <p>Applicable to: Terrain</p> Excluded from map editor <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Terrain, Improvement, Resource</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Suppress warning [validationWarning] <p>Allows suppressing specific validation warnings. Errors, deprecation warnings, or warnings about untyped and non-filtering uniques should be heeded, not suppressed, and are therefore not accepted. Note that this can be used in ModOptions, in the uniques a warning is about, or as modifier on the unique triggering a warning - but you still need to be specific. Even in the modifier case you will need to specify a sufficiently selective portion of the warning text as parameter.</p> <p>Example: \"Suppress warning [Tinman is supposed to automatically upgrade at tech Clockwork, and therefore Servos for its upgrade Mecha may not yet be researched! -or- is supposed to automatically upgrade]\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable, Terrain, Speed, ModOptions, MetaModifier</p>"},{"location":"Modders/uniques/#improvement-uniques","title":"Improvement uniques","text":"[stats] <p>Example: \"[+1 Gold, +2 Production]\"</p> <p>Applicable to: Global, Terrain, Improvement</p> Consumes [amount] [resource] <p>Example: \"Consumes [3] [Iron]\"</p> <p>Applicable to: Building, Unit, Improvement</p> Provides [amount] [resource] <p>Example: \"Provides [3] [Iron]\"</p> <p>Applicable to: Global, FollowerBelief, Improvement</p> Costs [amount] [stockpiledResource] <p>These resources are removed when work begins on the construction. Do not confuse with \"costs [amount] [stockpiledResource]\" (lowercase 'c'), the Unit Action Modifier.</p> <p>Example: \"Costs [3] [Mana]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Building, Unit, Improvement</p> Unbuildable <p>Blocks from being built, possibly by conditional. However it can still appear in the menu and be bought with other means such as Gold or Faith</p> <p>Applicable to: Building, Unit, Improvement</p> Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Must be next to [tileFilter] <p>Example: \"Must be next to [Farm]\"</p> <p>Applicable to: Building, Improvement</p> Obsolete with [tech] <p>Example: \"Obsolete with [Agriculture]\"</p> <p>Applicable to: Building, Improvement, Resource</p> Vegetation <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Improvement</p> Tile provides yield without assigned population <p>Applicable to: Terrain, Improvement</p> Excluded from map editor <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Terrain, Improvement, Resource</p> Can also be built on tiles adjacent to fresh water <p>Applicable to: Improvement</p> [stats] from [tileFilter] tiles <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles\"</p> <p>Applicable to: Improvement</p> [stats] for each adjacent [tileFilter] <p>Example: \"[+1 Gold, +2 Production] for each adjacent [Farm]\"</p> <p>Applicable to: Improvement</p> Ensures a minimum tile yield of [stats] <p>Example: \"Ensures a minimum tile yield of [+1 Gold, +2 Production]\"</p> <p>Applicable to: Improvement</p> Can be built outside your borders <p>Applicable to: Improvement</p> Can be built just outside your borders <p>Applicable to: Improvement</p> Can only be built on [tileFilter] tiles <p>Example: \"Can only be built on [Farm] tiles\"</p> <p>Applicable to: Improvement</p> Cannot be built on [tileFilter] tiles <p>Example: \"Cannot be built on [Farm] tiles\"</p> <p>Applicable to: Improvement</p> Can only be built to improve a resource <p>Applicable to: Improvement</p> Does not need removal of [tileFilter] <p>Example: \"Does not need removal of [Farm]\"</p> <p>Applicable to: Improvement</p> Removes removable features when built <p>Applicable to: Improvement</p> Gives a defensive bonus of [relativeAmount]% <p>Does not accept unit-based conditionals</p> <p>Example: \"Gives a defensive bonus of [+20]%\"</p> <p>Applicable to: Improvement</p> Costs [amount] [stat] per turn when in your territory <p>Example: \"Costs [3] [Culture] per turn when in your territory\"</p> <p>Applicable to: Improvement</p> Costs [amount] [stat] per turn <p>Example: \"Costs [3] [Culture] per turn\"</p> <p>Applicable to: Improvement</p> Adjacent enemy units ending their turn take [amount] damage <p>Example: \"Adjacent enemy units ending their turn take [3] damage\"</p> <p>Applicable to: Improvement</p> Great Improvement <p>Applicable to: Improvement</p> Provides a random bonus when entered <p>Applicable to: Improvement</p> Unpillagable <p>Applicable to: Improvement</p> Pillaging this improvement yields approximately [stats] <p>Example: \"Pillaging this improvement yields approximately [+1 Gold, +2 Production]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>This unique's effect can be modified with &lt;(modified by game progress up to [relativeAmount]%)&gt;</p> <p>Applicable to: Improvement</p> Pillaging this improvement yields [stats] <p>Example: \"Pillaging this improvement yields [+1 Gold, +2 Production]\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>This unique's effect can be modified with &lt;(modified by game progress up to [relativeAmount]%)&gt;</p> <p>Applicable to: Improvement</p> Destroyed when pillaged <p>Applicable to: Improvement</p> Irremovable <p>Applicable to: Improvement</p> Will not be replaced by automated units <p>Applicable to: Improvement</p> Improves [resourceFilter] resource in this tile <p>This is offered as an alternative to the improvedBy field of a resource. The result will be cached within the resource definition when loading a game, without knowledge about terrain, cities, civs, units or time. Therefore, most conditionals will not work, only those not dependent on game state.</p> <p>Example: \"Improves [Strategic] resource in this tile\"</p> <p>This unique does not support conditionals.</p> <p>Applicable to: Improvement</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#resource-uniques","title":"Resource uniques","text":"Obsolete with [tech] <p>Example: \"Obsolete with [Agriculture]\"</p> <p>Applicable to: Building, Improvement, Resource</p> Doesn't generate naturally <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Resource</p> Occurs at temperature between [fraction] and [fraction] and humidity between [fraction] and [fraction] <p>Example: \"Occurs at temperature between [0.5] and [0.5] and humidity between [0.5] and [0.5]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Terrain, Resource</p> Excluded from map editor <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Terrain, Improvement, Resource</p> Deposits in [tileFilter] tiles always provide [amount] resources <p>Example: \"Deposits in [Farm] tiles always provide [3] resources\"</p> <p>Applicable to: Resource</p> Can only be created by Mercantile City-States <p>Applicable to: Resource</p> Stockpiled <p>This resource is accumulated each turn, rather than having a set of producers and consumers at a given moment.The current stockpiled amount can be affected with trigger uniques.</p> <p>Applicable to: Resource</p> City-level resource <p>This resource is calculated on a per-city level rather than a per-civ level</p> <p>Applicable to: Resource</p> Cannot be traded <p>Applicable to: Resource</p> Not shown on world screen <p>This unique is automatically hidden from users.</p> <p>Applicable to: Promotion, Resource</p> Generated with weight [amount] <p>The probability for this resource to be chosen is (this resource weight) / (sum weight of all eligible resources). Resources without a unique are given weight <code>1</code></p> <p>Example: \"Generated with weight [3]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Minor deposits generated with weight [amount] <p>The probability for this resource to be chosen is (this resource weight) / (sum weight of all eligible resources). Resources without a unique are not generated as minor deposits.</p> <p>Example: \"Minor deposits generated with weight [3]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Generated near City States with weight [amount] <p>The probability for this resource to be chosen is (this resource weight) / (sum weight of all eligible resources). Only assignable to luxuries, resources without a unique are given weight <code>1</code></p> <p>Example: \"Generated near City States with weight [3]\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Special placement during map generation <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Generated on every [amount] tiles <p>Example: \"Generated on every [3] tiles\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Guaranteed with Strategic Balance resource option <p>Applicable to: Resource</p> AI will sell at [amount] Gold <p>Example: \"AI will sell at [3] Gold\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> AI will buy at [amount] Gold <p>Example: \"AI will buy at [3] Gold\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Resource</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#ruins-uniques","title":"Ruins uniques","text":"Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Free [unit] found in the ruins <p>Example: \"Free [Musketman] found in the ruins\"</p> <p>Applicable to: Ruins</p> From a randomly chosen tile [positiveAmount] tiles away from the ruins, reveal tiles up to [positiveAmount] tiles away with [positiveAmount]% chance <p>Example: \"From a randomly chosen tile [3] tiles away from the ruins, reveal tiles up to [3] tiles away with [3]% chance\"</p> <p>Applicable to: Ruins</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#speed-uniques","title":"Speed uniques","text":"<p>Speed uniques will be treated as part of GlobalUniques for the Speed selected in a game</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Suppress warning [validationWarning] <p>Allows suppressing specific validation warnings. Errors, deprecation warnings, or warnings about untyped and non-filtering uniques should be heeded, not suppressed, and are therefore not accepted. Note that this can be used in ModOptions, in the uniques a warning is about, or as modifier on the unique triggering a warning - but you still need to be specific. Even in the modifier case you will need to specify a sufficiently selective portion of the warning text as parameter.</p> <p>Example: \"Suppress warning [Tinman is supposed to automatically upgrade at tech Clockwork, and therefore Servos for its upgrade Mecha may not yet be researched! -or- is supposed to automatically upgrade]\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable, Terrain, Speed, ModOptions, MetaModifier</p>"},{"location":"Modders/uniques/#difficulty-uniques","title":"Difficulty uniques","text":"<p>Difficulty uniques will be treated as part of GlobalUniques for the Difficulty selected in a game</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#tutorial-uniques","title":"Tutorial uniques","text":""},{"location":"Modders/uniques/#citystate-uniques","title":"CityState uniques","text":"Provides military units every \u2248[positiveAmount] turns <p>Example: \"Provides military units every \u2248[3] turns\"</p> <p>Applicable to: CityState</p> Provides a unique luxury <p>Applicable to: CityState</p>"},{"location":"Modders/uniques/#modoptions-uniques","title":"ModOptions uniques","text":"Diplomatic relationships cannot change <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Can convert gold to science with sliders <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Allow City States to spawn with additional units <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Can trade civilization introductions for [positiveAmount] Gold <p>Example: \"Can trade civilization introductions for [3] Gold\"</p> <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Disable religion <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Can only start games from the starting era <p>In this case, 'starting era' means the first defined Era in the entire ruleset.</p> <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Allow raze capital <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Allow raze holy city <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Suppress warning [validationWarning] <p>Allows suppressing specific validation warnings. Errors, deprecation warnings, or warnings about untyped and non-filtering uniques should be heeded, not suppressed, and are therefore not accepted. Note that this can be used in ModOptions, in the uniques a warning is about, or as modifier on the unique triggering a warning - but you still need to be specific. Even in the modifier case you will need to specify a sufficiently selective portion of the warning text as parameter.</p> <p>Example: \"Suppress warning [Tinman is supposed to automatically upgrade at tech Clockwork, and therefore Servos for its upgrade Mecha may not yet be researched! -or- is supposed to automatically upgrade]\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable, Terrain, Speed, ModOptions, MetaModifier</p> Mod is incompatible with [modFilter] <p>Specifies that your Mod is incompatible with another. Always treated symmetrically, and cannot be overridden by the Mod you are declaring as incompatible.</p> <p>Example: \"Mod is incompatible with [DeCiv Redux]\"</p> <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Mod requires [modFilter] <p>Specifies that your Extension Mod is only available if any other Mod matching the filter is active.</p> <p>Multiple copies of this Unique cannot be used to specify alternatives, they work as 'and' logic. If you need alternates and wildcards can't filter them well enough, please open an issue.</p> <p>Example: \"Mod requires [DeCiv Redux]\"</p> <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Should only be used as permanent audiovisual mod <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Can be used as permanent audiovisual mod <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Cannot be used as permanent audiovisual mod <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p> Mod preselects map [comment] <p>Only meaningful for Mods containing several maps. When this mod is selected on the new game screen's custom maps mod dropdown, the named map will be selected on the map dropdown. Also disables selection by recently modified. Case insensitive.</p> <p>Example: \"Mod preselects map [comment]\"</p> <p>This unique does not support conditionals.</p> <p>Applicable to: ModOptions</p>"},{"location":"Modders/uniques/#event-uniques","title":"Event uniques","text":"Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p>"},{"location":"Modders/uniques/#eventchoice-uniques","title":"EventChoice uniques","text":"Only available <p>Meant to be used together with conditionals, like \"Only available &lt;after adopting [policy]&gt; &lt;while the empire is happy&gt;\". Only allows Building when ALL conditionals are met. Will also block Upgrade and Transform actions. See also CanOnlyBeBuiltWhen</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> Unavailable <p>Meant to be used together with conditionals, like \"Unavailable &lt;after generating a Great Prophet&gt;\".</p> <p>Applicable to: Tech, Policy, Building, Unit, Promotion, Improvement, Ruins, Event, EventChoice</p> [relativeAmount]% weight to this choice for AI decisions <p>Example: \"[+20]% weight to this choice for AI decisions\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Promotion, EventChoice</p> Will not be displayed in Civilopedia <p>This unique is automatically hidden from users.</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p> Comment [comment] <p>Allows displaying arbitrary text in a Unique listing. Only the text within the '[]' brackets will be displayed, the rest serves to allow Ruleset validation to recognize the intent.</p> <p>Example: \"Comment [comment]\"</p> <p>Applicable to: Nation, Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins, Speed, Difficulty, EventChoice</p>"},{"location":"Modders/uniques/#conditional-uniques","title":"Conditional uniques","text":"<p>Modifiers that can be added to other uniques to limit when they will be active</p> &lt;every [positiveAmount] turns&gt; <p>Example: \"&lt;every [3] turns&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before turn number [nonNegativeAmount]&gt; <p>Example: \"&lt;before turn number [3]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;after turn number [nonNegativeAmount]&gt; <p>Example: \"&lt;after turn number [3]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on [speed] game speed&gt; <p>Example: \"&lt;on [Quick] game speed&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on [difficulty] difficulty&gt; <p>Example: \"&lt;on [Prince] difficulty&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on [difficulty] difficulty or higher&gt; <p>Example: \"&lt;on [Prince] difficulty or higher&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when [victoryType] Victory is enabled&gt; <p>Example: \"&lt;when [Domination] Victory is enabled&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when [victoryType] Victory is disabled&gt; <p>Example: \"&lt;when [Domination] Victory is disabled&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when religion is enabled&gt; <p>Applicable to: Conditional</p> &lt;when religion is disabled&gt; <p>Applicable to: Conditional</p> &lt;when espionage is enabled&gt; <p>Applicable to: Conditional</p> &lt;when espionage is disabled&gt; <p>Applicable to: Conditional</p> &lt;when nuclear weapons are enabled&gt; <p>Applicable to: Conditional</p> &lt;with [nonNegativeAmount]% chance&gt; <p>Example: \"&lt;with [3]% chance&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if tutorials are enabled&gt; <p>This unique is automatically hidden from users.</p> <p>Applicable to: Conditional</p> &lt;if tutorial [comment] is completed&gt; <p>Example: \"&lt;if tutorial [comment] is completed&gt;\"</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Conditional</p> &lt;for [civFilter] Civilizations&gt; <p>Example: \"&lt;for [City-States] Civilizations&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when at war&gt; <p>Applicable to: Conditional</p> &lt;when not at war&gt; <p>Applicable to: Conditional</p> &lt;during a Golden Age&gt; <p>Applicable to: Conditional</p> &lt;when not in a Golden Age&gt; <p>Applicable to: Conditional</p> &lt;during We Love The King Day&gt; <p>Applicable to: Conditional</p> &lt;while the empire is happy&gt; <p>Applicable to: Conditional</p> &lt;during the [era]&gt; <p>Example: \"&lt;during the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before the [era]&gt; <p>Example: \"&lt;before the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;starting from the [era]&gt; <p>Example: \"&lt;starting from the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if starting in the [era]&gt; <p>Example: \"&lt;if starting in the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if no other Civilization has researched this&gt; <p>Applicable to: Conditional</p> &lt;after discovering [techFilter]&gt; <p>Example: \"&lt;after discovering [Agriculture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before discovering [techFilter]&gt; <p>Example: \"&lt;before discovering [Agriculture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;while researching [techFilter]&gt; <p>This condition is fulfilled while the technology is actively being researched (it is the one research points are added to)</p> <p>Example: \"&lt;while researching [Agriculture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if no other Civilization has adopted this&gt; <p>Applicable to: Conditional</p> &lt;if no Civilization has adopted [policy/belief]&gt; <p>Example: \"&lt;if no Civilization has adopted [Oligarchy]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;after adopting [policy/belief]&gt; <p>Example: \"&lt;after adopting [Oligarchy]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before adopting [policy/belief]&gt; <p>Example: \"&lt;before adopting [Oligarchy]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before founding a Pantheon&gt; <p>Applicable to: Conditional</p> &lt;after founding a Pantheon&gt; <p>Applicable to: Conditional</p> &lt;before founding a religion&gt; <p>Applicable to: Conditional</p> &lt;after founding a religion&gt; <p>Applicable to: Conditional</p> &lt;before enhancing a religion&gt; <p>Applicable to: Conditional</p> &lt;after enhancing a religion&gt; <p>Applicable to: Conditional</p> &lt;after generating a Great Prophet&gt; <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is constructed&gt; <p>Example: \"&lt;if [Culture] is constructed&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is not constructed&gt; <p>Example: \"&lt;if [Culture] is not constructed&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is constructed in all [cityFilter] cities&gt; <p>Example: \"&lt;if [Culture] is constructed in all [in all cities] cities&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is constructed in at least [positiveAmount] of [cityFilter] cities&gt; <p>Example: \"&lt;if [Culture] is constructed in at least [3] of [in all cities] cities&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is constructed by anybody&gt; <p>Example: \"&lt;if [Culture] is constructed by anybody&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is not constructed by anybody&gt; <p>Example: \"&lt;if [Culture] is not constructed by anybody&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with [resource]&gt; <p>Example: \"&lt;with [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;without [resource]&gt; <p>Example: \"&lt;without [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when above [amount] [stat/resource]&gt; <p>Stats refers to the accumulated stat, not stat-per-turn. Therefore, does not support Happiness - for that use 'when above [amount] Happiness'</p> <p>Example: \"&lt;when above [3] [Culture]&gt;\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Conditional</p> &lt;when below [amount] [stat/resource]&gt; <p>Stats refers to the accumulated stat, not stat-per-turn. Therefore, does not support Happiness - for that use 'when below [amount] Happiness'</p> <p>Example: \"&lt;when below [3] [Culture]&gt;\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Conditional</p> &lt;when between [amount] and [amount] [stat/resource]&gt; <p>Stats refers to the accumulated stat, not stat-per-turn. Therefore, does not support Happiness. 'Between' is inclusive - so 'between 1 and 5' includes 1 and 5.</p> <p>Example: \"&lt;when between [3] and [3] [Culture]&gt;\"</p> <p>This unique's effect can be modified with &lt;(modified by game speed)&gt;</p> <p>Applicable to: Conditional</p> &lt;in this city&gt; <p>Applicable to: Conditional</p> &lt;in [cityFilter] cities&gt; <p>Example: \"&lt;in [in all cities] cities&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities connected to the capital&gt; <p>Applicable to: Conditional</p> &lt;in cities with a [religionFilter] religion&gt; <p>Example: \"&lt;in cities with a [major] religion&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities not following a [religionFilter] religion&gt; <p>Example: \"&lt;in cities not following a [major] religion&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with a major religion&gt; <p>Applicable to: Conditional</p> &lt;in cities with an enhanced religion&gt; <p>Applicable to: Conditional</p> &lt;in cities following our religion&gt; <p>Applicable to: Conditional</p> &lt;in cities with a [buildingFilter]&gt; <p>Example: \"&lt;in cities with a [Culture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities without a [buildingFilter]&gt; <p>Example: \"&lt;in cities without a [Culture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with at least [positiveAmount] [populationFilter]&gt; <p>Example: \"&lt;in cities with at least [3] [Followers of this Religion]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with [positiveAmount] [populationFilter]&gt; <p>Example: \"&lt;in cities with [3] [Followers of this Religion]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with between [amount] and [amount] [populationFilter]&gt; <p>'Between' is inclusive - so 'between 1 and 5' includes 1 and 5.</p> <p>Example: \"&lt;in cities with between [3] and [3] [Followers of this Religion]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with less than [amount] [populationFilter]&gt; <p>Example: \"&lt;in cities with less than [3] [Followers of this Religion]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with a garrison&gt; <p>Applicable to: Conditional</p> &lt;for [mapUnitFilter] units&gt; <p>Example: \"&lt;for [Wounded] units&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when [mapUnitFilter]&gt; <p>Example: \"&lt;when [Wounded]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;for units with [promotion]&gt; <p>Also applies to units with temporary status</p> <p>Example: \"&lt;for units with [Shock I]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;for units without [promotion]&gt; <p>Also applies to units with temporary status</p> <p>Example: \"&lt;for units without [Shock I]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;vs cities&gt; <p>Applicable to: Conditional</p> &lt;vs [mapUnitFilter] units&gt; <p>Example: \"&lt;vs [Wounded] units&gt;\"</p> <p>Applicable to: Conditional</p> &lt;vs [combatantFilter]&gt; <p>Example: \"&lt;vs [City]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when fighting units from a Civilization with more Cities than you&gt; <p>Applicable to: Conditional</p> &lt;when attacking&gt; <p>Applicable to: Conditional</p> &lt;when defending&gt; <p>Applicable to: Conditional</p> &lt;when fighting in [tileFilter] tiles&gt; <p>Example: \"&lt;when fighting in [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on foreign continents&gt; <p>Applicable to: Conditional</p> &lt;when adjacent to a [mapUnitFilter] unit&gt; <p>Example: \"&lt;when adjacent to a [Wounded] unit&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when above [positiveAmount] HP&gt; <p>Example: \"&lt;when above [3] HP&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when below [positiveAmount] HP&gt; <p>Example: \"&lt;when below [3] HP&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if it hasn't used other actions yet&gt; <p>Applicable to: Conditional</p> &lt;when stacked with a [mapUnitFilter] unit&gt; <p>Example: \"&lt;when stacked with a [Wounded] unit&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when not stacked with a [mapUnitFilter] unit&gt; <p>Example: \"&lt;when not stacked with a [Wounded] unit&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with [nonNegativeAmount] to [nonNegativeAmount] neighboring [tileFilter] tiles&gt; <p>Example: \"&lt;with [3] to [3] neighboring [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in [tileFilter] tiles&gt; <p>Example: \"&lt;in [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in tiles without [tileFilter]&gt; <p>Example: \"&lt;in tiles without [Farm]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;within [positiveAmount] tiles of a [tileFilter]&gt; <p>Example: \"&lt;within [3] tiles of a [Farm]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in tiles adjacent to [tileFilter] tiles&gt; <p>Example: \"&lt;in tiles adjacent to [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in tiles not adjacent to [tileFilter] tiles&gt; <p>Example: \"&lt;in tiles not adjacent to [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on water maps&gt; <p>Applicable to: Conditional</p> &lt;in [regionType] Regions&gt; <p>Example: \"&lt;in [Hybrid] Regions&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in all except [regionType] Regions&gt; <p>Example: \"&lt;in all except [Hybrid] Regions&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when number of [countable] is equal to [countable]&gt; <p>Example: \"&lt;when number of [1000] is equal to [1000]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when number of [countable] is different than [countable]&gt; <p>Example: \"&lt;when number of [1000] is different than [1000]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when number of [countable] is more than [countable]&gt; <p>Example: \"&lt;when number of [1000] is more than [1000]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when number of [countable] is less than [countable]&gt; <p>Example: \"&lt;when number of [1000] is less than [1000]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when number of [countable] is between [countable] and [countable]&gt; <p>'Between' is inclusive - so 'between 1 and 5' includes 1 and 5.</p> <p>Example: \"&lt;when number of [1000] is between [1000] and [1000]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [modFilter] is enabled&gt; <p>Example: \"&lt;if [DeCiv Redux] is enabled&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if [modFilter] is not enabled&gt; <p>Example: \"&lt;if [DeCiv Redux] is not enabled&gt;\"</p> <p>Applicable to: Conditional</p>"},{"location":"Modders/uniques/#triggercondition-uniques","title":"TriggerCondition uniques","text":"<p>Special conditionals that can be added to Triggerable uniques, to make them activate upon specific actions.</p> &lt;upon discovering [techFilter] technology&gt; <p>Example: \"&lt;upon discovering [Agriculture] technology&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon entering the [era]&gt; <p>Example: \"&lt;upon entering the [Ancient era]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon entering a new era&gt; <p>Applicable to: TriggerCondition</p> &lt;upon adopting [policy/belief]&gt; <p>Example: \"&lt;upon adopting [Oligarchy]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon declaring war on [civFilter] Civilizations&gt; <p>Example: \"&lt;upon declaring war on [City-States] Civilizations&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon being declared war on by [civFilter] Civilizations&gt; <p>Example: \"&lt;upon being declared war on by [City-States] Civilizations&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon entering a war with [civFilter] Civilizations&gt; <p>Example: \"&lt;upon entering a war with [City-States] Civilizations&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon declaring friendship&gt; <p>Applicable to: TriggerCondition</p> &lt;upon declaring a defensive pact&gt; <p>Applicable to: TriggerCondition</p> &lt;upon entering a Golden Age&gt; <p>Applicable to: TriggerCondition</p> &lt;upon ending a Golden Age&gt; <p>Applicable to: TriggerCondition</p> &lt;upon conquering a city&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon losing a city&gt; <p>Applicable to: TriggerCondition</p> &lt;upon founding a city&gt; <p>Applicable to: TriggerCondition</p> &lt;upon building a [improvementFilter] improvement&gt; <p>Example: \"&lt;upon building a [All Road] improvement&gt;\"</p> <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon discovering a Natural Wonder&gt; <p>Applicable to: TriggerCondition</p> &lt;upon constructing [buildingFilter]&gt; <p>Example: \"&lt;upon constructing [Culture]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon constructing [buildingFilter] [cityFilter]&gt; <p>Example: \"&lt;upon constructing [Culture] [in all cities]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon gaining a [baseUnitFilter] unit&gt; <p>Example: \"&lt;upon gaining a [Melee] unit&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon turn end&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon turn start&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon founding a Pantheon&gt; <p>Applicable to: TriggerCondition</p> &lt;upon founding a Religion&gt; <p>Applicable to: TriggerCondition</p> &lt;upon enhancing a Religion&gt; <p>Applicable to: TriggerCondition</p> &lt;upon expending a [mapUnitFilter] unit&gt; <p>Example: \"&lt;upon expending a [Wounded] unit&gt;\"</p> <p>Applicable to: TriggerCondition</p>"},{"location":"Modders/uniques/#unittriggercondition-uniques","title":"UnitTriggerCondition uniques","text":"<p>Special conditionals that can be added to UnitTriggerable uniques, to make them activate upon specific actions.</p> &lt;upon conquering a city&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon building a [improvementFilter] improvement&gt; <p>Example: \"&lt;upon building a [All Road] improvement&gt;\"</p> <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon turn end&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon turn start&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon entering combat&gt; <p>Applicable to: UnitTriggerCondition</p> &lt;upon damaging a [mapUnitFilter] unit&gt; <p>Can apply triggers to to damaged unit by setting the first parameter to 'Target Unit'</p> <p>Example: \"&lt;upon damaging a [Wounded] unit&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon defeating a [mapUnitFilter] unit&gt; <p>Example: \"&lt;upon defeating a [Wounded] unit&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon being defeated&gt; <p>Applicable to: UnitTriggerCondition</p> &lt;upon being promoted&gt; <p>Applicable to: UnitTriggerCondition</p> &lt;upon gaining the [promotion] promotion&gt; <p>Example: \"&lt;upon gaining the [Shock I] promotion&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon losing the [promotion] promotion&gt; <p>Example: \"&lt;upon losing the [Shock I] promotion&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon gaining the [promotion] status&gt; <p>Example: \"&lt;upon gaining the [Shock I] status&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon losing the [promotion] status&gt; <p>Example: \"&lt;upon losing the [Shock I] status&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon losing at least [positiveAmount] HP in a single attack&gt; <p>Example: \"&lt;upon losing at least [3] HP in a single attack&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon ending a turn in a [tileFilter] tile&gt; <p>Example: \"&lt;upon ending a turn in a [Farm] tile&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon discovering a [tileFilter] tile&gt; <p>Example: \"&lt;upon discovering a [Farm] tile&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon entering a [tileFilter] tile&gt; <p>Example: \"&lt;upon entering a [Farm] tile&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p>"},{"location":"Modders/uniques/#unitactionmodifier-uniques","title":"UnitActionModifier uniques","text":"<p>Modifiers that can be added to UnitAction uniques as conditionals</p> &lt;by consuming this unit&gt; <p>Applicable to: UnitActionModifier</p> &lt;for [amount] movement&gt; <p>Will consume up to [amount] of Movement to execute</p> <p>Example: \"&lt;for [3] movement&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;for all movement&gt; <p>Will consume all Movement to execute</p> <p>Applicable to: UnitActionModifier</p> &lt;requires [nonNegativeAmount] movement&gt; <p>Requires [nonNegativeAmount] of Movement to execute. Unit's Movement is rounded up</p> <p>Example: \"&lt;requires [3] movement&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;costs [stats] stats&gt; <p>A positive Integer value will be subtracted from your stock. Food and Production will be removed from Closest City's current stock</p> <p>Example: \"&lt;costs [+1 Gold, +2 Production] stats&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;costs [amount] [stockpiledResource]&gt; <p>A positive Integer value will be subtracted from your stock. Do not confuse with \"Costs [amount] [stockpiledResource]\" (uppercase 'C') for Improvements, Buildings, and Units.</p> <p>Example: \"&lt;costs [3] [Mana]&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;removing the [promotion] promotion/status&gt; <p>Removes the promotion/status from the unit - this is not a cost, units will be able to activate the action even without the promotion/status. To limit, use &lt;with the [promotion] promotion&gt; conditional</p> <p>Example: \"&lt;removing the [Shock I] promotion/status&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;once&gt; <p>Applicable to: UnitActionModifier</p> &lt;[positiveAmount] times&gt; <p>Example: \"&lt;[3] times&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;[nonNegativeAmount] additional time(s)&gt; <p>Example: \"&lt;[3] additional time(s)&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;after which this unit is consumed&gt; <p>Applicable to: UnitActionModifier</p>"},{"location":"Modders/uniques/#metamodifier-uniques","title":"MetaModifier uniques","text":"<p>Modifiers that can be added to other uniques changing user experience, not their behavior</p> &lt;for [nonNegativeAmount] turns&gt; <p>Turns this unique into a trigger, activating this unique as a global unique for a number of turns</p> <p>Example: \"&lt;for [3] turns&gt;\"</p> <p>Applicable to: MetaModifier</p> &lt;hidden from users&gt; <p>Applicable to: MetaModifier</p> &lt;for every [countable]&gt; <p>Works for positive numbers only</p> <p>Example: \"&lt;for every [1000]&gt;\"</p> <p>Applicable to: MetaModifier</p> &lt;for every adjacent [tileFilter]&gt; <p>Works for positive numbers only</p> <p>Example: \"&lt;for every adjacent [Farm]&gt;\"</p> <p>Applicable to: MetaModifier</p> &lt;for every [positiveAmount] [countable]&gt; <p>Works for positive numbers only</p> <p>Example: \"&lt;for every [3] [1000]&gt;\"</p> <p>Applicable to: MetaModifier</p> &lt;(modified by game speed)&gt; <p>Can only be applied to certain uniques, see details of each unique for specifics</p> <p>Applicable to: MetaModifier</p> &lt;(modified by game progress up to [relativeAmount]%)&gt; <p>Can only be applied to certain uniques, see details of each unique for specifics</p> <p>Example: \"&lt;(modified by game progress up to [+20]%)&gt;\"</p> <p>Applicable to: MetaModifier</p> &lt;Suppress warning [validationWarning]&gt; <p>Allows suppressing specific validation warnings. Errors, deprecation warnings, or warnings about untyped and non-filtering uniques should be heeded, not suppressed, and are therefore not accepted. Note that this can be used in ModOptions, in the uniques a warning is about, or as modifier on the unique triggering a warning - but you still need to be specific. Even in the modifier case you will need to specify a sufficiently selective portion of the warning text as parameter.</p> <p>Example: \"&lt;Suppress warning [Tinman is supposed to automatically upgrade at tech Clockwork, and therefore Servos for its upgrade Mecha may not yet be researched! -or- is supposed to automatically upgrade]&gt;\"</p> <p>This unique does not support conditionals.</p> <p>This unique is automatically hidden from users.</p> <p>Applicable to: Triggerable, Terrain, Speed, ModOptions, MetaModifier</p> <p>Note that this must use the Mod name as Unciv displays it, not the Repository name. There is a conversion affecting dashes and leading/trailing blanks. Please make sure not to get confused.</p>"},{"location":"Modders/Mod-file-structure/1-Overview/","title":"Mod file structure Overview","text":"<p>These pages are a work in progress. Information they contain may be incomplete.</p> <p>The JSON files that make up mods can have many different fields, and as not all are used in the base game, this wiki page will contain the full information of each. It will also give a short explanation of the syntax of JSON files.</p>"},{"location":"Modders/Mod-file-structure/1-Overview/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Overview of JSON files</li> <li>Civilization-related JSON files<ul> <li>Beliefs.json</li> <li>Buildings.json</li> <li>CityStateTypes.json</li> <li>Nations.json</li> <li>Policies.json</li> <li>Quests.json</li> <li>Religions.json</li> <li>Specialists.json</li> <li>Techs.json</li> </ul> </li> <li>Map-related JSON files<ul> <li>Terrains.json</li> <li>TileResources.json</li> <li>TileImprovements.json</li> <li>Ruins.json</li> <li>Tileset-specific json</li> </ul> </li> <li>Unit-related JSON files<ul> <li>Units.json</li> <li>UnitPromotions.json</li> <li>UnitTypes.json</li> </ul> </li> <li>Miscellaneous JSON files<ul> <li>Difficulties.json</li> <li>Eras.json</li> <li>ModOptions.json</li> <li>GlobalUniques.json</li> <li>Speeds.json</li> <li>Tutorials.json</li> <li>VictoryTypes.json</li> </ul> </li> <li>Stats</li> <li>Sounds</li> <li>Civilopedia text</li> </ul>"},{"location":"Modders/Mod-file-structure/1-Overview/#general-overview-of-json-files","title":"General Overview of JSON files","text":"<p>Recommended reading: json.org, ISO standard</p> <p>Almost all Unciv JSON files start with a \"[\" and end with a \"]\". In between these are different objects of the type you are describing, each of which is contained between a \"{\" and a \"}\". For example, a very simple units.json may look like:</p> <pre><code>[\n    {\n        \"name\": \"Warrior\",\n        \"cost\": 16\n    },\n    {\n        \"name\": \"Spearman\",\n        \"cost\": 24,\n        \"promotions\": [\"Shock I\", \"Drill I\"]\n    }\n]\n</code></pre> <p>This file contains two unit objects, one for a warrior and one for a spearman. These objects have different attributes, in this case \"name\", \"cost\" and \"promotions\". All these attributes have a certain type, a String (text) for \"name\", an Integer for \"cost\" and a List of Strings for \"promotions\".</p> <p>There are different types of attributes:</p> type notes String A word or sentence. Should be between double quotes (\") and escape double quotes meant to be part of the text: <code>\\\"</code> Integer A number. Can be both positive or negative. Should not be between quotes Float A number that can have decimal places. Remember to use <code>.</code> as the Json standard needs, not your local culture's decimal symbol. Scientific notation would work, though Boolean A value that can either be 'true' or 'false'. Should not be between quotes List of [type] If multiple values could apply (such as with the promotions above), they should be put inside a list. Each element of the list should be written like a normal attribute, separated by commas, and enclosed between square braces. E.g.: [\"Shock I\", \"Shock II\"] or [1, 2, 3]. Object The most complicated type of attribute. An object is comprised of multiple attributes, each of which again has a type. These attributes have a key (the part before the \":\") and a value (the part behind it). For an example, see below. <p>Example of a Buildings.json adding a new \"Cultural Library\" building which gives +50% science and +50% culture:</p> <pre><code>[\n    {\n        \"name\": \"Cultural Library\"\n        \"percentStatBonus\" : {\"science\": 50, \"culture\": 50}\n    }\n]\n</code></pre> <p>The keys in this example are \"science\" and \"culture\", and both have the value \"50\".</p> <p>In some sense you can see from these types that JSON files themselves are actually a list of objects, each describing a single building, unit or something else.</p>"},{"location":"Modders/Mod-file-structure/1-Overview/#requirements-for-base-rulesets","title":"Requirements for Base Rulesets","text":"<p>Base ruleset mods must be \"complete\" by themselves, but that does not mean they must include all possible json files nor define content in all of them. Here's a breakdown (WIP, possibly inaccurate):</p> File Empty allowed? Default/fallback Beliefs yes none Buildings no none CityStateTypes no vanilla Difficulties no vanilla Eras no none GlobalUniques yes vanilla ModOptions yes generated on download Nations no none Policies yes none Quests yes none Religions yes none Ruins yes vanilla Specialists yes none Speeds no vanilla Techs yes none Terrains no none TileImprovements yes none TileResources yes none Tutorials yes builtin always displayed UnitPromotions yes none Units no none UnitTypes no vanilla VictoryTypes no vanilla <ul> <li>Mod loading never fails due to missing files, they default to empty at first. Then the fallbacks mentioned above are applied for base rulesets only. Inconsistencies after that step would be reported by the Mod checker.</li> <li>GlobalUniques has a fallback used when the file is missing. Therefore, a mod can intentionally define there are none by including one with empty content (<code>{}</code>).</li> <li>Ruins has a fallback used when the file is missing. Therefore, a mod can intentionally define there are none by including one with empty content (<code>[]</code>).</li> </ul>"},{"location":"Modders/Mod-file-structure/1-Overview/#uniques","title":"Uniques","text":"<p>\"Uniques\" are a label used by Unciv for extensible and customizable effects. Nearly every \"ruleset object\" allows a set of them, as a List with the name \"uniques\".</p> <p>Every Unique follows a general structure: <code>Unique type defining name [placeholder] more name [another placeholder] &lt;condition or trigger&gt; &lt;condition or trigger&gt;...</code> The entire string, excluding all <code>&lt;&gt;</code>-delimited conditionals or triggers with their separating blanks, and excluding the placeholders but not their <code>[]</code> delimiters, are used to look up the Unique's implementation. The content of the optional <code>[placeholder]</code>s are implementation-dependant, they are parameters modifying the effect, and described in Unique parameters. All <code>&lt;condition or trigger&gt;</code>s are optional (but if they are used the spaces separating them are mandatory), and each in turn follows the Unique structure rules for the part between the <code>&lt;&gt;</code> angled brackets, including possible placeholders, but not nested conditionals.</p> <p>Example: <code>\"uniques\":[\"[+1 Gold] &lt;with a garrison&gt;\"]</code> on a building - does almost the same thing as the <code>\"gold\":1</code> attribute does, except it only applies when the city has a garrison. In this example, <code>[]</code> and <code>with a garrison</code> are the keys Unciv uses to look up two Uniques, an effect (of type <code>Stats</code>) and a condition (of type <code>ConditionalWhenGarrisoned</code>).</p> <p>All Unique \"types\" that have an implementation in Unciv are automatically documented in uniques. Note that file is entirely machine-generated from source code structures. Also kindly note the separate sections for conditionals and trigger conditions. Uniques that do not correspond to any of those entries (verbatim including upper/lower case!) are called \"untyped\", will have no direct effect, and may result in the \"Ruleset Validator\" showing warnings (see the Options Tab \"Locate mod errors\", it also runs when starting new games). A legitimate use of \"untyped\" Uniques is their use as markers that can be recognized elsewhere in filters (example: \"Aircraft\" in the vanilla rulesets used as Unit filter). This use is recognized by the \"Ruleset Validator\" and not flagged as invalid - but a filtering Unique must also use no placeholders or conditionals to pass the test. If you get the \"not found in Unciv's unique types\" warning, but are sure you are using a correct filtering Unique, please look for exactly identical spelling in all places, including upper/lower case. Note: Currently some mods use untyped Uniques not for filtering purposes, but as purely informational tool. The team will try to think of an approach for that use that won't trigger validation warnings without reducing validation quality, but as of now, those are unavoidable.</p>"},{"location":"Modders/Mod-file-structure/1-Overview/#information-on-json-files-used-in-the-game","title":"Information on JSON files used in the game","text":"<p>Many parts of Unciv are moddable, and for each there is a separate json file. There is a json file for buildings, for units, for promotions units can have, for technologies, etc. The different new buildings or units you define can also have lots of different attributes, though not all are required. Below are tables documenting all the different attributes everything can have. Only the attributes which are noted to be 'required' must be provided. All others have a default value that will be used when it is omitted.</p> <p>The individual files are described on separate pages.</p>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/","title":"Civilization-related JSON files","text":""},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#beliefsjson","title":"Beliefs.json","text":"<p>link to original</p> <p>This file contains the beliefs that can be chosen for religions in your mod.</p> <p>Each belief has the following structure:</p> Attribute Type Default Notes name String Required type Enum Required Type of belief. Value must be Pantheon, Founder, Follower or Enhancer uniques List of Strings empty List of unique abilities this belief adds to cities following it civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#buildingsjson","title":"Buildings.json","text":"<p>link to original</p> <p>This file contains all the buildings and wonders you want to use in your mod.</p> <p>Each building has the following structure:</p> Attribute Type Default Notes name String Required cost Integer -1 Amount of production required to build the building. If -1, the <code>buildingCost</code> from <code>requiredTech</code> column is used <code>&lt;stats&gt;</code> Float 0 Per-turn yield produced by the building maintenance Integer 0 Maintenance cost of the building isWonder Boolean false Whether this building is a global wonder isNationalWonder Boolean false Whether this building is a national wonder requiredBuilding String none A building that has to be built before this building can be built. Must be in Buildings.json requiredTech String none The tech that should be researched before this building may be built. Must be in Techs.json requiredResource String none The resource that is consumed when building this building. Must be in TileResources.json requiredNearbyImprovedResources List of Strings empty The building can only be built if any of the resources in this list are within the borders of this city and have been improved. Each resource must be in TileResources.json replaces String none The name of a building that should be replaced by this building. Must be in Buildings.json uniqueTo String none If supplied, only the nation with this name can build this building. Must be in Nations.json cityStrength Integer 0 Strength bonus the city in which this building is built receives cityHealth Integer 0 Health bonus the city in which this building is built receives hurryCostModifier Integer 0 When this building is bought using gold or faith, the price is increased by this much percent quote String none If this building is a (national) wonder, this string will be shown on the completion popup uniques List of Strings empty List of unique abilities this building has replacementTextForUniques String none If provided, this string will be shown instead of all of the uniques percentStatBonus Object none Percentual bonus for stats provided by the building. Same format as specialized stats (numbers are in percent. i.e. <code>[30]</code> represents 30% bonus to a stat) greatPersonPoints Object none Great person points by this building generated per turn. Valid keys are the names of units (Great Scientist, Warrior, etc.), valid values are Integers specialistSlots Object none Specialist slots provided by this building. Valid keys are the names of specialists (as defined in Specialists.json), valid values are Integers, the amount of slots provided for this specialist civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#nationsjson","title":"Nations.json","text":"<p>Link to original</p> <p>This file contains all the nations and city states, including Barbarians and Spectator.</p> <p>Each nation has the following structure:</p> Attribute Type Default Notes name String Required leaderName String none Omit only for city states! If you want LeaderPortraits, the image file names must match exactly, including case style String none Modifier appended to pixel unit image names cityStateType String none Distinguishes major civilizations from city states (must be in CityStateTypes.json) startBias List of strings empty Zero or more of: terrainFilter or \"Avoid [terrainFilter]\". [^S] preferredVictoryType String Neutral The victory type major civilizations will pursue (need not be specified in VictoryTypes.json) personality String none The name of the personality specified in Personalities.json favoredReligion String none The religion major civilization will choose if available when founding a religion. Must be in Religions.json startIntroPart1 String none Introductory blurb shown to Player on game start... [^V] startIntroPart2 String none ... second paragraph. NO \"TBD\"!!! Leave empty to skip that alert. declaringWar String none Another greeting, voice hook supported [^V] attacked String none Another greeting, voice hook supported [^V] defeated String none Another greeting, voice hook supported [^V] denounced String none Another greeting, voice hook supported [^V] introduction String none Another greeting, voice hook supported [^V] neutralHello String none Another greeting, voice hook supported [^V] hateHello String none Another greeting, voice hook supported [^V] tradeRequest String none Another greeting, voice hook supported [^V] declaringFriendship String none Another greeting, voice hook supported [^V] innerColor List of 3\u00d7 Integer black RGB color for outer ring of nation icon outerColor List of 3\u00d7 Integer Required RGB color for inner circle of nation icon uniqueName String none Decorative name for the special characteristic of this nation uniqueText String none Replacement text for \"uniques\". If empty, uniques are listed individually uniques List empty List of unique abilities this civilisation has cities List empty City names used sequentially for newly founded cities. Required for major civilizations and city states civilopediaText List empty See civilopediaText chapter <p>[^S]: A \"Coast\" preference (unless combined with \"Avoid\") is translated to a complex test for coastal land tiles, tiles next to Lakes, river tiles or near-river tiles, and such civs are processed first. Other startBias entries are ignored in that case. Other positive (no \"Avoid\") startBias are processed next. Multiple positive preferences are treated equally, but get no \"fallback\". Single positive startBias can get a \"fallback\" region if there is no (or no more) region with that primary type: any leftover region with as much of the specified terrain as possible will do. Multiple \"Avoid\" entries are treated equally (and reduce chance for success - if no region is left avoiding all specified types that civ gets a random one). When combining preferred terrain with \"Avoid\", the latter takes precedence, and preferred terrain only has minor weight when choosing between regions that are not of a type to avoid. These notes are only valid when playing on generated maps, loaded maps from map editor get no \" regions\" and startBias is processed differently (but you can expect single-entry startBias to work best).</p> <p>[^V]: See Supply Leader Voices</p>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#personalitiesjson","title":"Personalities.json","text":"<p>Link to original</p> <p>This file contains all Personalities for computer players.</p> <p>Each personality has the following structure:</p> Attribute Type Default Notes name String Required preferredVictoryType String Neutral The victory type major civilizations will pursue (need not be specified in VictoryTypes.json) <code>&lt;stats&gt;</code>, <code>&lt;behaviors&gt;</code> Float 5 Amount of focus on the stat the computer player will have. Typically ranges from 0 (no focus) to 10 (double focus) priorities Object none Priorities for each policy branch [^B] uniques List empty List of unique abilities this personality has civilopediaText List empty See civilopediaText chapter <p>[^B]: Similar to policy priorites The \"priorities\" object defines the priority major civilizations' AI give to a policy branch. The AI chooses the policy branch with the highest number for their preferred victory type. If two or more candidate branches have the same priority, the AI chooses a random branch among the candidates.</p> <p>The object maps policy branches to priority values for the major civilization using the policy branches name and integers. Any branches not listed have a default value of 0</p> <p>The code below is an example of a valid \"priorities\" definition.</p> <pre><code>\"priorities\": {\n    \"Tradition\": 30,\n    \"Liberty\": 20,\n    \"Honor\": 10\n}\n</code></pre>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#personality-behaviours","title":"Personality Behaviours","text":"<p>Personality Behaviours are not fully implemented yet and their names may change. Using them before they are ready might make the mod unplayable. The following is WIP - read on at you own peril!</p> <p>There are 7 defining behaviours that influence an AI Civilization's behaviour. A higher value means they will behave more like the attribute.</p> <ul> <li>Military: Determines how much does the civilization prioritizes building a military, but not necessarily using it. A higher value means more focus on military, a lower value means it is likely more peaceful.</li> <li>Agressive: Determines how the civilization uses its units while at war and which buildings they prioritise. A higher value means the civilization is more aggressive, a lower value means it is more defensive.</li> <li>War: Determines how likely the civilization is to declare war. A 0 means the civ won't declare war at all.</li> <li>Commerce: Determines how open the civilization is to trade, value open borders, and liberate city-states. A higher value means more trading frequency even with civilizations they don't like.</li> <li>Diplomacy: Determines how likely the civilization is to declare friendship, a defensive pact, peace treaty, or other diplomatic actions.</li> <li>Loyal: Determines how much the civilization values a long-lasting alliance, how willing they are to join wars with them, and how much they despise other unreliable civilizations.</li> <li>Expansion: Determines how focused the civilization is on founding or capturing new cities. A lower value means they might focus on culture more.</li> </ul>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#citystatetypesjson","title":"CityStateTypes.json","text":"<p>Link to original</p> <p>This optional file is used for defining the types of city states. These types determine the benefits major civilizations get when they befriend or ally the city state with influence. For base ruleset Mods, if the file is ommitted or contains an empty list, all types from the Vanilla ruleset are automatically added: Cultured, Maritime, Mercantile, Militaristic, Religious.</p> <p>Each city state type has the following structure:</p> Attribute Type Default Notes name String Required friendBonusUniques List of Strings empty List of unique abilities granted to major civilizations when friends with this city state allyBonusUniques List of Strings empty List of unique abilities granted to  major civilizations when allied to city state color List of 3\u00d7 Integer [255, 255, 255] RGB color of text in civilopedia"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#policiesjson","title":"Policies.json","text":"<p>Link to original</p> <p>This file contains all the available social policies that can be \"bought\" with culture.</p> <p>They are organized in 'branches', each branch has an 'opener', one or more 'member' policies, and a 'finisher'. Therefore this file is organized using two levels - branch and member policy.</p> <p>The properties of the 'opener' are defined with the branch level, while the 'finisher' is an entry on the member level which must be named as <code>branch name + \" Complete\"</code>, case sensitive. For example, the finisher of a policy branch \"Tradition\" will have the name \"Tradition Complete\".</p>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#branch-structure","title":"Branch structure","text":"<p>Each policy branch has the following structure:</p> Attribute Type Default Notes name String Required era String Required Unlocking era as defined in Eras.json priorities Object none Priorities for each victory type, see here uniques List empty List of unique abilities this policy branch grants upon adopting it policies List empty List of member policies and branch 'finisher' - pay attention to the nesting of {} and []"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#member-policy-structure","title":"Member policy structure","text":"Attribute Type Default Notes name String Required row Integer Required Placement in UI, each unit approximately half the icon size column Integer Required Placement in UI, each unit approximately half the icon size requires List empty List of prerequisite policy names uniques List empty List of unique abilities this policy member grants upon adopting it"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#branch-finisher-structure","title":"Branch finisher structure","text":"Attribute Type Default Notes name String Required uniques List empty List of unique abilities this finisher grants upon adopting all the policy members in the branch"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#branch-priorities","title":"Branch priorities","text":"<p>The \"priorities\" object defines the priority major civilizations' AI give to a policy branch. The AI chooses the policy branch with the highest sum of the peferred victory type listed here and the number flisted in the personality's priority. If two or more candidate branches have the same priority, the AI chooses a random branch among the candidates.</p> <p>The object maps victory types to priority values for the major civilization using strings and integers. If the preferred victory type is not specified, the default priority value is set to 0.</p> <p>The code below is an example of a valid \"priorities\" definition.</p> <pre><code>\"priorities\": {\n\"Neutral\": 0,\n\"Cultural\": 10,\n\"Diplomatic\": 0,\n\"Domination\": 0,\n\"Scientific\": 10\n}\n</code></pre>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#questsjson","title":"Quests.json","text":"<p>Link to original</p> <p>This file contains the quests that may be given to major civilizations by city states.</p> <p>Each quest has the following structure:</p> Attribute Type Default Notes name String Required Defines criteria of quest, see below description String Required Description of the quest shown to players. Can add extra information based on <code>name</code>, see below type Enum Individual Individual or Global influence Float 40 Influence reward gained on quest completion duration Integer 0 Maximum number of turns to complete the quest. If 0, there is no turn limit minimumCivs Integer 1 Minimum number of Civs needed to start the quest. It is meaningful only for type = Global weightForCityStateType Object none Relative weight multiplier to this quest for each city state type or city state personality (Friendly, Neutral, Hostile, Irrational), see below"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#quest-name","title":"Quest name","text":"<p>The name of the quest defines the criteria for the quest. If they are not defined in the predefined enum, they will have no behavior. In the description, square brackets <code>[]</code> in the description of the quest is replaced with extra information (except for <code>Invest</code>). The list of predefined quest names are as follows:</p> Name Criteria Additional info Route Connect the city state to the major civilization's capital using roads or railways Clear Barbarian Camp Destroy the target barbarian camp Construct Wonder Construct the target wonder target <code>wonder</code> Connect Resource Connect the target resource to the major civilization's trade network target <code>tileResource</code> Acquire Great Person Acquire the target great person target <code>greatPerson</code> Conquer City State Defeat the target city state target <code>cityState</code> Find Player Meet the target major civilization target <code>civName</code> Find Natural Wonder Find the target natural wonder target  <code>naturalWonder</code> Give Gold Donate gold to the city state (amount does not matter) <code>civName</code> \"bully\" for city state Pledge to Protect Pledge to protect city state <code>civName</code> \"bully\" for city state Contest Culture Be the major civilization with the highest increase to culture during the duration major civilization's <code>cultureGrowth</code> Contest Faith Be the major civilization with the highest increase to faith during the duration major civilization's <code>faithGrowth</code> Contest Technology Be the major civilization with the most technologies researched during the duration major civilization's <code>techsResearched</code> Invest Donating gold yield extra Influence based on value provided IMPORTANT: value in square brackets is the extra influence in percent. i.e. [50] means 50% Bully City State Demand tribute from the target city state target <code>city state</code> Denounce Civilization Denounce the major civilization which \"bullied\" the city state <code>civName</code> \"bully\" for city state Spread Religion Spread major civilization's religion to the city state major civilization's <code>religionName</code>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#quest-weight","title":"Quest weight","text":"<p>The \"weightForCityStateType\" object determines the quest's weight multiplier. When a city state initiates a quest, the initial weight is 1, and it is multiplied by values based on city state type and personality (Friendly, Neutral, Hostile, Irrational). The AI then randomly selects a quest based on the final weighted values.</p> <p>The object maps city state type and personality to the weight multipliers for the city state using strings to floats. If the preferred victory type is not found, the default multiplier is 1.</p> <p>The code below is an example of a valid \"weightForCityStateType\" definition. In this case, a friendly militaristic city state will be 0.4 (0.2 \u00d7 2) times as likely to pick this quest than a quest with weight 1.</p> <pre><code>\"weightForCityStateType\": {\n\"Hostile\": 2,\n\"Friendly\": 0.2,\n\"Militaristic\": 2\n}\n</code></pre>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#religionsjson","title":"Religions.json","text":"<p>Link to original</p> <p>This is just a list of Strings specifying all predefined religion names. Corresponding icons must exist, that's all to it. After all, they're just containers for beliefs.</p>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#specialistsjson","title":"Specialists.json","text":"<p>Link to original</p> <p>This file should contain a list of all possible specialists that citizens can be assigned to.</p> <p>Each specialist has the following structure:</p> Attribute Type Default Notes name String Required <code>&lt;stats&gt;</code> Float 0 Per-turn yield produced by the specialist color List of 3\u00d7 Integer Required Color of the image for this specialist greatPersonPoints Object none Great person points generated by this specialist per turn. Valid keys are the names of units (Great Scientist, Warrior, etc.), valid values are Integers"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#techsjson","title":"Techs.json","text":"<p>Link to original</p> <p>This file contains all the technologies that can be researched with science. It is organized into an outer list of 'columns', which in turn contains one or more tech each.</p>"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#column-structure","title":"Column structure","text":"<p>Each tech column has the following structure:</p> Attribute Type Default Notes columnNumber Integer Required Horizontal placement in the Tech Tree era String Required Determines era reached after researching any technologies in this column. Must be in Eras.json techCost Integer 0 Default cost of the techs in this column buildingCost Integer Required Default cost of buildings requiring this tech wonderCost Integer Required Default cost of wonders requiring this tech techs List Required List of techs - pay attention to the nesting of {} and []"},{"location":"Modders/Mod-file-structure/2-Civilization-related-JSON-files/#tech-structure","title":"Tech structure","text":"Attribute Type Default Notes name String Required row Integer 0 Vertical placement in the Tech Tree, must be unique per column cost Integer Column techCost The amount of science required to research this tech prerequisites List of Strings empty A list of the names of techs that are prerequisites of this tech. Only direct prerequisites are necessary quote String none A nice story presented to the player when they research this tech uniques List of Strings empty List of unique abilities this technology grants civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/","title":"Map-related JSON files","text":""},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#terrainsjson","title":"Terrains.json","text":"<p>Link to original</p> <p>This file contains the base terrains, terrain features and natural wonders that can appear on the map.</p> <p>Each terrain entry has the following structure:</p> Attribute Type Default Notes name String Required [^A] type Enum Required Land, Water, TerrainFeature, NaturalWonder [^B] occursOn List of Strings none Only for terrain features and Natural Wonders: The baseTerrain it can be placed on turnsInto String none Only for NaturalWonder: optional mandatory base terrain [^C] weight Integer 10 Only for NaturalWonder: relative weight of being picked by the map generator <code>&lt;stats&gt;</code> Float 0 Per-turn yield or bonus yield for the tile overrideStats Boolean false If true, a feature's yields replace any yield from underlying terrain instead of adding to it unbuildable Boolean false If true, nothing can be built here - not even resource improvements impassable Boolean false No unit can enter unless it has a special unique movementCost Integer 1 Base movement cost defenceBonus Float 0 Combat bonus for units being attacked here RGB List of 3\u00d7 Integer Gold RGB color for 'Default' tileset display uniques List of Strings empty List of unique abilities this terrain has civilopediaText List empty See civilopediaText chapter <p>[^A]: Some names have special meanings. <code>Grassland</code> is used as fallback in some cases - e.g. Civilopedia prefers to displays a TerrainFeature on top of it, unless <code>occursOn</code> is not empty and does not contain it.       <code>River</code> is hardcoded to be used to look up a Stats unique to determine the bonuses an actual River provides (remember, rivers live on the edges not as terrain).       River should always be a TerrainFeature and have the same uniques the one in the vanilla rulesets has - if you change that, expect surprises. [^B]: A base ruleset mod is always expected to provide at least one Land and at least one Water terrain. We do not support Land-only or Water-only mods, even if they might be possible to pull off. [^C]: If set, the base terrain is changed to this after placing the Natural Wonder, and terrain features cleared. Otherwise, terrain features are reduced to only those present in occursOn.</p>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#tileimprovementsjson","title":"TileImprovements.json","text":"<p>Link to original</p> <p>This file lists the improvements that can be constructed or created on a map tile by a unit having the appropriate unique.</p> <p>Note that improvements have two visual representations - icon and pixel graphic in the tileset. Omitting the icon results in a horribly ugly user interface, while omitting tileset graphics will just miss out on an optional visualization. If you provide a pixel graphic for FantasyHex, please be aware of the layering system and the ruleVariants in the tileset json. A single graphic may suffice if it has lots of transparency, as it will be drawn on top of all other terrain elements.</p> <p>Each improvement has the following structure:</p> Attribute Type Default Notes name String Required [^A] terrainsCanBeBuiltOn List of Strings empty Terrains that this improvement can be built on [^B]. Removable terrain features will need to be removed before building an improvement [^C]. Must be in Terrains.json techRequired String none The name of the technology required to build this improvement replaces String none The name of a improvement that should be replaced by this improvement. Must be in TileImprovements.json uniqueTo String none The name of the nation this improvement is unique for <code>&lt;stats&gt;</code> Integer 0 Per-turn bonus yield for the tile turnsToBuild Integer -1 Number of turns a worker spends building this. If -1, the improvement is unbuildable [^D]. If 0, the improvement is always built in one turn uniques List of Strings empty List of unique abilities this improvement has shortcutKey String none Keyboard binding. Currently, only a single character is allowed (no function keys or Ctrl combinations) civilopediaText List empty See civilopediaText chapter <p>[^A]: Special improvements: Road, Railroad, Remove *, Cancel improvement order, City ruins, City center, Barbarian encampment - these have special meanings hardcoded to their names. [^B]: Improvements with an empty <code>terrainsCanBeBuiltOn</code> list and positive <code>turnsToBuild</code> value can only be built on resources with <code>improvedBy</code> or <code>improvement</code> that contains the corresponding improvement. [^C]: The removal of terrain features is optional if the feature is named in <code>terrainsCanBeBuiltOn</code> or the unique <code>Does not need removal of [tileFilter]</code> is used (e.g. Camp allowed by resource). [^D]: They can still be created with the UnitAction unique <code>Can instantly construct a [improvementFilter] improvement</code>.</p>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#tileresourcesjson","title":"TileResources.json","text":"<p>Link to original</p> <p>This file lists the resources that a map tile can have.</p> <p>Note the predefined <code>resourceType</code> enum cannot be altered in a json.</p> <p>Note also that resources have two visual representations - icon and pixel graphic in the tileset. Omitting the icon results in a horribly ugly user interface, while omitting tileset graphics will miss out on a visualization on the map. If you provide a pixel graphic for FantasyHex, please be aware of the layering system and the ruleVariants in the tileset json. A single graphic may suffice if it has lots of transparency, as it will be drawn on top of terrain and features but below an improvement - if the single improvement graphic exists at all.</p> <p>Each resource has the following structure:</p> Attribute Type Default Notes name String Required resourceType Enum Bonus Bonus, Luxury or Strategic terrainsCanBeFoundOn List of Strings empty Terrains that this resource can be found on. Must be in Terrains.json <code>&lt;stats&gt;</code> Integer 0 Per-turn bonus yield for the tile improvementStats Object none The additional yield when improved, see specialized stats revealedBy String none The technology name required to see, work and improve this resource improvedBy List of strings empty The improvements required for obtaining this resource. Must be in TileImprovements.json improvement String none The improvement required to obtain this resource. Must be in TileImprovements.json (redundant due to <code>improvedBy</code>) unique List of Strings empty List of unique abilities this resource has civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#ruinsjson","title":"Ruins.json","text":"<p>Link to original</p> <p>This optional file contains the possible rewards ancient ruins give.</p> <p>Base ruleset Mods can omit the file, in which case they inherit the ones from the Vanilla ruleset. They can, however, provide a file with an empty list (<code>[]</code>) to avoid that. In this case there should be no improvements with the \"Provides a random bonus when entered\" Unique. Conversely, if there are such improvements, the Mod checker will flag an empty Ruins file as error.</p> <p>Each of the objects in the file represents a single reward you can get from ruins. It has the following structure:</p> Attribute Type Default Notes name String Required Name of the ruins. Never shown to the user, but they have to be distinct notification String Required Notification added to the user when this reward is chosen. If omitted, an empty notification is shown. Some notifications may have parameters, refer to the table below. weight Integer (\u22650) 1 Relative weight this reward is chosen next [^E] uniques List of Strings empty List of unique abilities that will trigger when entering the ruins. If more than 1 unique is added, the notification will be shown multiple times due to a bug (may be outdated) excludedDifficulties List of Strings empty A list of all difficulties on which this reward may not be awarded <p>[^E]: The exact algorithm for choosing a reward is the following:</p> <ul> <li>Create a list of all possible rewards. Each reward's frequency in the list corresponds to its weight, a reward with weight one will appear once, a reward with weight two will appear twice, etc.</li> <li>Shuffle this list</li> <li>Try give rewards starting from the top of the list. If any of the uniques of the rewards is valid in this context, reward it and stop trying more rewards.</li> </ul>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#notifications","title":"Notifications","text":"<p>Some of the rewards ruins can give will have results that are not deterministic when writing it in the JSON, so creating a good notification for it would be impossible. An example for this would be the \"Gain [50]-[100] [Gold]\" unique, which will give a random amount of gold. For this reason, we allow some notifications to have parameters, in which values will be filled, such as \"You found [goldAmount] gold in the ruins!\". All the uniques which have this property can be found below.</p> Unique Parameters Free [] found in the ruins The name of the unit will be filled in the notification, including unique units of the nation [] population in a random city The name of the city to which the population is added will be filled in the notification Gain []-[] [] The exact amount of the stat gained will be filled in the notification [] free random reasearchable Tech(s) from the [] The notification must have placeholders equal to the number of techs granted this way. Each of the names of these free techs will be filled in the notification Gain enough Faith for a Pantheon The amount of faith gained is filled in the notification Gain enough Faith for []% of a Great Prophet The amount of faith gained is filled in the notification"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#specific-uniques","title":"Specific uniques","text":"<p>A few uniques can be added to ancient ruin effects to modify when they can be earned. These are:</p> <ul> <li>\"Only available after [amount] turns\"</li> <li>\"Only available \" <li>\"Hidden after a great prophet has been earned\"</li>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#tileset-specific-json","title":"Tileset-specific json","text":"<p>Link to original FantasyHex</p> <p>A mod can define new Tilesets or add to existing ones, namely FantasyHex. There is one json file per Tileset, named same as the Tileset, and placed in a subfolder named \"TileSets\" relative to the other json files. This is called TileSetConfig and has the following structure:</p> Attribute Type Default Notes useColorAsBaseTerrain Boolean false useSummaryImages Boolean false unexploredTileColor Color Dark Gray <code>{\"r\":0.25,\"g\":0.25,\"b\":0.25,\"a\":1}</code> fogOfWarColor Color Black <code>{\"r\":0,\"g\":0,\"b\":0,\"a\":1}</code> fallbackTileSet String \"FantasyHex\" null to disable tileScale Float 1.0 The scale of all tiles. Can be used to increase or decrease the size of every tile tileScales Object empty Used by the \"Minimal\" tileset to scale all its tiles except the base terrain down. Overrides <code>tileScale</code> value for specified terrain ruleVariants Object empty See here"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#layering-images","title":"Layering images","text":"<p>ruleVariants control substitutions when layering images for a tile, they are list looking like:</p> <pre><code>\"ruleVariants\": {\n    \"Grassland+Forest\": [\"Grassland\", \"GrasslandForest\"],\n    \"Plains+Forest\": [\"Plains\", \"PlainsForest\"],\n    \"Plains+Jungle\": [\"Plains\", \"PlainsJungle\"],\n    // . . .\n}\n</code></pre> <p>Each line means \"if the tile content is this... then combine the following png images\". The key part follows a specific order and must match in its entirety, meaning \"Plains+Forest\" is not valid for \"Plains+Forest+Deer\", and when it matches no other image layering is done except roads and units (I think - WIP).</p> <p>When TileSetConfig's for the same Tileset are combined, for the first three properties the last mod wins, while ruleVariants are merged, meaning only an entry with the same key overwrites an earlier entry. (TODO)</p>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#stats","title":"Stats","text":"<p>Terrains, features, resources and improvements may list yield statistics. The statistics can be one of the following:</p> <ul> <li>production</li> <li>food</li> <li>gold</li> <li>science</li> <li>culture</li> <li>happiness</li> <li>faith</li> </ul>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#general-stat","title":"General stat","text":"<p>If an object carries general stat(s), it contains any combination (or none) of the above stats, each mapping to a corresponding number [^1]. For Example:</p> <pre><code>\"gold\": 2,\n\"improvement\": \"Quarry\",\n</code></pre>"},{"location":"Modders/Mod-file-structure/3-Map-related-JSON-files/#specialized-stats","title":"Specialized stats","text":"<p>For specialized stats, they might come as sub-object in a named field. The sub-object contains any combination (or none) of the above stats, each mapping to a corresponding number [^1]. For Example:</p> <pre><code>\"improvement\": \"Quarry\",\n\"improvementStats\": { \"gold\": 1, \"production\": 1 },\n</code></pre> <p>[^1]: The values are usually integers, though the underlying code supports floating point. The effects are, however, insufficiently tested and therefore -so far- using fractional stats is unsupported. Go ahead and thoroughly test that in a mod and help out with feedback \ud83d\ude01.</p>"},{"location":"Modders/Mod-file-structure/4-Unit-related-JSON-files/","title":"Unit-related JSON files","text":""},{"location":"Modders/Mod-file-structure/4-Unit-related-JSON-files/#unitsjson","title":"Units.json","text":"<p>Link to original</p> <p>This file should contain a list of all the units, both military and civilian, that you want to use in your mod.</p> <p>Each unit has the following structure:</p> Attribute Type Default Notes name String Required unitType String Required The type of the unit. Must be in UnitTypes.json cost Integer -1 The amount of production required to build this unit. The production needed is always positive movement Integer 0 The amount of movement points the unit has by strength Integer 0 The melee attack and defensive strength of the unit. If this and rangedStrength are omitted or 0, the unit will be a civilian rangedStrength Integer 0 The ranged attack and defensive strength of the unit. If omitted, the unit cannot ranged attack. If used, strength must be set too. religiousStrength Integer 0 The religious attack and defensive strength of the unit range Integer 2 The range from which ranged attacks can be preformed interceptRange Integer 0 Air units attacking within in this range will be intercepted requiredTech String none The tech required to build this unit. Must be in Techs.json obsoleteTech String none After researching this tech, the unit can no longer be build. Must be in Techs.json requiredResource String none Resource that is consumed by building this unit. Must be in TileResources.json upgradesTo String none Unit that this unit can upgrade to when it is available. Must be in Units.json replaces String none If this unit is unique to a nation, this is the unit it replaces. Must be in Units.json uniqueTo String none The nation that this unit is unique to. Must be in Nations.json hurryCostModifier Integer 0 If this unit is bought for gold, its price is increased by so much percent promotions List of Strings empty A list of all the promotions the unit automatically receives upon being built. Each promotion must be in UnitPromotions.json uniques List of Strings empty List of unique abilities this unit has replacementTextForUniques String none If provided, this will be displayed instead of the list of uniques. Can be used for better formatting. attackSound String none The sound that is to be played when this unit attacks. For possible values, see Sounds civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/4-Unit-related-JSON-files/#unitpromotionsjson","title":"UnitPromotions.json","text":"<p>Link to original</p> <p>This file lists the available unit promotions.</p> <p>Each promotion must have an icon, except progressions ending in \" I\", \" II\", \" III\" (no IV V VI allowed) are rendered by looking up an icon without those suffixes and adding stars.</p> <p>Remember, promotions can be \"bought\" with XP, but also granted by the unit type, buildings, wonders and such. They are preserved when a unit upgrades, therefore special properties of nation unique units that can be inherited when they upgrade should be in a promotion, not uniques/stats in the units json (example: Slinger withdraw).</p> <p>Each promotion has the following structure:</p> Attribute Type Default Notes name String Required See above for \"I, II, III\" progressions prerequisites List of Strings empty Prerequisite promotions column Integer Optional Determines placement order on the promotion picker screen. Name is historical, these coordinates no longer control placement directly. Promotions without coordinates are ensured to be placed last. (\u2026) row Integer Optional \u2026 In base mods without any coordinates, promotions without prerequisites are sorted alphabetically and placed top down, the rest of the screen will structure the dependencies logically. If your mod has a \"Heal instantly\", it is suggested to use row=0 to place it on top unitTypes List of Strings empty The unit types for which this promotion applies as specified in UnitTypes.json uniques List of Strings empty List of unique abilities this promotion grants to the units civilopediaText List empty See civilopediaText chapter innerColor List empty Color of the icon outerColor List empty Color of the background"},{"location":"Modders/Mod-file-structure/4-Unit-related-JSON-files/#unittypesjson","title":"UnitTypes.json","text":"<p>Link to original</p> <p>This optional file is used for defining new types of units. The names of these can be used in unitFilters, and these types determine what domain the unit moves in: over land, over water or through the air. For base ruleset Mods, if the file is omitted or contains an empty list, all types from the Vanilla ruleset are automatically added: Civilian, Melee, Ranged, Scout, Mounted, Armor, Siege, WaterCivilian, WaterMelee, WaterRanged, WaterSubmarine, WaterAircraftCarrier, Fighter, Bomber, AtomicBomber, and Missile.</p> <p>Each unit type has the following structure:</p> Attribute Type Default Notes name String Required movementType Enum Required The domain through which the unit moves. Allowed values: \"Water\", \"Land\", \"Air\" uniques List of String none List of unique abilities this promotion grants to units of this type civilopediaText List empty See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/","title":"Miscellaneous JSON files","text":""},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#difficultiesjson","title":"Difficulties.json","text":"<p>Link to original</p> <p>This optional file defines the difficulty levels a player can choose when starting a new game.</p> <p>Base ruleset Mods can omit the file or supply an empty list, even though at least one difficulty is mandatory, in which case they inherit the ones from the Vanilla ruleset.</p> <p>Each difficulty level has the following structure:</p> Attribute Type Default Notes name String Required baseHappiness Integer 0 extraHappinessPerLuxury Float 0 researchCostModifier Float 1 unitCostModifier Float 1 unitSupplyBase Integer 5 unitSupplyPerCity Integer 2 buildingCostModifier Float 1 policyCostModifier Float 1 unhappinessModifier Float 1 barbarianBonus Float 0 barbarianSpawnDelay Integer 0 playerBonusStartingUnits List of Strings empty Can also be 'Era Starting Unit', maps to <code>startingMilitaryUnit</code> of the Eras file. All other units must be in Units.json. Applies only to human player civs aiDifficultyLevel String empty Applies some modifiers to the AI from the chosen difficulty. Modifiers such as unhappinessModifier and aiUnhappinessModifier stack multiplicatively. If empty: defaults to \"Chieftain\", or the first available difficulty. aiCityGrowthModifier Float 1 aiUnitCostModifier Float 1 aiBuildingCostModifier Float 1 aiWonderCostModifier Float 1 aiBuildingMaintenanceModifier Float 1 aiUnitMaintenanceModifier Float 1 aiUnitSupplyModifier Integer 5 aiFreeTechs List of Strings empty Must be in Techs.json aiMajorCivBonusStartingUnits List of Strings empty Same rules as playerBonusStartingUnits, See above. Applies only to AI major civs aiCityStateBonusStartingUnits List of Strings empty Same rules as playerBonusStartingUnits, See above. Applies only to city-state civs aiUnhappinessModifier Float 1 turnBarbariansCanEnterPlayerTiles Integer 0 clearBarbarianCampReward Integer 25 uniques List of Strings empty Will be treated as part of GlobalUniques when this difficulty is chosen"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#erasjson","title":"Eras.json","text":"<p>Link to original</p> <p>This file should contain all the era's you want to use in your mod.</p> <p>Each era can have the following attributes:</p> Attribute Type Default Notes name String Required researchAgreementCost Integer (\u22650) 300 Cost of research agreements when the most technologically advanced civ is in this era iconRGB List of 3\u00d7 Integer white RGB color that icons for technologies of this era should have in the Tech screen startingSettlerCount Integer (\u22650) 1 Amount of settler units that should be spawned when starting a game in this era (setting this to zero is discouraged [^1]) startingSettlerUnit String \"Settler\" Name of the unit that should be used for the previous field. Must be in Units.json, or a unit with the \"Founds a new city\" unique must exist startingWorkerCount Integer (\u22650) 0 Amount of worker units that should be spawned when starting a game in this era startingWorkerUnit String \"Worker\" Name of the unit that should be used for the previous field. If startingWorkerCount&gt;0, then it must exist in Units.json, or a unit with the \"Can build [filter] improvements on tiles\" unique must exist startingMilitaryUnitCount Integer (\u22650) 1 Amount of military units that should be spawned when starting a game in this era startingMilitaryUnit String \"Warrior\" Name of the unit that should be used for the previous field. Must be in Units.json startingGold Integer (\u22650) 0 Amount of gold each civ should receive when starting a game in this era startingCulture Integer (\u22650) 0 Amount of culture each civ should receive when starting a game in this era settlerPopulation Integer (&gt;0) 1 Amount of population each city should have when settled when starting a game in this era settlerBuildings List of Strings empty Buildings that should automatically be built whenever a city is settled when starting a game in this era startingObsoleteWonders List of Strings empty Wonders (and technically buildings) that should be impossible to built when starting a game in this era. Used in the base game to remove all wonders older than 2 era's baseUnitBuyCost Integer 200 Default value used for the unique <code>Can be purchased with [stat] [cityFilter]</code> embarkDefense Integer 3 Default defense for embarked unit in this era startPercent Integer 0 When starting, percentage ([0]%-[100]%) of turns skipped in total turns specified in Speed.json citySound String \"cityClassical\" Sound used when city is founded in this era <p>[^1]: Successfully setting startingSettlerCount to zero in a mod (idea: conquer or die) is not easy. Some player-controlled settings require at least one Settler, through any source (see difficulties for other possible settler sources), or you won't be able to start a game: Once City Challenge requires one for all players, and allowing any city-states requires one for those. Would also affect defeat rules.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#speedsjson","title":"Speeds.json","text":"<p>Link to original</p> <p>This optional file should contain all the speeds you want to use in your mod.</p> <p>Base ruleset Mods can omit the file or supply an empty list, even though at least one game speed is mandatory, in which case they inherit the ones from the Vanilla ruleset.</p> <p>Each speed can have the following attributes:</p> Attribute Type Default Notes name String Required Name of the speed modifier Float (\u22650) 1.0 Overall game speed modifier productionCostModifier Float (\u22650) <code>modifier</code> value Scales production cost of units and buildings goldCostModifier Float (\u22650) <code>modifier</code> value Scales gold costs scienceCostModifier Float (\u22650) <code>modifier</code> value Scales science costs cultureCostModifier Float (\u22650) <code>modifier</code> value Scales culture costs faithCostModifier Float (\u22650) <code>modifier</code> value Scales faith costs improvementBuildLengthModifier Float (\u22650) <code>modifier</code> value Scales the time it takes for a worker to build tile improvements barbarianModifier Float (\u22650) <code>modifier</code> value Scales the time between barbarian spawns goldGiftModifier Float (\u22650) <code>modifier</code> value Scales the influence gained from gifting gold to city-states cityStateTributeScalingInterval Float (\u22650) 6.5 The number of turns it takes for the amount of gold a player demands from city-states to increase by 5 gold goldenAgeLengthModifier Float (\u22650) <code>modifier</code> value Scales the length of golden ages religiousPressureAdjacentCity Integer (\u22650) 6 Defines how much religious pressure a city exerts on nearby cities peaceDealDuration Integer (\u22650) 10 The number of turns a peace deal lasts dealDuration Integer (\u22650) 30 The number of turns a non-peace deal (research agreement, open borders, etc.) lasts startYear Float -4000 The start year of the game (negative is BC/BCE) turns List Required List of time interval per turn, see below uniques List of Strings empty Will be treated as part of GlobalUniques when this speed is chosen"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#time-interval-per-turn","title":"Time interval per turn","text":"<p>The \"turns\" attribute defines the number of years passing between turns. The attribute consists of a list of objects, each having 2 required attributes: \"yearsPerTurn\" (Float) and \"untilTurn\" (Integer)</p> Attribute Type Default Notes yearsPerTurn Integer Required Number of years passing between turns untilTurn Integer Required End of this interval (if it is the last object, see below) <p>For each row, \"yearsPerTurn\" is applied up to the \"untilTurn\"-1 to \"untilTurn\" step. The last \"untilTurn\" in the list is ignored for year calculation, that is, if a game passes that turn number, years continue to increment by the \"yearsPerTurn\" of the last entry. However, this is used when starting a game in a later Era: Era.startPercent is relative to the last \"untilTurn\".</p> <p>The code below is an example of a valid \"turns\" definition and it specifies that the first 50 turns of a game last for 60 years each, then the next 30 turns (and any played after the 80th) last for 40 years each.</p> <pre><code>\"turns\": [\n    {\"yearsPerTurn\": 60, \"untilTurn\":  50},\n    {\"yearsPerTurn\": 40, \"untilTurn\":  80}\n]\n</code></pre>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#eventsjson","title":"Events.json","text":"<p>Events allow users to choose between options of triggers to activate.</p> Attribute Type Default Notes name String Required Used for triggering via \"Triggers a [event] event\" unique text String None Flavor text displayed to user presentation One of: \"None\", \"Alert\", \"Floating\" Alert \"Alert\" indicates a regular popup, \"None\" means the choice is made randomly, \"Floating\" is for tutorial-style indicators civilopediaText List Optional See civilopediaText chapter choices List of EventChoices User can choose to trigger one of the viable choices <p>You can use text and/or civilopediaText, if both are present both are shown (but why would you?)</p> <p>Event choices are comprised of:</p> Attribute Type Default Notes text String Required Displayed to user as button. Should be an action name - \"Do X\" uniques List of uniques to trigger or limit conditions Required The triggers that this choice activates upon being chosen, and \"Unavailable\" / \"Only available\" uniques keyShortcut key to select (name) none Key names see Gdx.Input.Keys civilopediaText List Optional See civilopediaText chapter <p>Here, civilopediaText is shown outside the active Button, before the triggeredUniques.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#modoptionsjson","title":"ModOptions.json","text":"<p>This file is a little different:</p> <ul> <li>Does not exist in Vanilla ruleset</li> <li>Is entirely optional but will be created after downloading a mod</li> </ul> <p>Note that this file controls declarative mod compatibility (Work in progress) - e.g. there's uniques to say your Mod should only or never be used as 'Permanent audiovisual mod'. Incompatibility filtering works so far between extension and base mods, but feel free to document known extension-to-extension incompatibilities using the same Unique now. Stay tuned!</p> <p>The file can have the following attributes, not including the values Unciv sets automatically:</p> Attribute Type default Notes isBaseRuleset Boolean false Replaces vanilla ruleset if true uniques List empty Mod-wide specials, see here techsToRemove List empty List of Technologies or technologyFilter to remove (isBaseRuleset=false only) buildingsToRemove List empty List of Buildings or Wonders or buildingFilter to remove (isBaseRuleset=false only) unitsToRemove List empty List of Units or unitFilter to remove (isBaseRuleset=false only) nationsToRemove List empty List of Nations or nationFilter to remove (isBaseRuleset=false only) policyBranchesToRemove List empty List of Policy Branches to remove (isBaseRuleset=false only) policiesToRemove List empty List of Policies to remove (isBaseRuleset=false only) constants Object empty See ModConstants tileset String empty Only applicable for base rulesets unitset String empty Only applicable for base rulesets <p>The values normally set automatically from github metadata are:</p> Attribute Type Notes modUrl String The github page the mod was downloaded from, or empty if a freely hosted zip was used defaultBranch String master The repo's default branch author String Repo owner lastUpdated String ISO date modSize Integer 0 Size in kB topics List empty A list of \"unciv-mod-*\" github topics <p>To clarify: When your Mod is distributed via github, including these in the Mod repo has no effect. However, when a Mod is distributed without a github repository, these values can and should be set by the author in the distributed <code>ModOptions.json</code>.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#modconstants","title":"ModConstants","text":"<p>Stored in ModOptions.constants, this is a collection of constants used internally in Unciv. This is the only structure that is merged field by field from mods, not overwritten, so you can change XP from Barbarians in one mod and city distance in another. In case of conflicts, there is no guarantee which mod wins, only that default values are ignored.</p> Attribute Type Default Notes maxXPfromBarbarians Int 30 [^A] cityStrengthBase Float 8.0 [^B] cityStrengthPerPop Float 0.4 [^B] cityStrengthFromTechsMultiplier Float 5.5 [^B] cityStrengthFromTechsExponent Float 2.8 [^B] cityStrengthFromTechsFullMultiplier Float 1.0 [^B] cityStrengthFromGarrison Float 0.2 [^B] baseCityBombardRange Int 2 [^S] cityWorkRange Int 3 [^T] cityExpandRange Int 5 [^U] cityAirUnitCapacity Int 6 [^W] unitSupplyPerPopulation Float 0.5 [^C] minimalCityDistance Int 3 [^D] minimalCityDistanceOnDifferentContinents Int 2 [^D] unitUpgradeCost Object See below [^J] naturalWonderCountMultiplier Float 0.124 [^E] naturalWonderCountAddedConstant Float 0.1 [^E] ancientRuinCountMultiplier Float 0.02 [^F] spawnIceBelowTemperature Float -0.8 [^G] maxLakeSize Int 10 [^H] riverCountMultiplier Float 0.01 [^I] minRiverLength Int 5 [^I] maxRiverLength Int 666 [^I] religionLimitBase Int 1 [^K] religionLimitMultiplier Float 0.5 [^K] pantheonBase Int 10 [^L] pantheonGrowth Int 5 [^L] workboatAutomationSearchMaxTiles Int 20 [^M] maxSpyRank Int 3 [^N] spyRankSkillPercentBonus Float 30 [^O] minimumWarDuration Int 10 [^P] baseTurnsUntilRevolt Int 4 [^Q] cityStateElectionTurns Int 15 [^R] maxImprovementTechErasForward Int None [^S] goldGiftMultiplier Float 1 [^T] goldGiftTradeMultiplier Float 0.8 [^U] goldGiftDegradationMultiplier Float 1.0 [^V] <p>Legend:</p> <ul> <li>[^A]: Max amount of experience that can be gained from combat with barbarians</li> <li>[^B]: Formula for city Strength:     Strength = baseStrength + strengthPerPop + strengthFromTiles +     ((%techs * multiplier) ^ exponent) * fullMultiplier +     (garrisonBonus * garrisonUnitStrength * garrisonUnitHealth/100) +     defensiveBuildingStrength     where %techs is the percentage of techs in the tech tree that are complete     If no techs exist in this ruleset, %techs = 0.5 (=50%)</li> <li>[^S]: The distance that cities can attack</li> <li>[^T]: The tiles in distance that population in cities can work on. Note: Higher values may lead to performace issues and may cause bugs. cityWorkRange may be greater than cityExpandRange.</li> <li>[^U]: The distance that cities can expand their borders to. Note: Higher values may lead to performace issues and may cause bugs.</li> <li>[^C]: Formula for Unit Supply:     Supply = unitSupplyBase (difficulties.json)     unitSupplyPerCity * amountOfCities + (difficulties.json)     unitSupplyPerPopulation * amountOfPopulationInAllCities     unitSupplyBase and unitSupplyPerCity can be found in difficulties.json     unitSupplyBase, unitSupplyPerCity and unitSupplyPerPopulation can also be increased through uniques</li> <li>[^D]: The minimal distance that must be between any two cities, not counting the tiles cities are on     The number is the amount of tiles between two cities, not counting the tiles the cities are on.     e.g. \"C__C\", where \"C\" is a tile with a city and \"_\" is a tile without a city, has a distance of 2.     First constant is for cities on the same landmass, the second is for cities on different continents.</li> <li>[^E]: NaturalWonderGenerator uses these to determine the number of Natural Wonders to spawn for a given map size. The number scales linearly with map radius: #wonders = radius * naturalWonderCountMultiplier + naturalWonderCountAddedConstant. The defaults effectively mean Tiny - 1, Small - 2, Medium - 3, Large - 4, Huge - 5, Custom radius &gt;=109 - all G&amp;K wonders.</li> <li>[^F]: MapGenerator.spreadAncientRuins: number of ruins = suitable tile count * this</li> <li>[^G]: MapGenerator.spawnIce: spawn Ice where T &lt; this, with T calculated from temperatureExtremeness, latitude and perlin noise.</li> <li>[^H]: MapGenerator.spawnLakesAndCoasts: Water bodies up to this tile count become Lakes</li> <li>[^I]: RiverGenerator: river frequency and length bounds</li> <li>[^J]: A UnitUpgradeCost sub-structure.</li> <li>[^K]: Maximum foundable Religions = religionLimitBase + floor(MajorCivCount * religionLimitMultiplier)</li> <li>[^L]: Cost of pantheon = pantheonBase + CivsWithReligion * pantheonGrowth</li> <li>[^M]: When the AI decides whether to build a work boat, how many tiles to search from the city center for an improvable tile</li> <li>[^N]: The maximum rank any spy can reach</li> <li>[^O]: How much skill bonus each rank gives</li> <li>[^P]: The number of turns a civ has to wait before negotiating for peace</li> <li>[^Q]: The number of turns before a revolt is spawned</li> <li>[^R]: The number of turns between city-state elections</li> <li>[^S]: If set, the Improvement picker will silently skip improvements whose tech requirement is more advanced than your current Era + this value. Example: With a 0, Trade posts will not show until the Medieval Era, with a 1 they will already show in the CLassical Era.</li> <li>[^T]: The multiplier of the gold value of a one-sided trade to be stored as gifts.</li> <li>[^U]: The multiplier of the gold value of a regular trade to be stored as gifts. Set to 0 to disable gold gifting in two-sided trades.</li> <li>[^U]: Modifies how quickly the GaveUsGifts dimplomacy modifier runs out. A higher value makes it run out quicker. Normally the gifts reduced by ~2.5% per turn depending on the diplomatic relations with the default value.</li> <li>[^W]: Number of air units that can be stationed in a city, not including carried/transported air units.</li> </ul>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#unitupgradecost","title":"UnitUpgradeCost","text":"<p>These values are not merged individually, only the entire sub-structure is.</p> Attribute Type Notes base Float 10 perProduction Float 2 eraMultiplier Float 0 exponent Float 1 roundTo Int 5 <p>The formula for the gold cost of a unit upgrade is (rounded down to a multiple of <code>roundTo</code>):         (             max((<code>base</code> + <code>perProduction</code> * (new_unit_cost - old_unit_cost)), 0)             * (1 + eraNumber * <code>eraMultiplier</code>) * <code>civModifier</code>         ) ^ <code>exponent</code> With <code>civModifier</code> being the multiplicative aggregate of \"[relativeAmount]% Gold cost of upgrading\" uniques that apply.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#globaluniquesjson","title":"GlobalUniques.json","text":"<p>link to original</p> <p>GlobalUniques defines uniques that apply globally. e.g. Vanilla rulesets define the effects of Unhappiness here.</p> <p>Base ruleset Mods can omit the file, in which case they inherit the ones from the Vanilla ruleset. Alternatively, they can supply a file with an empty object (<code>{}</code>), meaning that no global Uniques exist for that Mod.</p> <p>It has the following structure:</p> Attribute Type Default Notes name String \"GlobalUniques\" The name field is not used, but still must be set (the Ruleset validator might display it). uniques List of Strings empty List of unique abilities that apply globally unitUniques List of Strings empty List of unique abilities that applies to each unit <p>When extension rulesets define GlobalUniques, all uniques are merged. At the moment there is no way to change/remove uniques set by a base mod.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#tutorialsjson","title":"Tutorials.json","text":"<p>link to original</p> <p>Note a Base Ruleset mod can define a \"welcome page\" here by adding a \"Tutorial\" with a name equal to the name of the mod! As an exception to the general rule, this file in a Base Ruleset mod will not replace the default, but add to it like extension mods do. Also, place it under <code>&lt;mod&gt;/jsons/</code> normally even if the original is found one level above the vanilla jsons.</p> <p>Each tutorial has the following structure:</p> Attribute Type Default Notes name String Required Entry name civilopediaText List Optional See civilopediaText chapter steps List of Strings Optional Plain text <p>If an entry contains both <code>steps</code> and <code>civilopediaText</code> attributes, the <code>civilopediaText</code> is shown first. Tutorials shown as Popup can show an show an external image (not part of the texture atlases) if there is an image unter ExtraImages (directly under assets or the Mod folder) having the same name. This is searched for, meaning the mod defining the Tutorial is irrelevant, mods can override builtin ExtraImages, and case sensitivity depends on the OS.</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#victorytypesjson","title":"VictoryTypes.json","text":"<p>link to original</p> <p>These files contain which victories this mod provides, and what milestones must be reached for someone to win a victory. Most of the file contains of strings that are shown to the user in the victory screen, with the rest being the requirements for winning.</p> <p>Base ruleset Mods can omit the file or supply an empty list, even though at least one victory type is mandatory, in which case they inherit the ones from the Vanilla ruleset.</p> <p>Each victory have the following structure:</p> Attribute Type Default Notes name String Required Name of the victory victoryScreenHeader String none Shown in the footer of the victory in the <code>our status</code> in the victory screen victoryString String none Shown in the footer of the victory screen when you won the game with this victory defeatString String none Shown in the footer of the victory screen when someone else won the game with this victory hiddenInVictoryScreen Boolean false Whether progress of this victory is hidden in the victory screen requiredSpaceshipParts List of Strings empty What spaceship parts must be added to the capital for the corresponding milestone Milestones List of Strings Required List of milestones that must be accomplished to win, see below civilopediaText List Optional See civilopediaText chapter"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#milestones","title":"Milestones","text":"<p>Currently the following milestones are supported:</p> Milestone Requirement Build [building] Build the building [building] in any city Anyone should build [building] Anyone must build the building [building] for all players to have this milestone Add all [comment] in capital Add all units in the <code>requiredSpaceshipParts</code> field of this victory to the capital Destroy all players You must be the only major civilization with any cities left Capture all capitals Capture all the original capitals of major civilizations in the game Complete [amount] Policy branches Fully complete at least [amount] policy branches Win diplomatic vote At any point in the game win a diplomatic vote (UN). You may lose afterwards and still retain this milestone Become the world religion Have your religion be the majority religion in a majority of cities of all major civs Have highest score after max turns Basically time victory. Enables the 'max turn' slider and calculates score when that amount is reached Have more [countable] than each player's [countable] Have your given <code>countable</code> be more than every other Civilization's <code>countable</code> to achieve this victory. This is useful to simulate a victory similar to the Cultural Victory in Brave New World."},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#civilopedia-text","title":"Civilopedia text","text":"<p>Any 'thing' defined in json and listed in the Civilopedia can supply extra text, specifically for the Civilopedia. This can be used to explain special considerations better when the automatically generated display is insufficient, or for 'flavour', background stories and the like. Such text can be formatted and linked to other Civilopedia entries, within limits.</p> <p>An example of the format is:</p> <pre><code>\"civilopediaText\": [\n    { \"text\": \"Ancient ruins provide a one-time random bonus when explored\" },\n    { \"separator\": true },\n    {\n        \"text\": \"This line is red and links to the Scout including icons\",\n        \"link\": \"Unit/Scout\",\n        \"color\": \"red\"\n    },\n    {\n        \"text\": \"A big fat header sporting a golden star\",\n        \"header\": 1,\n        \"starred\": true,\n        \"color\": \"#ffeb7f\"\n    },\n],\n</code></pre> <p>List of attributes - note not all combinations are valid:</p> Attribute Type Description <code>text</code> String Text to display <code>link</code> String Create link and icon, format: Category/Name or external link ('http://','https://','mailto:') <code>icon</code> String Show icon without linking, format: Category/Name <code>extraImage</code> String Display an Image instead of text. Can be a path found in a texture atlas or or the name of a png or jpg in the ExtraImages folder <code>imageSize</code> Float Size in world units of the [extraImage], the smaller coordinate is calculated preserving aspect ratio. available width <code>header</code> Integer Header level. 1 means double text size and decreases from there <code>size</code> Integer Text size, is 18. Use <code>size</code> or <code>header</code> but not both <code>indent</code> Integer Indent level. 0 means text will follow icons, 1 aligns to the right of all icons, each further step is 30 units <code>padding</code> Float Vertical padding between rows, 5 units <code>color</code> String Sets text color, accepts names or 6/3-digit web colors (e.g. #FFA040) <code>separator</code> Boolean Renders a separator line instead of text. Can be combined only with <code>color</code> and <code>size</code> (line width, default 2) <code>starred</code> Boolean Decorates text with a star icon - if set, it receives the <code>color</code> instead of the text <code>centered</code> Boolean Centers the line (and turns off automatic wrap). For an <code>extraImage</code>, turns on crop-to-content to equalize transparent borders <code>iconCrossed</code> Boolean Paint a red X over the <code>icon</code> or <code>link</code> image <p>The lines from json will 'surround' the automatically generated lines such that the latter are inserted just above the first json line carrying a link, if any. If no json lines have links, they will be inserted between the automatic title and the automatic info. This method may, however, change in the future.</p> <p>Note: <code>text</code> now also supports inline color markup. Insert <code>\u00abcolor\u00bb</code> to start coloring text, <code>\u00ab\u00bb</code> to stop. <code>color</code> can be a name or 6/8-digit hex notation like <code>#ffa040</code> (different from the <code>color</code> attribute notation only by not allowing 3-digit codes, but allowing the alpha channel). Effectively, the <code>\u00ab\u00bb</code> markers are replaced with <code>[]</code> after translation and then passed to gdx markup language.</p> <p>Note: Using an ExtraImages folder in a mod was not working until version 4.11.5</p>"},{"location":"Modders/Mod-file-structure/5-Miscellaneous-JSON-files/#rgb-colors-list","title":"RGB colors list","text":"<p>Certain objects can be specified to have its own unique color. The colors are defined by a list of 3\u00d7 Integer in this order: red, green, blue. The range of color is from [0, 0, 0] (black) to [255, 255, 255] (white).</p> <p>Note: The default of some objects are gdx color classes. The values of the constants are as follows:</p> name value gold [225, 215, 0] white [255, 255, 255] black [0, 0, 0]"},{"location":"Other/Force-rating-calculation/","title":"Force rating calculation","text":"<p>Since the question has come up several times, here is a summary of how Force ratings are calculated.</p>"},{"location":"Other/Force-rating-calculation/#base-unit-force-evaluation","title":"Base Unit Force Evaluation","text":"<p>First the base unit gets a force evaluation. If the unit has a ranged attack, the starting force is the ranged strength ^ 1.45. Otherwise the starting force is strength ^ 1.5. This is multiplied by the unit's movement ^ 0.3. Nukes get +4000.</p> <p>Then this is multiplied by a bunch of modifiers:</p> <ul> <li>0.5 if ranged naval</li> <li>0.5 if self-destructs when attacking</li> <li>Half the city attack bonus (So +25% if the unit has +50% when attacking cities)</li> <li>A Quarter of attack bonuses vs things other than cities</li> <li>Half the bonus \"when attacking\"</li> <li>Half the bonus \"when defending\"</li> <li>+25% if paradrop able</li> <li>-20% if needs to set up to attack</li> <li>Half the bonus from certain terrain</li> <li>+20% bonus per extra attack per turn</li> </ul>"},{"location":"Other/Force-rating-calculation/#individual-unit-force-evaluation","title":"Individual Unit Force Evaluation","text":"<p>Each individual unit has a Force equal to the Base Unit Force,</p> <ul> <li>multiplied by (number of times promoted +1) ^ 0.3.</li> <li>multiplied by current health as a percentage.</li> </ul>"},{"location":"Other/Force-rating-calculation/#civ-force-ranking","title":"Civ Force Ranking","text":"<p>The civs Force Ranking is based on the sum of all their units' Force Evaluation (cities are not counted). Only half the Force of naval units is counted. This is multiplied by a gold modifier equal to the square root of current gold, as a percentage. The gold multiplier is constrained to be between 1 and 2, so the max multiplier is 2 which is reached at 10000 gold.</p>"},{"location":"Other/Force-rating-calculation/#show-me-some-numbers","title":"Show Me Some Numbers","text":"<ul> <li><code>Scout 13</code></li> <li><code>Archer 19</code></li> <li><code>Slinger 19</code></li> <li><code>Dromon 23</code></li> <li><code>Warrior 27</code></li> <li><code>Maori Warrior 27</code></li> <li><code>Brute 27</code></li> <li><code>Bowman 29</code></li> <li><code>Jaguar 36</code></li> <li><code>Catapult 39</code></li> <li><code>Composite Bowman 39</code></li> <li><code>Galleass 41</code></li> <li><code>Chariot Archer 42</code></li> <li><code>War Elephant 44</code></li> <li><code>War Chariot 45</code></li> <li><code>Horse Archer 45</code></li> <li><code>Trireme 46</code></li> <li><code>Spearman 49</code></li> <li><code>Ballista 55</code></li> <li><code>Persian Immortal 56</code></li> <li><code>Horseman 62</code></li> <li><code>Hoplite 63</code></li> <li><code>Swordsman 64</code></li> <li><code>Chu-Ko-Nu 66</code></li> <li><code>Quinquereme 69</code></li> <li><code>African Forest Elephant 72</code></li> <li><code>Battering Ram 80</code></li> <li><code>Cataphract 80</code></li> <li><code>Crossbowman 81</code></li> <li><code>Longbowman 81</code></li> <li><code>Companion Cavalry 84</code></li> <li><code>Legion 86</code></li> <li><code>Mohawk Warrior 86</code></li> <li><code>Pikeman 87</code></li> <li><code>Landsknecht 87</code></li> <li><code>Trebuchet 88</code></li> <li><code>Keshik 89</code></li> <li><code>Frigate 100</code></li> <li><code>Hwach'a 110</code></li> <li><code>Longswordsman 118</code></li> <li><code>Camel Archer 124</code></li> <li><code>Samurai 126</code></li> <li><code>Berserker 133</code></li> <li><code>Knight 134</code></li> <li><code>Conquistador 134</code></li> <li><code>Mandekalu Cavalry 134</code></li> <li><code>Caravel 134</code></li> <li><code>Ship of the Line 139</code></li> <li><code>Musketman 144</code></li> <li><code>Cannon 151</code></li> <li><code>Minuteman 154</code></li> <li><code>Janissary 162</code></li> <li><code>Gatling Gun 169</code></li> <li><code>Musketeer 182</code></li> <li><code>Tercio 182</code></li> <li><code>Naresuan's Elephant 194</code></li> <li><code>Lancer 204</code></li> <li><code>Hakkapeliitta 204</code></li> <li><code>Sipahi 218</code></li> <li><code>Privateer 222</code></li> <li><code>Rifleman 243</code></li> <li><code>Carolean 243</code></li> <li><code>Sea Beggar 244</code></li> <li><code>Artillery 245</code></li> <li><code>Battleship 269</code></li> <li><code>Great War Bomber 290</code></li> <li><code>Cavalry 300</code></li> <li><code>Hussar 320</code></li> <li><code>Triplane 325</code></li> <li><code>Turtle Ship 327</code></li> <li><code>Cossack 337</code></li> <li><code>Norwegian Ski Infantry 345</code></li> <li><code>Guided Missile 378</code></li> <li><code>Carrier 408</code></li> <li><code>Submarine 420</code></li> <li><code>Bomber 425</code></li> <li><code>Great War Infantry 434</code></li> <li><code>Machine Gun 465</code></li> <li><code>Fighter 470</code></li> <li><code>Foreign Legion 477</code></li> <li><code>Ironclad 486</code></li> <li><code>Zero 508</code></li> <li><code>Anti-Tank Gun 542</code></li> <li><code>B17 551</code></li> <li><code>Marine 645</code></li> <li><code>Landship 703</code></li> <li><code>Infantry 720</code></li> <li><code>Nuclear Submarine 735</code></li> <li><code>Stealth Bomber 771</code></li> <li><code>Paratrooper 806</code></li> <li><code>Anti-Aircraft Gun 819</code></li> <li><code>Destroyer 870</code></li> <li><code>Missile Cruiser 888</code></li> <li><code>Rocket Artillery 930</code></li> <li><code>Tank 948</code></li> <li><code>Jet Fighter 988</code></li> <li><code>Helicopter Gunship 992</code></li> <li><code>Mechanized Infantry 1186</code></li> <li><code>Panzer 1223</code></li> <li><code>Mobile SAM 1376</code></li> <li><code>Modern Armor 1620</code></li> <li><code>Giant Death Robot 2977</code></li> <li><code>Atomic Bomb 4714</code></li> <li><code>Nuclear Missile 7906</code></li> </ul>"},{"location":"Other/Installing-on-macOS/","title":"Installing on MacOS","text":"<p>There are currently several ways to install Unciv on MacOS.</p> <p>It is recommended that you do not install from source, since the end result will be the same.</p>"},{"location":"Other/Installing-on-macOS/#installing-using-macports","title":"Installing using MacPorts","text":"<p>Details here - simply run <code>sudo port install unciv</code> from command line and you're good to go!</p> <p>Does not require a JDK to be preinstalled.</p>"},{"location":"Other/Installing-on-macOS/#installing-using-jar","title":"Installing using JAR","text":"<ol> <li>If you don't already have Java 8 or OpenJDK (versions 11 and 18 do work) installed on your Mac, either</li> <li>Download it from the official website. Once you have downloaded the file, open it and follow the instructions on screen.</li> <li>If you use Homebrew, just run <code>brew install java</code></li> <li>Now that you have Java installed, it's time to download the latest Unciv JAR. This can be done from the releases screen here on Github. Download the file called Unciv.jar.</li> <li>To run the game, you'll need to run <code>java -jar Unciv.jar</code> from a Terminal.</li> <li>Alternatively, you could create an 'Unciv.sh' file containing that line, and then run the new file to allow you to create shortcuts, etc.</li> </ol> <p>(Sadly Unciv does not auto update when installing it using this method on MacOS so you will need to download the latest Unciv.jar from Github every time you want to update the game.)</p>"},{"location":"Other/Installing-on-macOS/#installing-from-source","title":"Installing from source","text":"<p>For instructions on how to install Unciv from source see Building locally without Android Studio. It is not recommended to use this method as it achieves the same result as the first method whilst being much more complicated and prone to errors along the way.</p> <p>(Sadly Unciv does not auto update when installing it using this method on MacOS so you will need to follow these steps every time you want to update the game.)</p>"},{"location":"Other/Intentional-departures-from-Civ-V/","title":"Intentional departures from Civ V","text":""},{"location":"Other/Intentional-departures-from-Civ-V/#water-melee-units-can-attack-land-units-on-shore","title":"Water melee units can attack land units on shore","text":"<p>A result of a Discord poll. Water melee units in Civ V are considerably underpowered, so much so that even on maps with water they weren't considered competitive.</p> <p>This change brings back an edge to water melee units that makes them worth building.</p>"},{"location":"Other/Intentional-departures-from-Civ-V/#workers-do-not-complete-an-improvement-on-the-same-turn-they-get-orders-to-work-on-it","title":"Workers do not complete an improvement on the same turn - they get orders to work on it","text":"<p>This allows players to assign workers to improve tiles, and then to reconsider and change improvement or move them elsewhere.</p> <p>Building stuff takes time!</p>"},{"location":"Other/Intentional-departures-from-Civ-V/#forests-and-jungle-are-visible-1-tile-outside-visibility-range","title":"Forests and Jungle are visible 1 tile outside visibility range","text":"<p>In Civ V, this is the behavior of Hills and Mountains, but not of Jungle and Forest.</p> <p>And yet, Jungle and Forest can block Hills, and Hills+Forest can block Mountains from view - so they must be the same height!</p> <p>This part of Civ V visibility makes no sense, considering the otherwise well-structured visibility logic, and we consider this to be a bug.</p>"},{"location":"Other/Intentional-departures-from-Civ-V/#great-warpath-does-not-provide-railroad-bonuses-for-connected-cities","title":"Great Warpath does not provide railroad bonuses for connected cities","text":"<p>This is a discrepancy in Civ V rules - if all jungles are like roads, then they shouldn't be considered railroads for production purposes.</p> <p>The idea is that if you can quickly transport goods with railroads that yields a production bonus - moving fast through jungles may be possible, but not with industrial amounts of goods.</p>"},{"location":"Other/Multiplayer/","title":"Multiplayer","text":"<p>Multiplayer in Unciv is based on simple save file up/download, which is why it is based on a free Dropbox account by default. However, a lot of people use this default, so it is uncertain if you'll actually be able to access it consistently. See Hosting a Multiplayer server for hosting your own server.</p>"},{"location":"Other/Multiplayer/#how-to-play","title":"How to play","text":"<ol> <li>Make sure you are all using the same multiplayer server (<code>Main Menu -&gt; Options -&gt; Multiplayer</code>)</li> <li>Let all players send you their user ID (<code>Main Menu -&gt; Multiplayer -&gt; Copy user ID</code>).</li> <li>(Optional) Add those user IDs to your friend list (<code>Main Menu -&gt; Multiplayer -&gt; Friends list</code>).</li> <li>In <code>Main Menu -&gt; Start new game</code>, check <code>Online multiplayer</code> on the left. On the right, add more human players and input the user IDs of the players you want to play with. Press <code>Start game!</code>.</li> <li>The game ID will be automatically put in your clipboard. (If you lost it, you can get it again from <code>Main Menu -&gt; Multiplayer -&gt; Copy game ID</code>). Send this game ID to the other players.</li> <li>The other players need to go to <code>Main Menu -&gt; Multiplayer -&gt; Add multiplayer game</code> and enter the game ID you just sent them. They can then join the game from this multiplayer screen.</li> </ol>"},{"location":"Other/Multiplayer/#hosting-a-multiplayer-server","title":"Hosting a Multiplayer server","text":"<p>Due to certain limitations on Dropbox's API, with the current influx of players, we've many times reached the point that Dropbox has become unavailable.</p> <p>Therefore, you can now host your own Unciv server on any computer that can run Java programs.</p> <p>This guide is written for people with a moderate amount of technical knowledge about computer software and who are able to search the web to learn stuff they might not know. If you're completely new to this, you'll likely not be able to follow without some larger time investment to learn.</p> <p>If you're proficient in server hosting, there's another how-to for you at the end.</p>"},{"location":"Other/Multiplayer/#how-to","title":"How To","text":"<p>Before starting, you must have a Java JDK installed. You'll also have to download the latest UncivServer.jar.</p> <p>From the directory where the <code>UncivServer.jar</code> file is located, create a folder named \"MultiplayerFiles\", open a terminal (in Windows, Shift+RightClick in the folder) and run the following command in the directory: <code>java -jar UncivServer.jar</code></p> <p>Your server has now started!</p> <p>To check if everything works, you can start Unciv on the same computer, go to \"Options &gt; Multiplayer\", then enter <code>http://localhost:8080</code> as the \"Server address\" and click \"Check connection to server\". You should now get a \"Success!\" result, which means it's working!</p> <p>To connect with other devices outside your local network or to make your server accessible from the web, you'll need a real IP. If your ISP provides you with a real IP already, forward your server's port (default 8080) with your router, and your server would be exposed to the internet! In this case you can also use <code>http://&lt;your-real-ip-adress&gt;:&lt;your-forwarded-port&gt;</code>. For example, if you have the IP <code>203.0.113.1</code> and forwarded the port of your server to port <code>1234</code>, your server can be accessed from the internet from the url <code>http://203.0.113.1:1234</code>. Additionally, since the <code>HTTP</code> protocol defaults to port <code>80</code>, if you have forwarded your server to port <code>80</code>, you wouldn\u2019t need to specify any port. For example, if you forward the server's port to port <code>80</code> of your real IP, your server would be exposed to <code>http://&lt;your-real-ip&gt;</code> or in this case <code>http://203.0.113.1</code>.</p> <p>On the other device, enter the URL to your server (<code>http://&lt;your IP address&gt;:&lt;your chosen port&gt;</code>), click 'check connection' from the new device, and if you get the same \"Success!\" result - congratulations, you're connected to the same server and can start a multiplayer game!</p> <p>Please note: * Devices not connected to the same server will not be able to participate in multiplayer games together * In many places, your external IP address changes periodically. If that is the case, you either have to update the IP all the time or use something like a dynamic DNS service. * To start your server from some special ports like <code>80</code> or <code>443</code>, you would need admin privileges. If you want to use those ports, run PowerShell as admin. However, if you use port forwarding from a router, you really don't need to do this. You can start the server from port <code>8080</code> and forward it to <code>80</code>.</p>"},{"location":"Other/Multiplayer/#how-to-for-people-with-hosting-experience","title":"How To for people with hosting experience","text":"<ul> <li>Have a Java JDK installed</li> <li>Download the latest UncivServer.jar (can also use that link to automatically update probably)</li> <li>See options with <code>java -jar UncivServer.jar --help</code><ul> <li>The server will run on a specified port (<code>-p</code>, default <code>8080</code>), writing files in a folder (<code>-f</code>, default <code>./MultiplayerFiles/</code>), so it needs appropriate permissions.</li> </ul> </li> <li>Run it: <code>java -jar UncivServer.jar -p 8080 -f /some/folder/</code><ul> <li>It basically just does simple file storage over HTTP.</li> <li>Files are not cleaned automatically if a game ends or is deleted on the client-side</li> </ul> </li> </ul>"},{"location":"Other/Multiplayer/#third-party-unofficial-software-for-hosting-your-own-unciv-server","title":"Third-party (unofficial) software for hosting your own Unciv server","text":"<ul> <li>https://github.com/Mape6/Unciv_server (Python)</li> <li>https://gitlab.com/azzurite/unciv-server (NodeJS)</li> <li>https://github.com/oynqr/rust_unciv_server (Rust)</li> <li>https://github.com/touhidurrr/UncivServer.xyz (TypeScript | Bun)</li> </ul>"},{"location":"Other/Multiplayer/#third-party-unofficial-publicly-hosted-unciv-servers","title":"Third-party (unofficial) publicly hosted Unciv servers","text":"<p>These servers are run by the community and not official servers. These servers may become (temporarily or permanently) unavailable and lose your game saves. They might also collect data like your IP, how often you play, or other data. Use these only if you accept these risks and trust the server owners.</p> <ul> <li><code>https://uncivserver.xyz/</code> - Run by @touhidurrr on their Discord (Source Code)</li> </ul>"},{"location":"Other/Regions/","title":"Regions","text":""},{"location":"Other/Regions/#the-concept","title":"The Concept","text":"<p>During the generation of a random map (only; not pre-made maps) the map is split into a number of regions equal to the number of major civs. Each region gets classified according to its prevalent terrain, or if unable to be classified is called a \"hybrid\" region. The region type corresponds to the start bias of the civs as they are distributed. The region type also determines start placement and what luxuries will appear in the region.</p> Example"},{"location":"Other/Regions/#how-to-define-region-behavior-in-your-mod","title":"How to define region behavior in your mod","text":"<p>The game will work without any extra json definitions, but if you want the region system to work well when generating maps for your mod, these are the relevant uniques to define.</p>"},{"location":"Other/Regions/#terrainsjson","title":"Terrains.json","text":"<p>\"Always Fertility [amount] for Map Generation\", \"[amount] to Fertility for Map Generation\" - these determine how good a terrain is for purposes of dividing land up fairly. The numbers are arbitrary but should reflect the relative value of the terrains.</p> <p>\"A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount]\", \"A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount]\" - these determine the rules for when a region is classified as eg a \"desert\" region. Terrains are evaluated in ascending priority order, so in the base ruleset tundra regions are checked first. \"A Region can not contain more [simpleTerrain] tiles than [simpleTerrain] tiles\" - a useful compliment to the sum-of-two-terrains criterium above, if both terrains are in and of themselves terrain types. So in the base ruleset a large enough sum of jungle and forest allows a region to be classified as jungle, but only if there is more jungle than forest. \"Base Terrain on this tile is not counted for Region determination\" - for terrain features that are unremovable or otherwise dominate the tile. Used for Hills in the base ruleset. A region not fulfilling any criteria is classified as \"Hybrid\"</p> <p>\"Considered [terrainQuality] when determining start locations\" - where \"terrainQuality\" is one of \"Food\", \"Production\", \"Desirable\", \"Undesirable\". Usually used together with the \"\" or \"\" to determine what terrain is attractive when determining start locations. Note: if there are none of these for a terrain, the game will use the base stats of the terrain to guess a quality, but if there are any, the game will assume that they are complete."},{"location":"Other/Simulations/","title":"Simulations","text":"<p>The codebase supports the ability to run automated simulations and compare the results for AI development.</p>"},{"location":"Other/Simulations/#enabling","title":"Enabling","text":"<p>Set up a custom build configuration.</p> <p>Set the working directory to android/assets, just like when running desktop. And use the <code>unciv.desktop.main</code> module. </p>"},{"location":"Other/Simulations/#running-sims","title":"Running Sims","text":"<p>Execute the ConsoleLauncher Build Configuration set up above. Results should appear in the Console of the IDE.</p>"},{"location":"Other/Simulations/#configuring-sims","title":"Configuring Sims","text":"<p>Within the <code>desktop\\src\\ConsoleLauncher.kt</code> file, you can adjust the number of sims to run, which nations to use, etc.</p> <p>Recommend using generic civs with no Uniques. You can see the code add a generic <code>Nation</code> to the <code>ruleset</code> object, and you can key different behavior throughout the code using the Nation Name constant as the control switch.</p> <p>You can also adjust the game parameters and map parameters. To get more consistent results, turning off Natural Wonders and Barbarians can help.</p> <p>By default the order of players is randomized to make it more fair.</p> <p>The <code>statTurns</code> list parameter allows the system to save certain stats at particular turns so you can track it over the course of the games.</p>"},{"location":"Other/Simulations/#understanding-results","title":"Understanding Results","text":"<p>By default the console will report the number of wins per civ, type of win, and the <code>popsum</code> at the end of the game. This is the average amount of population for the whole civ at the end of the game.</p> <p>It is a good habit to validate your expectations for which Civ would win, how they would win, and any changes in the reported values. Some changes won't show up in the win rates, so are better tested by making a scenario in the Map Editor or with the in-game Console then testing the AI behaviors.</p> <p>The p-value is also reported, showing based on the winrate how likely this result is in a binomial test. If this value is very small, then there is a low chance this arose out of random chance and that your changes made a statistically significant change in the overall winrate. Running 200-400 Sims is usually a good baseline point.</p>"},{"location":"Other/Translating/","title":"Translating","text":""},{"location":"Other/Translating/#starting-out","title":"Starting out","text":"<p>The translation files are at /android/assets/jsons/translations</p> <p>If you're adding a new language, see Adding a new language.</p> <p>If you're adding stuff to an existing language, simply start editing the file!</p> <p>You don't need to download anything, all translation work can be done on the Github website :)</p> <p>When you feel that you're ready to add your translation to the game, you'll need to create a merge request, which takes your changes and puts them into the main version of the game - it's pretty straightforward once you do it</p> <p>Please note that Right-to-Left languages such as Arabic and Hebrew are not supported by the framework :/</p>"},{"location":"Other/Translating/#app-store-text","title":"App store text","text":"<p>There are two special entries that won't show in the game but are automatically used to provide short and long descriptions for F-Droid (and possibly other stores soon). They're near the beginning of each language file and marked \"Fastlane\". See the comments just above each for help, and where to find the actual english original to translate. Do not overlook the note on line breaks in Other notes for the full description!</p>"},{"location":"Other/Translating/#pitfalls","title":"Pitfalls","text":"<ul> <li>If a translation template (the stuff to the left of \"<code>=</code>\") contains square brackets, you will have to include each of them verbatim in your translation, but you can move them. Upper/lower case is relevant! e.g. <code>All [personFilter] are cool</code> can be translated as <code>Tous les [personFilter] sont cool</code>, but not as <code>Tous les [personnages] sont cool</code>, and neither as <code>Nous sommes vraiment cool</code>. Failing this is the main cause of your PR's showing up with red \"x\"es and \"checks failed\".</li> <li>Blanks: Watch out for blanks at the start of a line or two of them before the equals sign. If you got such a line - those blanks are part of the translation key and must not be deleted on the left side, and you should probably also include them in your translation (unless your language doesn't need spaces to separate things).</li> <li>Changes in the templates: When we find a typo in the english texts and fix it, or marginally change a wording, the template changes. Often the old template will not be automatically fixed in the existing translations, because it's a lot of work and in most cases the developers cannot be sure the translation is still correct. For you, that might look like your translations are simply disappearing with an update. In such a case, you have the option to use github's history to look up old versions, copy the old translation, place it where the new template now says \"requires translation\" - and proofread and adapt it to the new english version. The history link for each file is in the top right area and has a nice round clock icon.</li> </ul>"},{"location":"Other/Translating/#wait-what-just-happened","title":"Wait, what just happened?","text":"<p>Like most open-source projects, Unciv is developed at Github, so if you don't have a user you'll first have to create one. The way Github works is the following:</p> <ol> <li>You create a 'fork' repo, i.e. copy, of Unciv that belongs to your user (myUser/Unciv)</li> <li>You make changes to your copy. These changes are called a 'commit'.</li> <li>You make a pull request, which is basically asking for the changes you made on myUser/Unciv to be merged into the main repo (yairm210/Unciv)</li> </ol> <p>When you ask to 'edit' a file in yairm210/Unciv, these stages happen automatically - but it's important to understand what's happening behind the scenes do you understand where the changes actually are!</p>"},{"location":"Other/Translating/#other-notes","title":"Other notes","text":"<p>Each untranslated phrase will have a ` # Requires translation!\" line before it, so you can quickly find them. You don't need to remove them yourself - they will be automatically removed the next time we rebuild the file.</p> <p>Do as much as you're comfortable with - it's a big game with a lot of named objects, so don't feel pressured into doing everything =)</p> <p>If you're making changes to your own repo, make sure that you make the branch you're changing is based on Unciv's master branch</p> <p>Some entries have line breaks expressed as <code>\\n</code>: Your translation can and in most cases should use them as well, but you do not need to distribute them exactly as in the original. Try to find a translation that reads nicely, then place the line break codes at roughly the same intervals as the original uses (less if your language's glyphs are wider than latin ones). Important: You cannot use normal line breaks, you must use the <code>\\n</code> codes, normal line breaks are not part of a translation.</p> <p>Chinese tutorial: \u5982\u679c\u4f60\u662f\u4e2d\u56fd\u4eba\uff0c\u90a3\u4e48\u606d\u559c\u4f60\u8fd0\u6c14\u4e0d\u9519\uff01\u8fd9\u91cc\u6709Unciv\u4e2d\u6587\u5f00\u53d1\u8005\u4eec\u4e13\u95e8\u4e3a\u4e2d\u6587\u7ffb\u8bd1\u5de5\u4f5c\u8005\u51c6\u5907\u7684\uff08\u5341\u5206\u8be6\u5c3d\uff09\u6559\u7a0b\u89c6\u9891\u3002\uff1a(Video On Bilibili)</p>"},{"location":"Other/Translating/#adding-a-new-language","title":"Adding a new language","text":"<p>If any of the following steps are beyond your skillset, ask for help. All but the first two steps can be postponed.</p> <ul> <li>You'll need to create a new file ('Create a new file' to the right of the folder name in the UI), and copy into it the contents of template.properties</li> <li>For automatic language processing for a release (e.g. adding new templates) there needs to exist a line in completionPercentages.properties. Location and number do not matter, what matters is that the language name left of the <code>=</code> corresponds exactly with your new language file name, case-sensitive, without extension.</li> <li>For a nice display in language picker and options, we need a flag. It should be a circle surrounded by transparency within a 128x128px square. Add such a png to FlagIcons. For potential sources, look in the credits, and when done, add your source unless it is already covered.</li> <li>A new graphic needs to be converted into the texture atlases (see Images and the texture atlas) - for a new flag, this usually means running the desktop version once from source, then uploading the updated atlas files via push or manually.</li> <li>Lastly, your new language should be represented in the LocaleCode enum - reasons see below. You can add this even if you cannot compile - just make sure you follow the existing pattern, and read the inline documentation.</li> <li>The first function of this entry is alphabetical sorting. Unfortunately, it is not easy to tell whether a specific combination is supported by Java. The simplest way to deal with this is trial and error - once your language is established and playable, see if Civilopedia entries seem properly sorted, if not, open an issue and tell us what other, more common language may have better sorting rules.</li> <li>This entry is also required to enable fastlane description upload to a correct folder - however, whether F-Droid supports your language is not guaranteed (this page should help - but doesn't).</li> </ul>"},{"location":"Other/Translating/#diacritics-support","title":"Diacritics support","text":"<p>When displaying text, the underlying libraries (libGdx and possibly lwjgl3/GWT) that Unciv uses assume one codepoint in the UTF-16 representation corresponds to one rendered glyph, which causes incorrect display of languages making heavy use of diacritics or of characters outside the basic multilinguial plane like most emoji. A language file can activate a \"trick\", where combinations of codepoints that should render as one single glyph are mapped into a \"fake alphabet\", which is created on the fly in the Private Use Area defined by Unicode.</p> <p>To activate this feature, set <code>diacritics_support = true</code> in your translation. There are a few additional \"settings\" - translation lines where the \"translation\" is some control instruction instead. All of these are optional, though your language may show glitches unless you define some. For example, Bangla needs a definition for U+09CD, where the Unicode category does not fully define the required behaviour.</p> <p>Each of the following definitions represents zero or more characters, and can simply list them as one string. For readability, they can also be quoted (\" surrounding the entire definition), characters can be separated by spaces, or you can use standard \"U+xxxx\" representations (these need space separators). These entries, unlike the rest of a translation file, also support entry-specific comments: After the code(s), from a '#' to the end of the line. Search for the information about the Unicode support in your language, e.g. on https://www.unicode.org/charts/ for information on which codes you might need to specify. If your language does not need these, feel free to ignore, or use \"\" to avoid the \"requires translation\" mark.</p>"},{"location":"Other/Translating/#limitations","title":"Limitations","text":"<ul> <li>Consider this feature as being in an experimental stage.</li> <li>Can only work if the language's script still consists of individual glyphs rendered left to right.</li> <li>The underlying libraries (Java AWT or Android) must be able to render the combinations you need - sometimes you will need to select and possibly install a specific font to see the intended results.</li> <li>Using diacritics support incurs a performance penalty, but mostly when loading languages starting Unciv.</li> <li>The feature also has a \"quantity\" limitation from the size of the Unicode \"Private Use Area\" (only the one in the BMP can be used), and this must be shared by the feature whereby Unciv automatically displays ruleset object icons:   The total number of distinct diacritic \"combinations\" (or glyphs) your translation actually uses plus the number of objects in the loaded mods (or vanilla ruleset) must not exceed 6400.</li> <li>When enabled and the range is the default (or spans the unicode range for surrogates), then the engine will treat Unicode surrogate pairs correctly, assigning a fake alphabet codepoint for them and allowing diacritics to include them in a combo.   However, the parser is strict and throws an Exception on violations of the UTF-16 standard. If your translation crashes Unciv, check your editor for incorrect Unicode handling   (translation files are UTF-8 not UTF-16, but unfortunately most encoding converters allow transferring mismatched surrogate pairs).   Also, this possibility could so far not be successfully tested for emoji - no supporting font found, see \"experimental\".</li> </ul>"},{"location":"Other/Translating/#settings-as-translation-entries-in-the-language-file","title":"Settings (as translation entries in the language file)","text":"<ul> <li><code>diacritics_support</code>: This entry must be set to \"true\" for the diacritics support to work at all. Any other value will cause text to be passed through unchanged.</li> <li><code>unicode_block_start_character</code> and <code>unicode_block_end_character</code>: These define the range of characters that should be considered. One character or code each. Defaults to the entire BMP range.   All characters in this range will be categorized, those undefined by Unicode, controls or punctuation, or those outside the range will pass through and reset the diacritics engine for the rest of the line, that is, pending potential combinations will be flushed.   Limiting this range - e.g. to the Unicode page dedicated to your language - is a performance optimization, but ultimately not required.</li> <li><code>left_joining_diacritics</code>: Optionally define additional codes meant to join with the character to the left of them, by default the unicode categories \"Mn\" and \"Mc\" within the range described above are used.</li> <li><code>right_joining_diacritics</code>: Optionally define additional codes meant to join with the character to the right of them, by default none.</li> <li><code>left_and_right_joiners</code>: Optionally define additional codes meant to join with the character to the left AND with the character to the right, by default none</li> </ul> <p>These are processed in listed order and can override previous categorizations per character codepoint. Thus a code specified in <code>left_and_right_joiners</code> can be in the \"Mn\" unicode category, which would put it into the <code>left_joining_diacritics</code>, but will still work, because the later definition overrides the earlier one.</p>"},{"location":"Other/Translating/#why-not-use-a-crowdsourcing-translation-website-like","title":"Why not use a crowdsourcing translation website like &lt;...&gt;?","text":"<ol> <li>Testing. Currently, translations undergo a number of tests for verification. This allows some language changes to be accepted and others not, and it's all in the same platform with the same tests. External translation tools don't allow for this.</li> <li>History and revisions. This is what Git was made for, and nothing like it exists in the world. I'm not exaggerating.</li> <li>Release cycle. We release versions weekly. If we need to take information from an external website every time, and for many that I've checked - you need to download the info as a csv or something and convert it. Every extra step hurts.</li> <li>Discussions. Most crowdsourcing translation websites don't allow for discussions and corrections on translations. Github does.</li> <li>Mass changes. If we're changing the source of the translation but want to keep the various destinations (say, we change \"Gold from trade routes +[amount]%\" to \"+[amount]% Gold from trade routes\"), if all the translation files are in Git we can do that in 1 minute. If it's external, this varies greatly.</li> </ol>"},{"location":"Other/Translating/#translation-generation-for-developers","title":"Translation generation - for developers","text":""},{"location":"Other/Translating/#the-automatic-template-generation","title":"The automatic template generation","text":"<p>Before releasing every version, we regenerate the translation files.</p> <p>Sometimes, new strings (names, uniques, etc) are added in the json files. In order to not have to add every single one to the translation files manually, we have a class - TranslationFileWriter - that, for every language:</p> <ul> <li>Goes over the template.properties and copies translation lines</li> <li>For every json file in the jsons folder<ul> <li>Selects all string values - both in objects, and in arrays in objects, to any inheritance or nesting level.     (Collections that can be parsed must be derived from List or AbstractCollection)</li> <li>Generates a 'key = value' line</li> </ul> </li> <li>Scans knowledge from UniqueType and UniqueParameterType instances and generates 'key = value' lines for them</li> </ul> <p>This means that every text that ISN'T in the jsons or the UniqueType system needs to be added manually to the template.properties in order to be translated! That also means if you've been adding new json structures you (or someone) should check TranslationFileWriter and see if it is able to cope with them.</p>"},{"location":"Other/Translating/#rules-for-templates-added-manually","title":"Rules for templates added manually","text":"<p>Building a new UI and doing something like <code>popup.add(\"Hello world\".toLabel())</code> is a typical case: This is not contained in json data, so you'll have to add the template to <code>template.properties</code> yourself. For this example, adding <code>Hello world =</code> somewhere in a line of its own could suffice.</p> <p>Note the space at the end - it's absolutely required, and see to it your editor does not destroy your work. If you want to make sure, use Android Studio for git integration, but edit the file in an external editor, then run the unit tests locally before pushing. (to do: add link for instructions how to do that)</p> <p>Leading spaces on a translation line or more than one space between the text and the <code>=</code> would mean these spaces are a key part of the string to be translated. That can work, but be warned: translators often overlook that those spaces are a required part of both template and translation, so if you can do without, then doing without is safer.</p> <p>Translation templates can use placeholders, and there's two varieties: <code>[]</code> and <code>{}</code>. Square ones take precedence over curly ones, and nesting works only with a single level of curly nested inside one level of square. I both cases the symbols themselves (<code>[]{}</code>) are removed by the translation engine.</p> <p>Square brackets <code>[]</code> mean the outer and inner components are both translated individually. The outer template will use alias names inside the brackets - example: Your code outputs \"Everyone gains [5000] gold!\", then the translation template should be \"Everyone gains [amount] gold! = \". The translation engine would translate the \"Everyone gains [] gold!\" and \"5000\" individually and reassemble them - of course, the number is simply passed through. But in other cases that could be e.g. a Unit name that would be translated, and you could trust that translations for units are already handled just fine. Note that uniques often use the feature, but it is in no way limited to them. If it makes life easier for translators, use it.</p> <p>Curly brackets <code>{}</code> are simpler - the contents within the brackets are translated individually, while the outer parts are passed through verbatim. Example: <code>\"+$amount${Fonts.gold} {Gold}\".toLabel()</code> - note the first <code>${}</code> is a kotlin template while the second pair becomes part of the string. It tells the translation engine to ignore the numbers and the symbol but to translate the single word \"Gold\".</p>"},{"location":"Other/Translating/#rules-for-all-sources","title":"Rules for all sources","text":"<p>The [], {} and &lt;&gt; bracket types are used internally and cannot be part of a translatable text. Use () instead.</p>"},{"location":"Other/Translating/#translation-generation-for-modders","title":"Translation generation - for modders","text":"<p>If you can run desktop with the mod installed, then provide at least one valid translation of something that is present in your mod or the base game in that file. The file can be empty otherwise. Now run Unciv and use options-advanced-\"Generate translation files\". Reload your translation file and it will have added all the necessary \"requires translation\" entries specific to your mod (I repeat, works only if there's at least one valid entry already there). AFAIK you can also override base game translations, but those won't be output by the \"Generate translation files\" tool.</p> <p>Here's an example: Say you have a new nation in your mod named \"The Borg\". You create the translations folder, create an empty file named, say, \"Hungarian.properties\", add \"The Borg = The Borg\" to that, run Unciv and run the translation generator from options. Reload the new file, bingo all what Unciv would like to see is there.</p> <p>If you're modding on Android only - don't. That said, it's not impossible, just make do without the described tool and add everything yourself, test, rinse, repeat. Be aware that the game does not read changed files from disk if it doesn't need to, so on Droid you could either edit locally and force-stop to ensure changes are read, or edit on a github repo and re-install from there, or...</p> <p>Adding new languages in a mod is not supported (because the completionPercentages.properties file determines which languages Unciv deems as known, and I'm not saying impossible as one could manipulate their GameSettings.json).</p> <p>Remember, exact case is important both in translations left of the \"=\" and file names.</p>"},{"location":"Other/Translating/#more-about-translating","title":"More about translating","text":"<p>Sometimes you'll see a <code>English.properties</code> in the translation folder. For example, if you see <code>gold = credits</code> in <code>English.properties</code>, It means the word 'gold' will be displayed as 'credits' in the English version. So in your translation file, though 'gold' is already translated in vanilla unciv, you should sill translate the line. <pre><code>gold = credits ( &lt;- in your language)\nNOT:gold = gold ( &lt;- in your language)\n</code></pre> (The example comes from the mod Alpha-Frontier. Thanks @carriontrooper.)</p> <p>Most Base Ruleset mods contain this feature, so you'd better be careful translating those, or you'll make the translation work really 'amuzing':D</p> <p>Another thing about translation is 'extra translating'. The aim of 'extra translating' is to make your mod translation closer to the gaming content and give the players a better gaming experience. A great example is from @SpacedOutChicken's mod Deciv. @The Bucketeer made some 'extra translations' which are excellent.(link is here)I've got a few lines here so you can take it as a reference. <pre><code>Your warmongering ways are unacceptable to us. = \u5373\u4f7f\u5728\u91ce\u883b\u7684\u8352\u571f\u4e16\u754c\uff0c\u7aae\u5175\u9ef7\u6b66\u7684\u884c\u5f91\u9084\u662f\u7121\u6cd5\u5bb9\u5fcd\u7684\uff01\n(English meaning: These warmongering ways are still unaccepable enen in this world of savage)\n</code></pre></p>"}]}